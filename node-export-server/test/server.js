var expect  = require("chai").expect;
var fs = require('fs');

var config = require('../config.json');
config.datasources.API.overrideConfig = 'test.conf';

var server = require("../server.js");
var path = require('path');

describe("Node Export Server", function() {
    describe("Validate BBOX", function() {
        it("fails for empty string", function() {
            var bbox = '';
            expect(server.validateBbox(bbox)).to.equal(null);
        });
        it("fails for words", function() {
            var bbox = 'foo';
            expect(server.validateBbox(bbox)).to.equal(null);
        });
        it("fails for command injection", function() {
            var bbox = '38.4902,35.7982,38.6193,35.8536; rm *';
            expect(server.validateBbox(bbox)).to.equal(null);
        });
        it("fails for bad min/max order", function() {
            var bbox = '39.4902,35.7982,38.6193,35.8536';
            expect(server.validateBbox(bbox)).to.equal(null);
        });
        it("fails for greater than max bounds", function() {
            var bbox = '-999,35.7982,189,35.8536';
            expect(server.validateBbox(bbox)).to.equal(null);
        });

        it("works for positive numbers", function() {
            var bbox = '38.4902,35.7982,38.6193,35.8536';
            expect(server.validateBbox(bbox)).to.equal(bbox);
        });
        it("works for negative numbers", function() {
            var bbox = '38.4902,-35.9982,38.6193,-35.8536';
            expect(server.validateBbox(bbox)).to.equal(bbox);
        });
        it("works for whole numbers", function() {
            var bbox = '38,-36,38.6193,-35.8536';
            expect(server.validateBbox(bbox)).to.equal(bbox);
        });
    });
    describe("writeExportFile", function() {
        it ('takes posted json data and writes it to a .json file', function(done) {
            // for all this function knows, the req object it is given,
            // is just a readable stream with a params property
            // for simple testing, we can give it just that.
            var osmFile = path.join(__dirname, 'test_overpass.json');
            var mockJSONRequest = fs.createReadStream(osmFile);
            mockJSONRequest.params = {
                datasource: 'Overpass',
                schema: 'TDSv70',
                format: 'json'
            }
            server.writeExportFile(mockJSONRequest, function(hash, fileName) {
                expect(fileName.split('.')[1]).to.eql('json');
                fs.unlink(fileName, function(err) {
                    done();
                })
            })
        });
        it("takes posted osm xml data and writes it to a .osm file", function(done) {
            var osmFile = path.join(__dirname, 'test_overpass.osm')
            var mockXMLRequest = fs.createReadStream(osmFile);
            mockXMLRequest.params = {
                datasource: 'Overpass',
                schema: 'TDSv70',
                format: 'json'
            }
            server.writeExportFile(mockXMLRequest, function(hash, fileName) {
                expect(fileName.split('.')[1]).to.eql('osm');
                fs.unlink(fileName, function(err) {
                    done();
                })
            })
        });
        it("takes posted osm xml data from non-overpass source and makes it a .osm file", function(done) {
            var osmFile = path.join(__dirname, 'test_overpass.osm')
            var mockXMLRequest = fs.createReadStream(osmFile);
            mockXMLRequest.params = {
                datasource: 'not_overpass',
                schema: 'TDSv70',
                format: 'json'
            }
            server.writeExportFile(mockXMLRequest, function(hash, fileName) {
                expect(fileName.split('.')[1]).to.eql('osm');
                fs.unlink(fileName, function(err) {
                    done();
                })
            })

        })
    });
    describe("Polygon Functions", function() {
        var poly = '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545';
        var multipolygon = '-114.65705403328,32.53082221463;-114.65859898567,32.52872363268;-114.65705403328,32.52582895645;-114.65362080574,32.52517764144;-114.65147503853,32.52756577338;-114.65259083748,32.53060512222;-114.65705403328,32.53082221463;-114.66632374763,32.53834776051;-114.66786870003,32.53624935438;-114.66632374763,32.53335492065;-114.6628905201,32.53270366021;-114.66074475288,32.53509159208;-114.66186055183,32.53813068628;-114.66632374763,32.53834776051;-114.65739735603,32.54558326764;-114.65894230843,32.5434850306;-114.65739735603,32.54059083007;-114.65396412849,32.5399396221;-114.65181836128,32.54232736158;-114.65293416023,32.54536621091;-114.65739735603,32.54558326764;-114.66555127144,32.55129890601;-114.66709622383,32.54920080255;-114.66555127144,32.54630678628;-114.6621180439,32.54565561977;-114.65997227669,32.54804320724;-114.66108807564,32.5510818631;-114.66555127144,32.55129890601;-114.67233189583,32.5439915061;-114.67387684822,32.54189323185;-114.67233189583,32.53899898002;-114.66889866829,32.53834776051;-114.66675290108,32.54073554232;-114.66786870003,32.54377444552;-114.67233189583,32.5439915061;-114.68155869484,32.55166064303;-114.68310364723,32.54956254803;-114.68155869484,32.54666854342;-114.6781254673,32.54601737953;-114.67597970009,32.54840495738;-114.67709549904,32.55144360099;-114.68155869484,32.55166064303';
        var multipolygon2 = '121.25553061200003,28.140000892000046;121.26453571900004,28.121594912000035;121.2853524200001,28.101945631000035;121.27914472700002,28.08543528900009;121.26783287900003,28.084540106000077;121.25709069100003,28.085150458000044;121.24724368600005,28.08779531500005;121.23812910200002,28.092922268000052;121.23568769600001,28.08551666900007;121.23365319100003,28.082424221000053;121.23389733200008,28.07908763200004;121.23812910200002,28.071193752000056;121.23145592500009,28.065008856000077;121.21924889400009,28.06785716400009;121.2185124,28.05846334900008;121.20244170800004,28.05475387100006;121.186400477,28.043700183000055;121.16689887200005,28.043081974000074;121.15157280200003,28.041232470000068;121.14673393800001,28.057810957000072;121.15523523500008,28.07136814200004;121.15235145600002,28.078073949000043;121.14275149800005,28.082586981000077;121.13746178500003,28.094183661000045;121.13062584700003,28.103461005000042;121.1323291980001,28.11431429600009;121.1273592980001,28.126556316000062;121.12037194100003,28.135687567000048;121.12501061300009,28.14008209800005;121.13493899800005,28.143052476000037;121.16528325500008,28.150533523000036;121.18753112400009,28.168901841000036;121.20406983500004,28.189707446000057;121.2089755720001,28.20013198500004;121.21094811300009,28.20897044500009;121.2305876040001,28.219732518000058;121.25640250600009,28.21479830900006;121.26889341600008,28.193941892000055;121.27024056900007,28.18229047300008;121.26183975900005,28.168809099000043;121.25553061200003,28.140000892000046;122.23878014400009,30.31313711100006;122.20386803500003,30.291408596000053;122.20386803500003,30.285142320000034;122.22380618600005,30.27887604400007;122.23194420700008,30.277736721000053;122.21957441500001,30.270453192000048;122.21705162900003,30.262518622000073;122.21753991000003,30.25458405200004;122.21452884200005,30.247300523000035;122.20232181100005,30.241929429000038;122.18799889400009,30.24363841400009;122.17408287900003,30.247992255000042;122.13770592500009,30.25462474200009;122.11402428500003,30.26508209800005;122.07357832100001,30.291408596000053;122.08399498800009,30.302435614000046;122.08790123800009,30.30565013200004;122.09571373800009,30.310695705000057;122.10417728000004,30.314154364000046;122.12208092500009,30.319281317000048;122.14722741000003,30.321478583000044;122.15284264400009,30.322699286000045;122.16602623800009,30.331691799000055;122.19467207100001,30.33856842700004;122.21143639400009,30.346625067000048;122.22510826900009,30.33234284100007;122.21876061300009,30.32607656500005;122.22046959700003,30.320705471000053;122.22787519600001,30.316351630000042;122.23878014400009,30.31313711100006;122.39893639400009,30.45648834800005;122.41098066500001,30.45213450700004;122.41651451900009,30.44159577000005;122.42310631600003,30.414943752000056;122.40406334700003,30.41864655200004;122.36378014400009,30.433417059000078;122.347992384,30.435980536000045;122.30600019600001,30.423163153000075;122.28541100400003,30.42206452000005;122.27279707100001,30.435980536000045;122.27735436300009,30.436712958000044;122.28711998800009,30.442206122000073;122.27800540500004,30.445746161000045;122.273773634,30.45136139500005;122.27279707100001,30.45929596600007;122.27279707100001,30.46946849200009;122.27662194100003,30.479803778000075;122.28003991000003,30.48261139500005;122.28711998800009,30.48314036700009;122.29078209700003,30.47166575700004;122.29948978000004,30.47134023600006;122.31128991000003,30.472642320000034;122.33741295700008,30.45848216400009;122.34880618600005,30.460638739000046;122.36915123800009,30.476996161000045;122.36850019600001,30.46320221600007;122.37468509200005,30.45734284100007;122.38542728000004,30.456203518000052;122.39893639400009,30.45648834800005;121.95753014400009,29.119533596000053;121.95883222700002,29.10805898600006;121.95834394600001,29.10187409100007;121.93531334700003,29.062892971000053;121.92514082100001,29.063055731000077;121.91228274800005,29.07135651200008;121.88868248800009,29.072333075000074;121.90015709700003,29.09373607000009;121.88843834700003,29.110296942000048;121.87159264400009,29.126613674000055;121.86817467500009,29.147406317000048;121.88135826900009,29.160305080000057;121.90333092500009,29.166571356000077;121.92660566500001,29.16673411700009;121.94320722700002,29.16111888200004;121.95191491000003,29.152289130000042;121.955414259,29.143500067000048;121.95753014400009,29.119533596000053;122.14323978000004,29.73338450700004;122.17701256600003,29.69684479400007;122.18685957100001,29.67340729400007;122.16293379000001,29.65452708500004;122.16976972700002,29.675034898000035;122.16521243600005,29.673163153000075;122.14942467500009,29.668850002000056;122.14942467500009,29.68183014500005;122.13892662900003,29.67259349200009;122.13257897200003,29.668890692000048;122.12745201900009,29.66901276200008;122.12501061300009,29.67324453300006;122.12305748800009,29.686468817000048;122.12110436300009,29.69171784100007;122.11524498800009,29.698391018000052;122.10873457100001,29.704006252000056;122.10368899800005,29.71051666900007;122.10157311300009,29.71971263200004;122.09278405000009,29.725775458000044;122.07390384200005,29.724432684000078;122.05681399800005,29.71979401200008;122.053070509,29.716009833000044;122.04509524800005,29.71698639500005;122.04004967500009,29.71637604400007;122.03646894600001,29.71747467700004;122.03337649800005,29.723456122000073;122.03288821700005,29.730943101000037;122.03532962300005,29.739976304000038;122.03931725400003,29.74754466400009;122.04322350400003,29.750799872000073;122.04859459700003,29.75608958500004;122.05665123800009,29.76780833500004;122.06820722700002,29.77952708500004;122.08448326900009,29.784898179000038;122.097992384,29.786851304000038;122.10743248800009,29.789618231000077;122.11475670700008,29.78851959800005;122.12208092500009,29.77871328300006;122.12378991000003,29.77090078300006;122.12094160200002,29.75779857000009;122.12208092500009,29.750799872000073;122.12647545700008,29.745062567000048;122.14031009200005,29.73460521000004;122.14323978000004,29.73338450700004;122.39519290500004,29.883612372000073;122.39226321700005,29.87641022300005;122.38672936300009,29.87067291900007;122.38282311300009,29.86473216400009;122.38591556100005,29.85687897300005;122.39405358200008,29.84788646000004;122.39551842500009,29.842678127000056;122.39519290500004,29.833319403000075;122.38477623800009,29.835191148000035;122.37720787900003,29.83893463700008;122.36540774800005,29.849758205000057;122.35710696700005,29.861721096000053;122.35922285200002,29.86977773600006;122.36548912900003,29.876288153000075;122.36915123800009,29.883612372000073;122.36736087300005,29.89590078300006;122.36207116000003,29.90448639500005;122.353851759,29.910589911000045;122.33350670700008,29.92059967700004;122.32520592500009,29.927883205000057;122.32056725400003,29.937241929000038;122.32203209700003,29.948431708000044;122.32545006600003,29.953924872000073;122.33008873800009,29.958238023000035;122.33545983200008,29.961330471000053;122.34180748800009,29.963039455000057;122.34644616000003,29.94940827000005;122.35914147200003,29.94627513200004;122.38892662900003,29.94879791900007;122.40064537900003,29.952948309000078;122.40674889400009,29.95270416900007;122.40943444100003,29.945705471000053;122.40902754000001,29.936672268000052;122.40748131600003,29.930609442000048;122.40316816500001,29.926255601000037;122.39519290500004,29.92206452000005;122.40967858200008,29.91120026200008;122.40805097700002,29.89984772300005;122.39519290500004,29.883612372000073;121.88184655000009,30.07636139500005;121.88526451900009,30.06118398600006;121.89307701900009,30.05621979400007;121.90211022200003,30.053534247000073;121.90919030000009,30.044989325000074;121.910492384,30.02411530200004;121.90333092500009,30.001776434000078;121.88965905000009,29.98395416900007;121.87159264400009,29.976711330000057;121.86011803500003,29.97809479400007;121.84742272200003,29.982123114000046;121.83619225400003,29.988674221000053;121.82886803500003,29.99750397300005;121.82740319100003,30.00421784100007;121.82911217500009,30.009100653000075;121.83220462300005,30.013657945000034;121.83513431100005,30.01943594000005;121.83594811300009,30.02570221600007;121.83448326900009,30.03856028900009;121.83472741000003,30.044989325000074;121.83741295700008,30.055894273000035;121.84766686300009,30.083156643000052;121.85303795700008,30.087144273000035;121.86475670700008,30.085923570000034;121.87647545700008,30.08161041900007;121.88184655000009,30.07636139500005;122.32748457100001,30.02448151200008;122.32667076900009,30.01080963700008;122.32097415500004,30.005926825000074;122.31324303500003,30.00348541900007;122.306976759,29.997219143000052;122.30298912900003,29.986314195000034;122.30103600400003,29.975897528000075;122.30014082100001,29.952460028000075;122.29363040500004,29.93378327000005;122.27784264400009,29.939927476000037;122.24561608200008,29.969875393000052;122.22917728000004,29.978664455000057;122.18474368600005,29.99445221600007;122.14421634200005,30.000392971000053;122.09896894600001,30.014471747000073;122.07740319100003,30.017645575000074;122.06527754000001,30.01593659100007;122.04883873800009,30.00739166900007;122.03467858200008,30.002020575000074;122.03052819100003,29.999335028000075;122.025726759,29.997259833000044;122.01905358200008,29.997219143000052;122.01050866000003,30.00031159100007;122.00961347700002,30.004339911000045;122.01172936300009,30.00844961100006;122.01221764400009,30.011419989000046;122.01124108200008,30.01508209800005;122.01351972700002,30.025824286000045;122.01221764400009,30.03192780200004;122.00879967500009,30.03339264500005;121.99545332100001,30.03656647300005;121.99170983200008,30.03807200700004;121.97681725400003,30.053656317000048;121.97339928500003,30.05996328300006;121.97185306100005,30.067694403000075;121.97380618600005,30.07257721600007;121.97730553500003,30.077337958000044;121.98031660200002,30.08462148600006;121.980804884,30.09007396000004;121.97803795700008,30.107082424000055;121.96550540500004,30.129706122000073;121.96314537900003,30.142401434000078;121.97461998800009,30.14801666900007;122.08741295700008,30.14752838700008;122.10328209700003,30.143703518000052;122.11744225400003,30.135931708000044;122.13233483200008,30.12376536700009;122.14079837300005,30.12132396000004;122.16480553500003,30.12051015800006;122.16976972700002,30.117254950000074;122.17359459700003,30.10224030200004;122.18246504000001,30.098578192000048;122.193695509,30.09979889500005;122.20386803500003,30.099554755000042;122.22934004000001,30.091620184000078;122.23878014400009,30.08661530200004;122.24537194100003,30.080145575000074;122.24968509200005,30.073431708000044;122.25611412900003,30.068182684000078;122.26954186300009,30.066066799000055;122.28956139400009,30.067328192000048;122.29712975400003,30.062567450000074;122.30014082100001,30.04873281500005;122.30420983200008,30.04197825700004;122.32252037900003,30.03192780200004;122.32748457100001,30.02448151200008;121.07400226300001,27.479483886000082;121.08314306,27.47301855900008;121.09433796400003,27.466534876000082;121.10347872300008,27.460070019000057;121.10336493,27.451879507000058;121.09312375500008,27.45289444100007;121.07471580200001,27.456721832000085;121.06648675400004,27.454983920000075;121.06945127100005,27.44676176900009;121.07651703400006,27.438498163000077;121.06726355500007,27.43677010400006;121.05915926700004,27.444133394000062;121.05008762500006,27.456055828000046;121.04610864400001,27.465199494000046;121.05340295400003,27.47332001700005;121.07400226300001,27.479483886000082;121.18165123800009,27.86465078300006;121.18848717500009,27.863714911000045;121.18970787900003,27.855292059000078;121.18930097700002,27.84829336100006;121.18751061300009,27.84593333500004;121.18539472700002,27.843817450000074;121.18034915500004,27.842271226000037;121.17505944100003,27.843695380000042;121.17302493600005,27.841009833000044;121.17481530000009,27.825873114000046;121.17123457100001,27.818793036000045;121.16000410200002,27.818508205000057;121.14747155000009,27.824367580000057;121.13843834700003,27.82485586100006;121.13005618600005,27.82050202000005;121.11638431100005,27.81781647300005;121.097992384,27.81781647300005;121.096039259,27.827866929000038;121.11402428500003,27.844142971000053;121.13306725400003,27.84715403900009;121.14918053500003,27.845770575000074;121.15674889400009,27.848781643000052;121.15259850400003,27.852769273000035;121.15365644600001,27.85643138200004;121.15870201900009,27.85814036700009;121.16797936300009,27.85968659100007;121.18165123800009,27.86465078300006;121.04932701900009,27.950873114000046;121.04468834700003,27.951971747000073;121.04021243600005,27.957953192000048;121.04517662900003,27.96747467700004;121.064789259,27.98143138200004;121.07016035200002,27.982896226000037;121.07569420700008,27.981390692000048;121.08082116000003,27.98065827000005;121.11133873800009,27.98379140800006;121.12745201900009,27.977484442000048;121.13965905000009,27.965765692000048;121.13917076900009,27.956976630000042;121.12582441500001,27.95136139500005;121.10328209700003,27.946193752000056;121.09294681100005,27.947739976000037;121.08334394600001,27.954738674000055;121.07178795700008,27.95726146000004;121.04932701900009,27.950873114000046;121.86215254000001,29.12958405200004;121.86459394600001,29.123846747000073;121.86736087300005,29.115790106000077;121.86101321700005,29.10683828300006;121.85352623800009,29.09756094000005;121.84205162900003,29.095038153000075;121.83725019600001,29.09979889500005;121.82667076900009,29.107977606000077;121.81446373800009,29.115383205000057;121.80250084700003,29.11863841400009;121.79273522200003,29.11855703300006;121.78581790500004,29.119696356000077;121.78272545700008,29.124660549000055;121.783539259,29.132879950000074;121.78598066500001,29.143744208000044;121.78980553500003,29.14984772300005;121.79623457100001,29.14940013200004;121.84392337300005,29.141913153000075;121.85678144600001,29.13426341400009;121.86215254000001,29.12958405200004;122.30469811300009,29.81745026200008;122.31218509200005,29.79515208500004;122.31470787900003,29.783677476000037;122.30836022200003,29.776271877000056;122.29558353000004,29.779120184000078;122.27247155000009,29.792141018000052;122.26539147200003,29.798000393000052;122.25131269600001,29.80609772300005;122.23755944100003,29.82379791900007;122.23267662900003,29.827826239000046;122.23170006600003,29.83624909100007;122.24773196700005,29.846096096000053;122.27116946700005,29.846828518000052;122.28419030000009,29.84284088700008;122.31202233200008,29.829046942000048;122.31039472700002,29.824611721000053;122.30469811300009,29.81745026200008;121.97217858200008,29.94476959800005;121.98682701900009,29.92987702000005;121.99350019600001,29.918850002000056;121.99244225400003,29.908270575000074;121.97413170700008,29.89984772300005;121.94613691500001,29.903957424000055;121.93360436300009,29.92133209800005;121.94092858200008,29.93768952000005;121.95191491000003,29.948065497000073;121.95997155000009,29.953192450000074;121.96648196700005,29.951727606000077;121.97022545700008,29.94684479400007;121.97217858200008,29.94476959800005;122.34571373800009,30.241929429000038;122.32911217500009,30.239081122000073;122.31568444100003,30.240301825000074;122.30534915500004,30.24013906500005;122.29476972700002,30.236721096000053;122.28337649800005,30.235256252000056;122.27759850400003,30.235541083000044;122.27833092500009,30.240627346000053;122.287445509,30.247788804000038;122.30250084700003,30.252101955000057;122.31299889400009,30.25995514500005;122.31861412900003,30.268377997000073;122.32398522200003,30.27216217700004;122.33187910200002,30.27366771000004;122.34205162900003,30.27362702000005;122.38257897200003,30.277167059000078;122.39991295700008,30.274603583000044;122.40772545700008,30.26593659100007;122.41065514400009,30.254706122000073;122.408539259,30.243963934000078;122.39584394600001,30.239447333000044;122.38453209700003,30.250148830000057;122.38355553500003,30.261542059000078;122.38062584700003,30.263739325000074;122.37501061300009,30.262152411000045;122.35718834700003,30.247748114000046;122.34571373800009,30.241929429000038;122.52930748800009,30.720770575000074;122.52637780000009,30.714178778000075;122.53109785200002,30.704413153000075;122.52475019600001,30.70180898600006;122.49317467500009,30.703111070000034;122.48731530000009,30.70184967700004;122.47437584700003,30.70258209800005;122.46656334700003,30.69912344000005;122.46306399800005,30.69635651200008;122.46070397200003,30.69403717700004;122.45525149800005,30.69399648600006;122.44516035200002,30.69676341400009;122.431976759,30.69798411700009;122.42725670700008,30.703924872000073;122.43262780000009,30.714829820000034;122.43474368600005,30.727118231000077;122.42920983200008,30.738023179000038;122.42994225400003,30.743068752000056;122.44076582100001,30.741034247000073;122.45801842500009,30.73065827000005;122.47291100400003,30.717230536000045;122.48438561300009,30.714667059000078;122.49634850400003,30.716782945000034;122.50196373800009,30.71898021000004;122.50961347700002,30.721177476000037;122.52458743600005,30.723578192000048;122.52930748800009,30.720770575000074;121.83773847700002,31.375148830000057;121.85377037900003,31.372992255000042;121.86784915500004,31.36619700700004;121.87794030000009,31.354315497000073;121.88184655000009,31.33661530200004;121.87745201900009,31.319647528000075;121.86622155000009,31.30418528900009;121.85108483200008,31.29393138200004;121.83472741000003,31.29254791900007;121.82341556100005,31.302394924000055;121.81324303500003,31.320786851000037;121.79420006600003,31.368801174000055;121.80445397200003,31.374701239000046;121.83773847700002,31.375148830000057;121.844075352,31.60794696800008;121.91896634,31.578462856000044;121.98008567500005,31.540295811000078;121.98659839600009,31.503897262000066;121.97785060400008,31.477771002000054;121.9128896950001,31.45633220700006;121.8513735040001,31.439178905000063;121.81732579100003,31.446650375000047;121.78335209000011,31.465686100000084;121.73023522200003,31.484767971000053;121.710167576,31.495077027000036;121.68462982400001,31.506807045000073;121.61468863000005,31.52158167500005;121.57154381600003,31.529364325000074;121.54134135200002,31.55378512900006;121.51745636400005,31.56839191100005;121.48462975400003,31.579901434000078;121.40461395300008,31.61371463900008;121.37552303300004,31.634133802000065;121.34473717500009,31.64130280200004;121.31446373800009,31.655585028000075;121.30290774800005,31.67145416900007;121.28589928500003,31.704046942000048;121.22451110300005,31.737666620000084;121.20557825800006,31.756618803000038;121.18663053400007,31.77411598200007;121.1762876040001,31.784322892000034;121.181443091,31.79598035300006;121.19516035200002,31.805243231000077;121.21930074500006,31.829472772000088;121.26406453300001,31.84107679400006;121.322563521,31.82933065800006;121.36208870500002,31.817608154000084;121.3861331710001,31.811735768000062;121.4238850380001,31.795639063000067;121.47530402100006,31.770769919000088;121.50096557900008,31.750328782000054;121.5351758160001,31.728409827000064;121.57109123000009,31.713752432000035;121.60524304800003,31.691824392000058;121.62570177100008,31.675756153000066;121.64105310100001,31.66552035400008;121.6632225950001,31.652351670000087;121.72122670200008,31.63031279100005;121.844075352,31.60794696800008;121.76238040500004,31.37376536700009;121.77418053500003,31.359198309000078;121.78223717500009,31.341782945000034;121.78003991000003,31.32518138200004;121.76636803500003,31.32062409100007;121.75163821700005,31.330511786000045;121.72046959700003,31.35773346600007;121.59880618600005,31.42914459800005;121.58448326900009,31.441392320000034;121.59115644600001,31.445868231000077;121.60254967500009,31.444240627000056;121.61817467500009,31.443793036000045;121.69125410200002,31.419175523000035;121.72559655000009,31.402736721000053;121.74594160200002,31.388495184000078;121.76238040500004,31.37376536700009'
        describe("validatePoly", function(){
            it('returns null if an empty string', function() {
                expect(server.validatePoly('')).to.equal(null);
            })
            it('ignores any command injection attempts', function() {
                expect(server.validatePoly(
                    '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545;rm *'
                )).to.eql(null)
            })
            it('returns null if any of the coordinates are outside the valid bounds', function() {
                expect(server.validatePoly(
                    '-702.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-702.471,18.545'
                )).to.equal(null);
            })
            it('returns null if coordinates are a line', function(){
                expect(server.validatePoly(
                    '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.546'
                )).to.equal(null);
            })
            it('returns null if polygon is self intersecting', function() {
                expect(server.validatePoly(
                    '-92.20550811768,34.9760037637;'  +
                    '-92.20825469971,34.78222986237;' +
                    '-91.82647979736,34.87016067944;' +
                    '-92.42523468018,34.87241408106;' +
                    '-92.20550811768,34.9760037637'
                )).to.equal(null);
            })
            it('return input string if a valid polygon', function() {
                expect(server.validatePoly(poly)).to.equal(poly);
            })
            it('returns input string if a valid array of polygons', function() {
                expect(server.validatePoly(multipolygon)).to.equal(multipolygon);
                expect(server.validatePoly(multipolygon2)).to.equal(multipolygon2);
            });
        })
        describe("polyToBbox", function(){
            it('extracts a bounding box from polygon', function() {
                expect(server.polyToBbox(poly)).to.eql('-72.471,18.545,-72.4705,18.548');
            })
            it('extracts a bounding box from a multipolygon', function() {
                expect(server.polyToBbox(multipolygon))
                    .to.equal('-114.68310364723,32.52517764144,-114.65147503853,32.55166064303');
            });
        })
        describe("polyQuotes", function(){
            it('makes sure poly strings for crop command have needed quotes', function() {
                expect(server.polyQuotes(
                    '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545'
                )).to.equal(
                    '"-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545"'
                );
                expect(server.polyQuotes(
                    '"-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545"'
                )).to.equal(
                    '"-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545"'
                )
            })
        })
        describe("isMutlipolygon", function() {
            it('returns false if an empty string', function() {
                expect(server.isMultipolygon('')).to.equal(false);
            })
            it('ignores any command injection attempts', function() {
                expect(server.isMultipolygon(
                    '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.545;rm *'
                )).to.eql(false)
            })
            it('returns false if any of the coordinates are outside the valid bounds', function() {
                expect(server.isMultipolygon(
                    '-702.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-702.471,18.545'
                )).to.equal(false);
            })
            it('returns false if coordinates are a line', function(){
                expect(server.isMultipolygon(
                    '-72.471,18.545;-72.471,18.548;-72.4705,18.548;-72.4705,18.545;-72.471,18.546'
                )).to.equal(false);
            })
            it('returns false if polygon is self intersecting', function() {
                expect(server.isMultipolygon(
                    '-92.20550811768,34.9760037637;'  +
                    '-92.20825469971,34.78222986237;' +
                    '-91.82647979736,34.87016067944;' +
                    '-92.42523468018,34.87241408106;' +
                    '-92.20550811768,34.9760037637'
                )).to.equal(false);
            })
            it('returns false if provided a polygon', function() {
                expect(server.isMultipolygon(poly)).to.equal(false);
            });
            it('returns true if provided a multipolygon', function() {
                expect(server.isMultipolygon(multipolygon)).to.equal(true);
            })
        })
    })
    describe("Override Configs", function() {
      it("Override config gets included if specified for a data source", function(){
        var apiParams = {
          datasource: 'API',
          schema: 'TDSv70',
          format: 'json'
        }
        var command = server.buildCommand(apiParams, false, '38.4902,35.7982,38.6193,35.8536', null, false, 'in', 'out_dir', 'out');
        expect(command.indexOf('-C test.conf') !== -1).to.equal(true)
      });
    })
});
