[[conflate]]
== conflate

=== Description

The +conflate+ command conflates two maps into a single map.  If the specified output file name ends with the extension .osc, an OSM
changeset will be written, instead of an OSM map.

* +input1+            - First input; may be any supported input format (e.g. OSM file).
* +input2+            - Second input; may be any supported input format (e.g. OSM file).
* +output+            - The output path; may be any supported output format or a changeset format if the +--differential+ option is specified 
                        (.osc, .osc.sql)
* +osmApiDatabaseUrl+ - Target OSM API database the derived changeset is to be applied, used to maintain element ID continuity. Required only 
                        if the +--differential+ option is specified and the changeset output format is .osc.sql.
* +--differential+    - Calculates the the differential between two conflation inputs.  The output will be all elements in input2 that do
                        not conflict with any elements in input1.
* +--include-tags+    - Include a check for modified tags when doing differential conflation.  The output will include unmodified geometries
                        from Input1, with new/updated tags from Input2 applied, using an overwrite-merge.
* +--stats+           - Hootenanny map statistics such as node and way count; must be the last option entered and may be optionally followed
                        by an output JSON file name
* +--write-bounds+    - If the `convert.bounding.box` configuration option is specified, optionally outputs a file containing the input bounds.
                        The location of the file is controlled via the `bounds.output.file` configuration option.

=== Feature Filtering

A subset of input features may be conflated by specifying the 'conflate.tag.filter' configuration option.  The option allows for JSON
feature tag filtering by specifying either inline JSON or the path to a JSON file.  For more information, see the "Feature Filtering"
section of the Hootenanny User Guide.

=== Usage

--------------------------------------
conflate (input1) (input2) (output) [--differential] [--include-tags] [--stats filename]
--------------------------------------

==== Examples

--------------------------------------
hoot conflate input1.osm input2.osm output.osm --stats

hoot conflate input1.osm input2.osm output.osm --stats stats-output

hoot conflate input1.osm input2.osm output.osm --differential

hoot conflate input1.osm input2.osm output.osc --differential

hoot conflate input1.osm input2.osm output.osc --differential --stats

hoot conflate input1.osm input2.osm output.osc.sql osmapidb://username:password@localhost:5432/osmApiDatabaseName --differential

# Conflate only restaurants (see the User Guide for more filter examples)
hoot conflate -D conflate.tag.filter="{ \"must\": [ { \"tag\": \"amenity=restaurant\" } ] }" input1.osm input2.osm output.osm

# Conflate specifying a JSON feature filter as a file (see the User Guide for more filter examples)
hoot conflate -D conflate.tag.filter=myFilter.json input1.osm input2.osm output.osm

# Conflate, adding geometry data from the second map to output that does not conflict
# with data in the first map (tags may be overwritten)
hoot conflate --differential --include-tags input1.osm input2.osm output.osm

# Conflate only buildings
hoot conflate -D match.creators="hoot::BuildingMatchCreator" \
  -D merger.creators="hoot::BuildingMergerCreator" input1.osm input2.osm output.osm

# Filter maps down to POIs only before conflating them
hoot conflate -D conflate.pre.ops="hoot::RemoveElementsVisitor" \
  -D remove.elements.visitor.element.criteria="hoot::PoiCriterion" input1.osm input2.osm \
  output.osm

# Translate features to a schema before conflating them
hoot conflate -D conflate.pre.ops="hoot::SchemaTranslationVisitor" \
  -D schema.translation.script=myTranslation.js input1.osm input2.osm output.osm

# Align a second map towards a first map before conflating them
hoot conflate -D conflate.pre.ops="hoot::RubberSheet" -D rubber.sheet.ref=true input1.osm \
  input2.osm output.osm

# Assuming a first map is superior to a second, cut out the shape of the first map out from
# the area being conflated so that only data from the second map is stitched in around the
# first map
hoot conflate -D unify.pre.ops=hoot::CookieCutterOp -D cookie.cutter.alpha=2500 \
  -D cookie.cutter.alpha.shape.buffer=0 -D cookie.cutter.output.crop=false \
  input1.osm input2.osm output.osm
--------------------------------------

=== See Also

* _Unifying Conflation_, <<hootalgo,Hootenanny - Algorithms>>
* _Differential Conflation_, <<hootalgo,Hootenanny - Algorithms>>
* _Attribute Conflation_, <<hootalgo,Hootenanny - Algorithms>>
* _Horizontal Conflation_, <<hootalgo,Hootenanny - Algorithms>>
* https://github.com/ngageoint/hootenanny/blob/master/docs/user/SupportedDataFormats.asciidoc#applying-changes-1[Supported Input Formats]

