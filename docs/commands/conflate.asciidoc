[[conflate]]
== conflate

=== Description

The `conflate` command conflates two maps into a single map.

* `input1`              - The first input; may be any supported input format (e.g. osm file). If running the Reference 
                          Conflation workflow, this is treated as reference data.
* `input2`              - The second input; may be any supported input format (e.g. osm file).
* `output`              - Output; may be any supported map output format (e.g. osm file) or any supported changeset 
                          format (e.g. .osc or .osc.sql file) if the `--differential` option is specified. 
* `--changeset-stats`   - Displays changeset statistics and may be optionally followed by an output JSON file to be 
                          written to. Valid only if the `--differential` option is specified and the output format is 
                          changeset XML (.osc). If the `--include-tags`` option is specified, tag changeset statistics are 
                          also output.
* `--differential`      - Calculates the the differential between two conflation inputs. The output will be all elements 
                          in input2 that do not exist in input1.
* `--include-tags`      - Includes a check for modified tags when using the `--differential` option. The output will 
                          include unmodified geometries from input1 with new/updated tags from input2. Valid only when the 
                          `--differential` option is used.
* `--osmApiDatabaseUrl` - Target OSM API database the derived changeset is to be applied, used to maintain element 
                          ID continuity. Required only if the changeset output format is SQL (.osc.sql).
* `--separate-output`   - Writes separate output files for geometry and tag changes. Valid only when the `--differential`
                          and `--include-tags`` options are used.
* `--stats`             - Displays map statistics and may be optionally followed by an output JSON file name to be written to. 
* `--write-bounds`      - If the `bounds` configuration option is specified, optionally outputs a file containing the 
                          input bounds. The location of the file is controlled via the `bounds.output.file` 
                          configuration option.

=== Usage

--------------------------------------
hoot conflate [-C workflowConfigFile] [-C algorithmConfigFile] (input1) (input2) (output) \
  [--changeset-stats geometry-stats-filename tags-stats-filename] [--differential] [--include-tags] \
  [--osmApiDatabaseUrl url] [--separate-output] [--stats filename] 
--------------------------------------

https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#conflation[Examples]

=== Configuration

Default configuration files custom tailored to certain conflation workflows are available in the 
`conf/core` directory:
* `AttributeConflation.conf` - Configures the Attribute Conflation Workflow where attributes are 
passed from input2 features to input1 features.
* `AverageConflation.conf` - Configures the Average Conflation Workflow where geometries are 
averaged together during merging (currently applies to linear features only).
* `DifferentialConflation.conf` - Configures the Differential Conflation Workflow where the 
conflated output consists of features or tags from input2 not found in input1. 
* `ReferenceConflation.conf` - Default configuration where input2 features are merged into input1 
features giving preference to input1 features. If no workflow configuration file is specified, 
conflation is configured for the Reference Conflation Workflow.

When performing road conflation, the road conflation algorithm used can be switched by specifying 
either of the following configuration files (the Network algorithm currently only operates on roads):
* `NetworkAlgorithm.conf`  - Uses a graph matching approach to match networks of features together.
* `UnifyingAlgorithm.conf` - Uses a machine learning based approach to match features together.

You can create your own configuration files to support new conflation workflows.

=== Feature Tag Filtering

A subset of input features may be conflated by specifying the 'conflate.tag.filter' configuration 
option. The option allows for JSON feature tag filtering by specifying either inline JSON or the 
path to a JSON file.  For more information, see the "Feature Filtering" section of the Hootenanny 
User Guide.

=== Filtering Features Geographically

If the configuration option, `bounds`, is set to a valid geographic bounds (see the configuration 
option documentation for formats), conflation will conflate data only from within the specified 
bounds. The `bounds.*` configuration options allow for further customization of the bounds 
requirement. If you are generating a changeset with data generated by the `conflate` command that 
used the `bounds` option, it is possible you will want to use the `bounds` option when making the 
call to the `changeset-derive` command as well.

=== See Also

* _Unifying Conflation_, <<hootuser,Hootenanny - User Guide>>
* _Differential Conflation_, <<hootuser,Hootenanny - User Guide>>
* _Attribute Conflation_, <<hootuser,Hootenanny - User Guide>>
* _Horizontal Conflation_, <<hootuser,Hootenanny - User Guide>>
* https://github.com/ngageoint/hootenanny/blob/master/docs/user/SupportedDataFormats.asciidoc#applying-changes-1[Supported Input Formats]

