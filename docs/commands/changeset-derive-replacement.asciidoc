[[changeset-derive-replacement]]
== changeset-derive-replacement

=== Description

The +changeset-derive-replacement+ command creates an OSM changeset file that represents the difference between two OSM datasets within a 
specified bounds, where the data from the second specified input dataset (secondary layer) replaces data in the first specified dataset 
(reference layer). 

Additional filtering may be applied to the secondary input to control which types of features from it are used for replacement. Likewise, 
additional filtering may be applied to the reference input to prevent certain types of features from being replaced.
 
The feature replacement algorithm used by this command allows for avoiding unnecessary clipping of features when such modification are 
undesirable and also stitching up seams in the data when features must be clipped. The output changeset file can be applied directly to an 
OSM API database via SQL or via the Rails Port API with the +changeset-apply+ command. 

Generally, the reference data is sourced from an authoritative data store, such as an OSM API database, and the secondary data is source from
some non-authoritative data store containing superior data for enrichment. Element IDs in the reference dataset are retained, while element 
IDs in the secondary data are not retained and those elements treated as completely new data in relation to the reference data store. 

* +input1+                       - Map input with features to replace; may be any supported input format that also supports bounded reading 
                                   (e.g. OSM file). See the "Input Data and "Bounds Handling" sections for more detail.
* +input2+                       - Map input with the features to be used for replacement; may be any supported input format that also supports 
                                   bounded reading (e.g. OSM file); leave empty to cut data out of input1 while adding no replacement data. 
                                   See the "Input Data and "Bounds Handling" sections for more detail.
* +bounds+                       - Boundary over which to do the feature replacement of the form: minx,miny,maxx,maxy; 
                                   e.g. "-71.4698,42.4866,-71.4657,42.4902" See the ""Bounds Handling" section for more detail.
* +output+                       - Changeset output location; must be a changeset .osc or .osc.sql file.
* +osmApiDatabaseUrl+            - Target OSM API database where the derived changeset is to be applied, used to maintain element ID continuity. 
                                   Required only if the changeset output format is .osc.sql. 
* +--geometry-filters+           - Optional criteria used to control the geometry type of the features that are replaced. When this option is
                                   omitted, features of all geometry types are replaced by features of a like geometry type. See the 
                                   "Geometry Filtering" section for more detail.
* +--replacement-filters+        - Optional filtering criteria beyond what is specified in +--geometry-filters+ for determining which features 
                                   are used for replacement. See the "Replacement Filtering" section for more detail.
* +--chain-replacement-filters+  - Determines how the criteria specified in +--replacement-filters+ are logically applied. See the 
                                   "Replacement Filtering" section for more detail.
* +--replacement-filter-options+ - Optional configuration options for the filters specified in +--replacement-filters+. See the 
                                   "Replacement Filtering" section for more detail.
* +--retainment-filters+         - Optional filtering criteria beyond what is specified in +--geometry-filters+ for determining which features 
                                   are exempt from replacement. See the "Retainment Filtering" section for more detail.
* +--chain-retainment-filters+   - Determines how the criteria specified in +--retainment-filters+ are logically applied. See the 
                                   "Retainment Filtering" section for more detail.
* +--retainment-filter-options+  - Optional configuration options for the filters specified in +--retainment-filters+. See the 
                                   "Retainment Filtering" section for more detail.
* +--stats+                      - Displays changeset statistics and may be optionally followed by an output JSON file name to write the 
                                   statistics to.
* +--write-bounds+               - If the +convert.bounding.box+ configuration option is specified, outputs a file containing the specified 
                                   input bounds. The location of the file is controlled via the +bounds.output.file+ configuration option.

=== Usage

--------------------------------------
changeset-derive-replacement (input1) (input2) (bounds) (output) [osmApiDatabaseUrl] [--geometry-filters] [--replacement-filters] [--chain-replacement-filters] [--replacement-filter-options] [--stats filename] [--write-bounds]
--------------------------------------

=== Examples

* https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes[Basic]
* https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes-1[Advanced]

=== Workflow

The high level workflow for the command looks like the following:

* Load the input 1 reference map (data you are replacing) at the specified bounds
* Filter the reference map based on geometry and/or other filters (optional)
* Load the input 2 secondary map (data you are using as replacement) at the specified bounds
* Filter the secondary map based on geometry and/or other filters (optional)
* Cut data out of the reference map for each feature geometry type being replaced. If performing full replacement, the shape cut out covers the 
  entire specified bounds. If performing overlapping only replacement, the shape cut out is the shape of the secondary data used for replacement.
* Combine the cut out reference data back with the replacement data from the secondary map
* Snap replacement linear features that are disconnected at the specified bounds seam back to the reference data
* Derive a difference changeset between the new map with replacement data added and the original reference map with removed data

=== Input Data

All inputs must support bounded reading. To list the Hootenanny input formats that support bounded reading:
-----
hoot info --formats --input-bounded
-----

Unless the reference data is being read from a direct connection to an OSM API database (osmapidb://), reference input datasets containing 
linear data should be slightly larger than the replacement bounds, so as not to drop connected linear out of bounds features in the 
changeset output. Reference inputs from a direction connection to an OSM API database automatically pull connected linear features outside 
of the specified bounds. The XML and JSON formats will pull in connected linear features outside of the specified bounds, but can only do 
so if they are already present in the reference file input data.

GeoJSON output from the Overpass API is not supported as an input to this command, since it does not contain way nodes.

=== Bounds Handling

The handling of the specified replacement bounds is done in a lenient fashion. This makes replacement of gridded task cells possible without
corrupting reference data. The behavior affects the different feature geometry types thusly:

* Point features: N/A as boundary relationships are only handled in a strict fashion.
* Linear features either inside or overlapping the specified bounds are completely replaced.
* Polygon features either inside or overlapping the specified bounds are completely replaced. Polygon features are never split but may be 
  conflated at the specified boundary if conflation is enabled.

==== Out of Bounds Connected Ways

When performing replacement, a method is required to protect the reference linear features that fall outside of the replacement bounds from
deletion in the output changeset. The method to protect the ways is to tag them with the tag, hoot:change:exclude:delete=yes. This can either 
be done automatically by Hootenanny as part of this command's execution or can be done before the call to this command. 

Hootenanny will automatically add the +hoot:change:exclude:delete=yes+ tag to such reference ways for XML, JSON, OSM API database, and 
Hootenanny API database inputs only. To do so the reference input must be sufficiently larger than the replacement bounds. If this option is 
specified, Hootenanny will not automatically tag such ways, and the caller of this command is responsible for tagging such reference ways with 
the hoot:change:exclude:delete=yes+ tag. 

=== Filtering

==== Geometry Filtering

The +--geometry-filters+ option controls replacement feature filtering by geometry type and can be used to determine both the geometry type 
of the features that are replaced in the reference dataset and those that are used as replacement from the secondary dataset. The criteria 
specified must be one or more Hootenanny geometry type criterion derived class names (e.g. "hoot::BuildingCriterion" or 
"hoot::PointCriteron"). A feature may pass the geometry filter by satisfying any one criterion in a list of specified criteria. See the 
https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes[examples]. If no geometry filter 
is specified, features of all geometry types within the bounds will be replaced.

To see a list of valid geometry type criteria for use in a geometry type filter:
-----
hoot info --geometry-type-criteria
-----

==== Replacement Filtering

The +--replacement-filters+ option allows for further restricting the features from the secondary dataset added to the output beyond 
geometry type filtering. One or more Hooteannny criterion class names can be used, and none of the criteria specified may be geometry type 
criteria (use +--geometry-filters+ for that purpose instead). See the 
https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes[examples].

To see a list of available filtering criteria:
-----
hoot info --filters
----- 

The behavior of +--replacement-filters+ is further configurable by the +--chain-replacement-filters+ option. If that option is specified, a 
secondary feature must pass all criteria specified in +--replacement-filters+ in order to be included in the changeset output. If that option 
is omitted, a secondary feature must pass only one criterion specified in +--replacement-filters+ in order to be included in the changeset 
output.

Hootenanny configuration options may be passed in separately to the criteria specified in +--replacement-filters+ via the 
+--replacement-filter-options+ parameter. That option's value takes the form 
"<option name 1>=<option value 1>;<option name 2>=<option value 2>...". See the 
https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes[examples].

==== Retainment Filtering

The +--retainment-filters+ option allows for further restricting the features from the reference dataset that are replaced in the 
output beyond geometry type filtering. One or more Hooteannny criterion class names can be used, and none of the criteria specified may be 
geometry type criteria (use +--geometry-filters+ for that purpose instead). See the 
https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#applying-changes[examples] and the 
"Replacement Filtering" section for detail on how to list available filters.

+--retainment-filters+ has a chaining option, +--chain-retainment-filters+, that behaves in the same way for retainment as replacement filter
chaining behaves. Configuration options may also be passed in to retainment filtering, using +--replacement-filter-options+, in a 
similar fashion to how they are passed in during replacement filtering.

=== Unconnected Way Snapping

Unconnected way snapping is used to repair cut ways at the replacement boundary seams . The input data must be of a slightly larger area 
than the replacement AOI in order for there to be any ways to snap back to. This is primarily useful with roads but can be made to work with 
any linear data.

Alternatively, marking snappable ways as needing review instead of snapping them can be performed to provide more control over the changeset 
output. See the "Snap Unconnected Ways" section of the User Documentation for more detail.

=== Missing Elements

Changeset replacement derivation will not remove any references to missing children elements passed in the input data. If any ways with 
references to missing way nodes or relations with references to missing elements are found in the inputs to changeset replacement derivation, 
they will be tagged with the custom tag, "hoot::missing_child=yes" (configurable; turn off tagging with the +changeset.replacement.mark.elements.with.missing.children+ configuration option). This is due to the fact that changeset replacement derivation may inadvertantly introduce 
duplicate/unwanted child elements into these features since it is not aware of the existence of the missing children. This tag should be 
searched for after the resulting changeset has been applied and features having it should be manually cleaned up, if necessary.

If you are using this command with file based data sources and in conjunction with other hoot commands (`convert`, etc), you need to use the
following configuration options to properly manage references to missing child elements (`changeset-derive-replacment` sets these options 
automatically internally for itself):

* +convert.bounding.box.remove.missing.elements+=false
* +map.reader.add.child.refs.when.missing+=true
* +log.warnings.for.missing.elements+=false

=== See Also

* `changeset-derive` command
* `changeset.*` configuration options
* `cookie.cutter.alpha.*` configuration options
* "Snap Unconnected Ways" section of the User Documentation
* `snap.unconnected.ways.*` configuration options
* "Supported Input Formats":https://github.com/ngageoint/hootenanny/blob/master/docs/user/SupportedDataFormats.asciidoc
