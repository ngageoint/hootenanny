[[convert]]
== convert

=== Description

The +convert+ command converts map data from one format to another.  Optionally, data may be schema translated during 
the conversion.  The process may be memory bound depending upon the input or output formats selected.

* +input(s)+       - Input(s); may be any supported input format (e.g. .osm file). Path wildcards may be used for inputs 
                     within the same directory. For OGR inputs, layer filtering may be performed (see syntax in Usage section).
* +output+         - Output; may be any supported output format (e.g. .osm file).
* +--recursive+    - Allows for processing inputs recursively in a directory structure. This must be followed by either "*" 
                     to denote no filtering or one or more wildcard name filters. e.g. "*.osm;*.json" or "*myFile*". 
                     This parameter is not compatible with the OGR layer syntax.
* +--write-bounds+ - If the `bounds` configuration option is specified, optionally outputs a file containing the input bounds.
                     The location of the file is controlled via the `bounds.output.file` configuration option.

=== Usage

--------------------------------------
hoot convert (input) [input2...] (output) [--recursive "*"|"filter1;filter2..."] [--write-bounds]

# This syntax is supported for OGR inputs only.
hoot convert (input1[;layer]) [input2[;layer]] (output) [--write-bounds]
--------------------------------------

https://github.com/ngageoint/hootenanny/blob/master/docs/user/CommandLineExamples.asciidoc#conversion[Examples]

=== Translating Features

The configuration option, `schema.translation.script`, may be used to schema translate feature during the conversion process.

=== Conversion Operations

The `convert.ops` configuration option can be used to apply map operations to data during conversion. Information about the
available conversion operations may be found with:

-----
hoot info --operators
-----

=== Filtering Features Geographically

If the configuration option, `bounds`, is set to a valid geographic bounds (see the configuration option documentation 
for formats), supporting readers will read data only from within the specified bounds. The `bounds.*` configuration options 
allow for further customization of the bounds requirement.

=== Shape Files

* The conversion from OSM file to shape file is a lossy process that generates a point, line and polygon shapefile. The 
OSM XML format is a richer format than Shapefile and supports such things as multiple geometry types within one file, 
inherit topology and arbitrary tagging. For these reasons the conversion to Shapefile is a lossy conversion.
* Column filtering for shape files is supported with the `shape.file.writer.cols` configuration option.

=== See Also

* https://github.com/ngageoint/hootenanny/blob/master/docs/user/SupportedDataFormats.asciidoc[Supported Input Formats]
* `bounds.*` configuration options
