
[[HootJavaScriptOverview]]
== JavaScript Overview

The Hootenanny <<JS,JavaScript>> Interfaces provide ways to both call Hootenanny       
programmatically using <<Node.js,Node.js>> and also embed routines within Hootenanny to     
change the way that Hootenanny conflates data. This documentation both explains 
how to use JavaScript in both ways as well as provides reference documentation  
for some of the commonly used JavaScript interfaces.                            

At this point there are two different implementations of JavaScript within Hootenanny. The older interface uses QtScript for the implementation within the translation scripts. There are plans to replace the QtScript interface with the newer V8 implementation (used by node.js and described below). Until that happens the JavaScript functions described below are not accessible to translation files.

=== Using Hootenanny from Node.js

Hoot creates a file called +HootJs.node+ that can be used as part of a node.js
require statement to include Hootenanny functionality. This file is place in
the +lib+ directory in +$HOOT_HOME+. 

==== Simple Example

For this script to work you must have the +HOOT_HOME+ environment variable set
properly.

----
var HOOT_HOME = process.env.HOOT_HOME                                           
var hoot = require(HOOT_HOME + '/lib/HootJs');                                  
                                                                                
// print hello world to show we can talk to hoot                                        
console.log(hoot.hello());                                                      
----

To run the example above save a file called MyExample.js and call:

----
node MyExample.js
----

==== Conflate Example

The following example loads data from the test-files directory, conflates it
and writes the result out to ../tmp/Conflated.osm. The associated file can
be found in +$HOOT_HOME/scripts/ConflateExample.js+.

----
/**                                                                             
 * This is a small example that loads, cleans and conflates two files. There    
 * is also a little bonus ways splitting on just one of the input files.        
 *                                                                              
 * This doesn't address a specific use case, but demonstrates some of the       
 * functionality exposed to node.js via hootenanny.                             
 */                                                                             
var HOOT_HOME = process.env.HOOT_HOME                                           
var hoot = require(HOOT_HOME + '/lib/HootJs');                                  
                                                                                
// print hello world to gain confidence                                         
console.log(hoot.hello());                                                      
                                                                                                                          
                                                                                
// create a new map and populate it with two input files                        
var map = new hoot.OsmMap();                                                    
hoot.loadMap(map, "test-files/ToyTestA.osm", false, 1);                         
                                                                                
// clean the data                                                               
new hoot.MapCleaner().apply(map);                                               
                                                                                
// artificially make the ways short in the first input                          
new hoot.WaySplitterOp({'way.splitter.max.length' : 20}).apply(map);            
                                                                                
// load the second input, its ways aren't shortened.                            
hoot.loadMap(map, "test-files/ToyTestB.osm", false, 2);                         
                                                                                
// conflate                                                                     
new hoot.UnifyingConflator().apply(map)                                         
                                                                                
// write the map once w/ debug info                                             
hoot.set({'writer.include.debug': true});                                       
hoot.saveMap(map, "../tmp/ConflatedDebug.osm");                                 
                                                                                
// write the map a second time without debug info                               
hoot.set({'writer.include.debug': false});                                      
hoot.saveMap(map, "../tmp/Conflated.osm");                   
----

To run the example above use:

----
cd $HOOT_HOME/scripts
mkdir -p ../tmp
node ConflateExample.js
----

=== Modifying Hootenanny with Javascript

node.js does not provide a convenient way to access it from the command line. To work
around this issue Hootenanny uses the V8 engine (same as Google Chrome) to
call Javascript methods. This gives you all the power of Javascript, but you
do not have access to some of the node.js specific methods such as +console+ and
+require+.

At this point Hootenanny provides the ability to extend the matching and
merging operations through Javascript.

==== Extending Conflation

In +$HOOT_HOME/rules+ there is an example Javascript file for conflating 
buildings. The specifics of the API are discussed in _Javascript Conflation
Reference_ section. These rules are loaded at runtime by Hootenanny if they
are enabled through the following defines:

* +match.creators+ - List of classes and appropriate parameters to enable
  specific match creators.
* +merger.creators+ - List of classes and appropriate parameters to enable
  specific merger creators.

A match and merger are generally paired together and by enabling or disabling
specific creators you can dramatically change the way the system works. In our
simple examples we'll simply set the creators to only use our example +.js+
files, but you could just as easily enable additional creators.

To use the +PolygonBuilding.js+ example found in +$HOOT_HOME/rules+ we enable
the appropriate creators with the following commands:

----
cd $HOOT_HOME
mkdir -p tmp
hoot conflate -D match.creators=hoot::ScriptMatchCreator,PolygonBuilding.js -D merger.creators=hoot::ScriptMergerCreator test-files/conflate/unified/AllDataTypesA.osm test-files/conflate/unified/AllDataTypesB.osm tmp/Conflated.osm
----

After the conflation run completes you can see the conflated buildings towards
the top of the file (in the southern Denver region).

==== Conflating Sets
////
// NOTE: Needs to be flushed out.
////
If `isWholeGroup` returns true, then you can simply implement `mergePairs` - 
this gives a fair amount of flexibility, but will only handle simple 1:1 merge
situations. Complex situations like 1:n, m:1, m:n will be marked as needing
review. You could implement 

If `isWholeGroup` returns false, then you must implement `mergeSets` or risk
getting an error. This can handle complex merge situations, but generally uses
pre-canned merge strategies to keep the JavaScript complexity down.

=== Calculating Search Radius

There are several ways to calculate the search radius in a JavaScript
extension. This section discusses these approaches and gives a couple
of examples. The search radius only applies to determining candidate
points and will not be exact. Typically the minimum bounding rectangle
is used to determine candidates so you may get more candidates than
expected. If you would like to filter candidates it is recommended that you
further filter each candidate based on distance in the matchScore method.

==== Default Search Radius

By default if no parameters are specified the circular error of the
points in question are used to determine if two features are a candidate for
matching. As a reminder, the circular error (CE) is stored in the
+error:circular+ tag on all features. This values is stored as the CE95 in
meters. In other words, the 95% of the well defined points fall within this
distance of the actual location.

By default all features where the distance between the feature pair is less
than or equal to the sum of the CEs is considered a candidate for match. See
the diagram below for an example. In this case _A_/_C_ are candidates for
match, but _A_/_B_ and _B_/_C_ are not.

[[DefaultSearchRadiusExample]]
.Default Search Radius Example - The blue lines represent the bounds of the CE after buffering the feature.
image::user/images/DefaultSearchRadiusExample.jpg[]

==== Candidate Sigma Distance

The +candidateDistanceSigma+ parameter provides the ability to modify the
candidate threshold using CE. The +candidateDistanceSigma+ value is simply
multiplied against the CE before determining the search radius. So a larger
value creates more candidates and a smaller value creates fewer candidates.
By default the value is 1.0 which has no effect.

The diagram below shows both the CE buffer and the buffer after multiplying
CE by an example +candidateDistanceSigma+ of 2.0. In this case _A_/_C_ and
_B_/_C_ are candidates for matching. However, _A_/_B_ is still not a
candidate for matching as the red circles do not overlap.

[[CandidateSigmaDistanceExample]]
.Candidate Sigma Distance Example - The blue lines represent the bounds of the CE after buffering the feature. The red lines represent buffering the feature by CE * +candidateDistanceSigma+ where in this case +candidateDistanceSigma+ is set to 2.0.
image::user/images/CandidateDistanceSigmaExample.jpg[]

==== Overriding the Circular Error

It is also possible to override using the CE in calculating the search radius
with either a global value, or by specifying a function that determines an
appropriate search radius on a per feature basis. These two approaches are
described below.

Sometimes it is desirable to override the CE value with a global search radius.
This sometimes happens when the CE values are known to be unreliable or the
feature represented is large enough to make the CE values irrelevant.
This is done by setting the +searchRadius+ parameter to a value greater than
or equal to zero. If this is done then all +circular:error+ values are ignored
and the +searchRadius+ * +candidateDistanceSigma+ is used instead. The example
below shows how overriding the +searchRadius+ value impacts the match
candidates. In this case all three features are match candidates with each other.

[[SearchRadiusExample]]
.Search Radius Example - The blue lines represent the bounds of the CE after buffering the feature. The green lines represent buffering the feature by +searchRadius+ * +candidateDistanceSigma+.
image::user/images/SearchRadiusExample.jpg[]

To provide full control over the search radius value you can also override the
search radius entirely by creating a +getSearchRadius+ method. This method
may use any operation you choose to derive an appropriate search radius. For
example in some of the POI matching routines cities have a large search radius
and restaurants have a very small search radius. In the example below _B_/_C_
is the only match candidate.

[[GetSearchRadiusExample]]
.Get Search Radius Example - The blue lines represent the bounds of the CE after buffering the feature. The orange lines represent buffering the feature by a custom value per feature. The definition of the custom value is set by the user in the +getSearchRadius+ method and multiplied by the +candidateDistanceSigma+. In this case the values are arbitrary.
image::user/images/GetSearchRadiusExample.jpg[]

==== Search Radius Review

* You may get more features than your search radius strictly defines. It is up
  to the matchScore method to further limit the candidates.
* By default the CE of each feature is used to determine the search radius of
  the feature. If the buffer of the features using their respective CEs overlap
  then the features are considered candidates.
* The search radius can be tuned by specifying the +candidateSigmaDistance+
  value. Values larger than 1 increase the search radius and smaller than 1
  decrease the search radius.
* Using the CE of features can be overriden by specifying a default search
  radius with the +searchRadius+ value.
* Search radius values can be fined tuned by defining a custom
  +getSearchRadius+ method.

