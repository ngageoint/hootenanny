
[[PoiToPolygonConflationAlgs]]
=== POI to Polygon Conflation

The goal for the initial conflation of POI's to polygons was that the number of correctly conflated 
features plus the number of features marked for manual review would equal at least 80% of the 
overall conflated features in each test dataset, with the plans of improving that correctness score 
as high as 90-95% in the future.

==== Feature Definitions

POI to polygon conflation defines the following feature types:

* Hootenanny defines a POI (Point of Interest) as any point feature with either a populated name tag 
or any other tag which causes it to be classifed as a POI or a building by the Hootenanny schema 
definitions.
* Hootenanny defines a polygon as any polygon feature that is either an area or a building and has 
either a populated name tag or any other tag which causes it to be classified as a POI or a building 
by the Hootenanny schema definitions.

==== Matching

POI to Polygon conflation in Hootenanny is an additive, rule based conflation which follows these rules:

* First, find all candidate POI / polygon pairs:
** A candidate is any POI that meets the feature definition requirements and is within the combined 
circular error of a polygon plus a user definable review distance (see below for the combined 
circular error calculation).
** For certain feature types, Hootenanny defines a hardcoded custom review distance based on the 
type. See `PoiPolygonDistance::getReviewDistanceForType`.
* **Match the two features:**  If the POI is within a user definable match distance AND either:
** the names of the two features are similar according to a configurable threshold OR
** the types of the two features are similar according to a configurable threshold OR
** the address of the two features are an exact match (standard OSM address tags are used; see 
`AddressScoreExtractor`)
** the phone number of the two features are a match (standard OSM and configurable phone number tags 
are used; see `PoiPolygonPhoneNumberScoreExtractor`)
** If the Euclidean match distance requirement is not met, Hootenanny will also calculate the 
distance from the POI to a convex polygon shape (alpha shape) derived from the polygon feature and 
use that value for the distance (certain restrictions apply; see 
`PoiPolygonMatch::_calculateEvidence`).
* **Force the two features to be manually reviewed:** If the POI is within the review distance 
(accounting for circular error) and any one of the other previously listed criteria for a match is 
met.
* **Do not match or review the two features:**  If the POI is not within the review distance of the 
polygon, regardless if any of the other match criteria are met.

Unlike many of the matching routines intra-data set matches are allowed. This resolves issues that 
commonly occur in data sets where polygons are duplicated in a POI layer.

The circular error (CE) of the two input elements is assumed to be that we are 95% CE for each 
feature (2 sigma). To combine the two values together into a single value that represents the 95% 
confidence that they're within that distance is:

------
sigma1 = CE1 / 2
sigma2 = CE2 / 2
combined CE = sqrt(sigma1 * sigma1 + sigma2 * sigma2) * 2
------

Hootenanny POI to Polygon conflation also allows user to define a custom set of match rules 
(disabled by default) for one-off type conflation tweaks. See `PoiPolygonCustomRules.cpp` for an 
example.

Techniques that were experimented with but proved to add no benefit to the model for the data tested:

* varying the match distance based on the polygon density
* varying the match distance based on the feature type
* using Weka to fine tune the factors and score thresholds used

==== Merging

The first layer selected is the reference layer and the second, the secondary layer, same as in all 
other hoot conflation types.  Which tags are kept is dependent on the selected tag merging strategy 
as described later. Geometry merging is a little more complex as later described.

Once a relationship has been established between elements a graph is created to determine any 
interdependencies. If a single element is involved in multiple matches then all the elements 
involved in that set of matches are marked as needing review. This avoids complex situations where 
there are multiple conflicting POI attributes.

However, if a review relationship is found and a match relationship is found, the review 
relationship is not included in the interdependence calculation. So, you may have a POI merged with 
one building, but marked as needing review with another building. Modifying this business logic will 
require some user input on the desired functionality as well as some not so insignificant internal 
changes.

If a merge is warranted, the geometry of the building is used and the tags are merged using the tag 
merging mechanism defined in the `poi.polygon.tag.merger` configuration key. If that option is not 
defined, then the value from the `tag.merger.default` configuration option is used. If the `poi.polygon.auto.merge.many.poi.to.one.poly.matches` option is enabled, then all many POI to single 
polygon matches are always merged with PreserveTypesTagMerger, which retains type tags for merge 
features.

Detailed Merging Workflow:

* Merge the tags of all matching POIs in the reference layer together with each other if there is 
more than one POI in the reference layer to merge
* Merge the tags of all matching POIs in the secondary layer together with each other if there is 
more than one POI in the secondary layer to merge
* Merge the building tags for matching buildings from both layers together as described in
https://github.com/ngageoint/hootenanny/files/595244/Hootenanny.-.Building.Conflation.2014-08-19.pptx 
slide 6; they’re averged together
* Merge the building geometries for matching buildings from both layers together as described in 
that slide; pick the most complex building geometry and if both are the same complexity then pick 
the first geometry
* Merge the tags of the matching POIs and buildings from both layers with each other; all first 
layer reference tags take priority over secondary layer tags
* Remove the POI geometries as they’ve been “merged” with the building geometries.

==== Configurable Options

See the User Guide Command Line Documentation section for all configuration options beginning with 
the text `poi.polygon`.

==== Test Results

Match truth for several datasets was obtained by having a human manual match features
(see https://github.com/ngageoint/hootenanny/files/595245/Hootenanny.-.Manual.Matching.9-13-16.pptx 
for more details on the process involved). Then, Hootenanny conflated the same data and scored how 
many matches it correctly made.

.*POI to Polygon Test Data Sources*
[options="header"]
|======
| *Test* | *Region* | *Schema 1* | *Schema 2* | *Geospatial Accuracy* | *Type Attribution* | *Name Attribution* | *Address Attribution* | *Phone Number Attribution*
| 1 | KisMaayo, Somalia | MGCP | UTP | good | good | poor | none | none
| 2 | KisMaayo, Somalia | MGCP | OSM | good | good | poor in MGCP; average in OSM | none | none
| 3 | San Francisco, USA | OSM | city govt | good | average | average | poor in OSM; none in city govt | average
| 4 | Munich, Germany | OSM | NAVTEQ | good in OSM; poor near intersections for NAVTEQ | average for OSM; good for NAVTEQ | good | average | average
| 5 | Cairo, Egypt | N/A | N/A | good for poly; average for POIs | good | good | none | average
| 6 | Alexandria, Egypt | N/A | N/A | good for poly; average for POIs | good | good | none | poor
| 7 | Rafah, Syria | N/A | N/A | good | good | poor for polys; good for POIs | none | none
|======

* MGCP = Multi-National Geospatial Co-Production Program 
* OSM = OpenStreetMap.org

.*POI to Polygon Standalone Test Results - October 2021*
[width="100%"]
|======
| *Test* | *AOI*| *Manually Matched Feature Count* | *Percentage Correctly Conflated* | *Percentage Marked for Unecessary Review* | *Percentage Combined Correct and Reviewable*
| 1 | KisMaayo, Somalia | 58 | 14.8% | 84.2% | **99.0%**
| 2 | KisMaayo, Somalia | 13 | 38.8% | 55.6% | **94.4%**
| 3 | San Francisco, USA | 989 | 21.7% | 70.7% | **92.4%**
| 4 | Munich, Germany | 386 | 2.8% | 94.3% | **97.6%**
| 5 | Cairo, Egypt |56 | 61.8% | 33.3% | **95.1%**
| 6 | Alexandria, Egypt | 6 | 66.7% | 0.0% | **66.7%**
| 7 | Rafah, Syria | 5 | 100.0% | 0.0% | **100.0%**
|======

Combined Correct = number of correct matches + number of unnecessary reviews

Very good test scores were achieved for all test except that the Alexandria test. However, for some
of the larger conflation tests, the number of reviews may be larger than what some users would deem
acceptable.

==== Future Work

* improve tag similarity calculation
* more intelligent POI merging
* model based classification

For more information on POI to polygon conflation:
https://github.com/ngageoint/hootenanny/files/607197/Hootenanny.-.POI.to.Polygon.2016-11-15.pptx

