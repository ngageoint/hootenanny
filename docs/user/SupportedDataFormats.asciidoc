
[[SupportedDataFormats]]
=== Supported Data Formats

==== Input

* File Geodatabase (.gdb)
* GeoJSON (.geojson or http://) (memory bound)
* GeoPackage (.gpkg)
* https://www.geonames.org[GeoNames] (.geonames)
* https://geonames.nga.mil/gns/html/gis_countryfiles.html[Geonames.nga.mil] (.geonames)
* Hootenanny API Database (hootapidb://)
* https://github.com/ngageoint/hootenanny/blob/master/docs/user/OsmApiDb.asciidoc[OpenStreetMap API Database] (osmapidb://)
* OpenStreetMap API Web Service (http://)
* OpenStreetMap Protocol Buffers (.osm.pbf)
* OpenStreetMap XML (.osm)
* Overpass JSON (.json or http://overpass-api.de/[Overpass]) (memory bound)
* Shapefile (.shp)
* Zip files containing shape files and/or File Geodatabase files (.zip)
* Any additional OGR supported format not listed here (untested)

==== Output

* File Geodatabase (.gdb) (memory bound)
* GeoJSON (.geojson) (memory bound)
* GeoPackage (.gpkg) (memory bound)
* Hootenanny API Database (hootapidb://)
* https://github.com/ngageoint/hootenanny/blob/master/docs/user/OsmApiDb.asciidoc[OpenStreetMap API Database] (osmapidb://)
* OpenStreetMap API Web Service (http://)
* OpenStreetMap Protocol Buffers (.osm.pbf)
* OpenStreetMap SQL changeset (.osc.sql)
* OpenStreetMap XML (.osm) (memory bound if sorted by ID)
* OpenStreetMap XML changeset (.osc)
* Overpass JSON (.json) (memory bound)
* Shapefile (.shp) (memory bound)
* Any additional OGR supported format not listed here (untested; memory bound)

Additional data types can be made supportable via development effort using Hootenanny's pluggable I/O architecture. See 
the Hootenanny Developer Guide for details.

==== Memory Consumption

* An I/O operation is memory bound if either the input or output format is memory bound.
* Writing to OGR formats, while streamable, requires an internal element cache be maintained for 
child elements (way nodes, etc.) which makes doing so memory bound.
* To prevent memory bound conversion when writing OSM XML, you must set the `writer.xml.sort.by.id` 
configuration option to false and leave the elements unsorted by ID in output.
* With the exception of database formats, read operation are memory bound when specifying a bounding 
box filter.

==== OGR

* OGR layers may selectively be read with the syntax:
-----
# Note that each path;layer input combo must be surrounded in quotes. Otherwise, the entire input will be read.
"(input1[;layer])" "[input2[;layer])" ...
-----
* The format for OGR database URLs is: PG:"dbname='databasename' host='addr' port='5432' user='x' password='y'"
* To use file geodatabases, the File Geodatabase module http://trac.osgeo.org/gdal/wiki/FileGDB[must be compiled into your version of GDAL to work].
* A file geodatabase with files in a directory must have the top level directory named as *.gdb in order to be 
recognized correctly.
* A directory of shape files must have the top level directory named as *.shp in order to be recognized correctly.

===== Shape Files

* The conversion from OSM file to shape file is a lossy process that generates a point, line and polygon shapefile. The 
OSM XML format is a richer format than Shapefile and supports such things as multiple geometry types within one file, 
inherit topology and arbitrary tagging. For these reasons the conversion to Shapefile is a lossy conversion.
* Column filtering for shape files is supported with the `shape.file.writer.cols` configuration option.

==== https://github.com/ngageoint/hootenanny/blob/master/docs/user/OsmApiDb.asciidoc[OSM API Database]

The format of a OSM API database URL is: 

-----
osmapidb://<user name>:<password>@<host name>:<port>/<database name>
-----

Writing to OSM API database is intended to be a bulk operation for new data only (no updates on existing data).

==== Hootenanny API Database

The format of a Hootenanny API database URL is: 

-----
hootapidb://<user name>:<password>@<host name>:<port>/<database name>/<database table>
-----

The Hootenanny API database format (hootapidb://) is a slightly optimized version of the OSM API database with a 
different schema for use with conflation. The primary difference between the two is that the Hootenanny API database allows 
for multiple feature layers with each one corresponding to a map stored in its own table. The public OSM API database 
supports a single feature layer for the entire world. The Hootenanny API database format is meant for internal use 
by Hootenanny only.

==== OSM API Web Service

Only changesets may be written to an OSM API Web Service (http://).

==== Archive Files (Compressed or Uncompressed)

* For the `hoot convert` command zip files (.ZIP), tar files (.TAR and compressed .TAR.GZ and .TGZ), and gzip files (.GZ)
can be used as input using regular path syntax.  When used this way, all GDAL compatible files are read from the file and
loaded appropriately.  When only one file in the archive is desired use the syntax below.
* To specifying a single file within an archive file: "/vsi<type>/<path to archive file>/<path to the file INSIDE the archive>.
The "/" are field separators. If you get errors using absolute paths, check that you have the right number of "/".
* Valid archive prefixes are as follows:
** `/vsizip/`
** `/vsitar/`
** `/vsigzip/`
* EXAMPLE: A Zip file located at /gis-data/test_data.zip:
** The path to the shapefile inside the Zip file: "dir/LAP010.shp
** The input is: "/vsizip//gis-data/test_data.zip/dir/LAP010.shp"
** If the Zip file is in the current directory, the input will be: /vsizip/./test_data.zip/dir/LAP010.shp

