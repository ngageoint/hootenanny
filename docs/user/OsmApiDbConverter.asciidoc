
== Working with OpenStreetMap Editing API Database Data in Hootenanny 

Hootenanny offers the capability to convert data between an OpenStreetMap Editing API Database and any supported Hootenanny data sources.  The OpenStreetMap Editing API database allows fetching and saving of raw geo-data for OpenStreetMap.  The current supported API version is 0.6. More information about the database and API is found at: http://http://wiki.openstreetmap.org/wiki/API. 

Hootenanny supports writing and reading from the OpenStreetMap API database using its 'convert' command.  Hootenanny's Services Database was refactored to support both Hootenanny's internal database and the OpenStreetMap Editing API database.  Conversion methods were created to write and read from the database.  A description of how to use Hootenanny's capability for 'writing to' and 'reading from' an OpenStreetMap Editing API Database is described here. 

=== Configuring an OSM API Database Connection

Before any reading/writing can occur, you must configure Hootenanny to use your OSM API database (only one database at a time is supported).  
See "Configuring an OSM API Database Connection" section of the Hootenanny Installation Guide for instructions.

=== Creating an OSM API Database

If you do not already have an OSM API database, you can run the following:

----------------------------
$HOOT_HOME/scripts/CleanAndInitializeOsmApiDb.sh
-------------------------------

This will create an empty OSM API database with a single test user.

=== Writing to an OpenStreetMap Editing API Database

Hootenanny uses optimized SQL routines to write data to the OSM API database, which results in much faster performance than using 
XML changesets passed to the OSM web services over HTTP.

IMPORTANT: This script should not be used in an environment where multiple simultaneous database writers exist (online production 
environment), as ID conflicts may occur.  It should only be used when the user of this script is the only potential database writer 
(database offline).  If you cannot take your database offline, your best course of action is to either use Osmosis or Hootenanny 
to load your data in as OSM changesets (see Hootenanny derive-changeset and apply-changeset command documentation).

The configuration option, changeset.user.id, must match a user existing in your database and one you want
associated with the changesets that write the data.  If you use the hoot scripts to create your OSM API database, this user will
be created for you.   The default user ID is 1.  To change this value, add the following to the 'hoot convert' line in the scripts referenced
in this section: -D changeset.user.id=<id> , where <id> is your user ID.

Other settings you may be interested in tweaking:

postgresql.dumpfile.writer.element.status.count.interval
changeset.max.size

Additionally, see the descriptions of all postgresql.dumpfile.writer.* configuration option settings in the User Guide.

Hootenanny ships with an empty OSM API database, configured by default, which can be used for testing these commands.

To load data into an existing OSM API database using Hootenanny, run:

-----------------------
$HOOT_HOME/scripts/LoadOsmApiDbData.sh yourDataset1.osm
$HOOT_HOME/scripts/LoadOsmApiDbData.sh yourDataset2.osm
# etc.
-------------------------

To create a new database and load a single layer in one step, run:

-----------------------
$HOOT_HOME/scripts/CleanAndLoadOsmApiDbData.sh yourDataset.osm
-------------------------

This script completely cleans out the database with each use.

To create a SQL dump file with your input data, which can later be applied to Postgres to load the data:

--------------------
hoot convert yourDataset.osm sqlFile.sql
--------------------

=== Reading from an OpenStreetMap Editing API Database

Reading from an OpenStreetMap Editing API database requires the use of Hootenanny's 'convert' command and the following command arguments described here:

------
% Hootenanny 'convert' command: hoot convert [args] input output

% Input source:
a sample OpenStreetMap Edit API Database: osmapidb://hoot:hoottest@localhost:5432/osmapi_test  This database is the test database and should be active for testing. However, any database input source may be supplied here. 

% Output source:
define an output osm file: /tmp/ToyTestA-out.osm

% Command syntax example:

hoot convert osmapidb://hoot:hoottest@localhost:5432/osmapi_test test-output/ToyTestA-out.osm

hoot convert -D convert.bounding.box=-106.5100000,38.3000000,-106.4000000,38.5000000 osmapidb://hoot:hoottest@localhost:5432/osmapi_test test-output/bboxOutput.osm
------

=== Validating Writes to the OpenStreetMap Editing API Database

After writing to the OpenStreetMap Editing API Database, the data can be validated by performing the following steps:

------
% Dump DB
pg_dump -U hoot -h localhost -p 5432 osmapi_test -a > /tmp/ToyTestA-dump.sql
% password=hoottest
% Note: Assume ToyTestA.osm was written to the db previously
% Note: Assume the arg -D services.db.writer.output.id.mapping=/tmp/idmaps.xml was used 
  when writing.

% Install dependencies for the compare script
sudo apt-get install libxml-simple-perl

% Compare input with the dumped output
time $HOOT_HOME/scripts/compareOsmXmlToOsmApiDbDump $HOOT_HOME/test-files/ToyTestA.osm /tmp/idmaps.xml /tmp/ToyTestA-dump.sql
------ 

The sample output for validating the write operation using ToyTestA.osm should look something like this:

------
OSM XML file: ./test-files/ToyTestA.osm
PostgreSQL dump file: /tmp/ToyTestA-dump.sql

Validating data: nodes
current_nodes, current_node_tags:
Matching number of nodes: PASS (36)
Deep inspection of data integrity: PASS
nodes, node_tags:
Matching number of nodes: PASS (36)
Deep inspection of data integrity: PASS

Validating data: ways
current_ways, current_way_tags, current_way_nodes:
Matching number of ways: PASS (4)
Deep inspection of data integrity: PASS
ways, way_tags, way_nodes:
Matching number of ways: PASS (4)
Deep inspection of data integrity: PASS

Validating relations: ways
current_relations, current_relation_tags, current_relation_nodes:
Matching number of relations: PASS (0)
Deep inspection of data integrity: PASS
relations, relation_tags, relation_nodes:
Matching number of relations: PASS (0)
Deep inspection of data integrity: PASS

real 0m0.086s
user 0m0.082s
sys 0m0.004s
------

=== Validating Reads from the OpenStreetMap Editing API Database

After reading from the OpenStreetMap Editing API Database, the data can be validated by performing the following steps:

------
% Dump DB
pg_dump -U hoot -h localhost -p 5432 osmapi_test -a > /tmp/ToyTestA-dump.sql
% password=hoottest
% Note: Assume ToyTestA.osm was written to the database previously

% create new idmaps xml (idmaps2.xml) from the output data file
./generateIdMapXmlFromOsm /tmp/ToyTestA-out.osm /tmp/idmaps2.xml
% Note: Assume ToyTestA-out.osm was read from the db and written to file 

% compare the output with the database 
time scripts/compareOsmXmlToOsmApiDbDumpWriter /tmp/ToyTestA-out.osm /tmp/idmaps2.xml /tmp/ToyTestA-dump.sql
------ 

The reading validation output should be similar to the output for the writing validation.  If there is a mismatch, then contact the developer with the result so that the software can be checked for bugs.
 
