== Overview

This document describes how to install Hootenanny.  Hootenanny is supported on CentOS 7.x.  Both an RPM package and a virtual machine
are provided.

== Environment

* Hardware specs may vary. Hootenanny has been successfully installed on VMs. Some suggested specifications:
	** At least 8GB of RAM, but you can certainly run small datasets on far less.
	** Quad core or greater Intel x86 64bit compatible processor
* An installation of CentOS/RHEL 7 64bit with a working yum repository or access to downloadable installable RPM's.
* A client machine with the Chrome (or Chromium) browser installed. Hootenanny is only supported in Chrome.

== Virtual Machine Instructions

See VAGRANT.md

[[fullinstall]]
== CentOS/RHEL RPM Install Instructions

The recommended and easiest installation method is to install from RPMs.  This can be accomplished by running the following commands:

--------------------------------------
sudo yum install -y epel-release yum-utils
sudo yum-config-manager --add-repo https://s3.amazonaws.com/hoot-repo/el7/pgdg95.repo
sudo yum-config-manager --add-repo https://s3.amazonaws.com/hoot-repo/el7/release/hoot.repo
sudo yum makecache -y
sudo yum install -y hootenanny-autostart
--------------------------------------

This will set up the EPEL, PGDG, and Hootennanny repositories.  All packages in these repositories are cryptographically signed by their maintainers.

For additional details on configuring the database connection pool, see <<HootDBConnectionPool>>.

== Hootenanny Package Descriptions

The following instructions assumed you have used the Hootenanny build process to already have generated the following files:

* The Hootenanny core and UI source archive (hootenanny-X.Y.Z.tar.gz)
** The hoot core code is written in C++ and is to be packaged in a source archive (tar.gz) on a build machine during the release process. The source archive will be then compiled on the target installation machine.
** The hoot UI code is in Javascript and is packaged inside of the same source archive that the hoot core code is packaged in a directory named "hoot-id". The directory is to be manually copied to the web server on the target installation machine.
* The Hootenanny services web archive (hootenanny-services-X.Y.Z.war) files
** The hoot services code is in Java and is compiled on a build machine and packaged into a web archive (.war) file as a result of the release process. The war file is then deployed to the web server on the target installation machine.
* The FOUO translations archive (hootenanny-translations.tar.gz), which are only available through official channels.

== Helpful Hints

. You can also add a custom base map quickly to the Hootenanny UI, without having to edit Javascript code if that is more convenient, but the base map will not be retained in the base maps list between browser refreshes (a bug). To add a custom basemap:

.. From the right hand menu in iD, click "Custom".
.. Add the URL for the basemap you wish to use.

. You can quickly zoom to an AOI by modifying the end of the browser URL. The parts you modify are of the form /[zoom]/[latitude]/[longitude].

== Advanced Tasks

=== Ingest Data (optional)

If you have a small amount of data to ingest, you can easily do it from within the Hootenanny UI using the "Add Dataset" feature. If you have a large number of files you would like to script for ingest at one time, you may do it with repeated call something like the following:

--------------------------------------
#adjust email accordingly; setting not needed if already set in conf/hoot.json during build
hoot convert -D services.db.write.email='test@test.com' /myData.osm postgresql://hoot:hoottest@localhost:5432/hoot/myMap

--------------------------------------

=== Configure the Base Map List

To manually configure the available base maps shown in the iD editor:

. Edit +$HOOT_HOME/hoot-ui/data/imagery.json+
. Add or remove JSON entries to edit the base maps.  At a minimum, you must:
.. specify a unique ID for the layer in the "id" attribute
.. specify a name for the base map in the "name" attribute
.. specify a min and max scale extent for the base map that defines at what zoom level range it will be visible in the "scaleExtent" attribute
.. specify whether the base map should be selected by default by setting the "default" attribute to "true" or "false

== Installing a Joshua Language Translation Service

By default, Joshua is not enabled with any languages.  To launch a Joshua translation service for a given language:

1) Verify that you have enough extra memory on hand to support the new translation service deployments.  Translation services have been seen
to take up as much as 9-10GB of memory under light load for the largest language packs.  The 'joshuaMaxMemory' configuration property in
hoot-services/src/main/resources/hoot-services.conf.in allows for setting an upper limit on per service memory allocation.

2) Download the version 2 language pack from here: https://cwiki.apache.org/confluence/display/JOSHUA/Language+Packs

3) Extract the file to a desired location.  Within the extracted root folder at a minimum you should see the folders: "model" and
"target".  "model" contains the language translation model and "target" contains the executable Joshua jar.  There should also be in
the root directory a script, "joshua" and a config file "joshua.config".  The script is used to run Joshua as an external process by
the Hootenanny Translation Web Service

4) Add or enable an entry for your translation service to hoot-services/src/main/resources/language-translation/joshuaServices.  The file is
pre-configured with entries for all available version 2 language packs as of 9/14/2018, so you may not need to add a new entry unless the
language pack was added more recently.  To activate an existing language pack entry, uncomment the associated line from the aforementioned
configuration file.

5) Stop the Hootenanny Tomcat server

6) Rebuild and redeploy Hootenanny to Tomcat

7) Start the Hootenanny Tomcat server for the Hootenanny Translation Web Service to redeploy all configured Joshua services.  This will take
some time (at least a few minutes).  In the future, a less intrusive deployment scenario could involve running the Translation Web
Service from a servlet separate from hoot-services.  That way a language service update would not interrupt the operation of the
rest of hoot-services.

8) For debugging purposes, you can check the Tomcat logs for errors looking for entries from 'JoshuaServicesInitializer'.

9) You should be able to do a simple translation against the services you have launched (requires netcat installed):
'bash -c "echo <text-to-translate> | nc localhost <port>"'

10) See documentation in the Hootenanny User Guide for information about retrieving Hootenanny Translation Web Service metadata and performing
translations.

