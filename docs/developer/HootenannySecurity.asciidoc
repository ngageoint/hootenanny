
==== Security

===== OAuth Configuration

Hoot services are now authenticated with OAuth2 which adds a config file oauth2-client.properties that will potentially need to be tweaked per environment.

This file is found in the hoot-services.war file under the path `WEB-INF/classes/oauth2-client.properties`.

The default value works for the UI running separately in development mode with webpack.
The proper redirect-uri value for the UI deployed by tomcat on vagrant is `https://localhost:8443/hootenanny-id/login.html`.

There is a sed script that will update this config `scripts/tomcat/configure_oauth_8888.sh`, which is also used by the RPM-based vm defined in the Vagrantfile as `hoot_centos7_rpm`, which is the quickest way to get Hootenanny up and running.

Out of the box, the Hoot OAuth2 config uses OSM as the OAuth provider only to authenticate users.  The default client registration does not have the permission to write back to the OSM API.
There are more config settings to change the OAuth provider from public OpenStreetMap to another private instance.  This will require registering a new client application with the rails app and then updating this section in oauth2-client.properties.

```
spring.security.oauth2.client.registration.osm.client-id=
spring.security.oauth2.client.registration.osm.client-secret=
spring.security.oauth2.client.registration.osm.redirect-uri=
spring.security.oauth2.client.registration.osm.scope=read_prefs+write_api
spring.security.oauth2.client.provider.osm.user-info-uri=
spring.security.oauth2.client.provider.osm.token-uri=
spring.security.oauth2.client.provider.osm.authorization-uri=
```

===== Public vs Private Visibility

All services are now wrapped by authentication and many of the service endpoints have been migrated to be user aware.

>The plan is for new datasets to be private to the user by default.  Existing datasets owned by the dummy test user will be public.  We will add a method for making private datasets and their review bookmarks public.

* During implementation, it was decided that datasets would not have an inherent visibility.  Instead, folders have visibility and datasets inherit visibility from their containing folder.  The root folder is always public.  Data and folders that are public are read-only by non-owners with respect to modification (removing, moving, renaming folders or creating subfolders are not allowed), but public folders can be written to with map datasets by any user.
* Public datasets can be clipped, conflated, and exported by non-owning users, but the destination output folder must be public or owned by the user.
* The data within a public dataset, accessed through the Hoot Map API, is editable by any authenticated user.  This allows multiple users to work through conflation reviews.
* There is a python https://github.com/ngageoint/hootenanny/blob/develop/scripts/database/UpdateFolderOwnerVisibility.py[script] for migrating existing folders and maps from the dummy user to a real user (once that user has logged in).
* Public folders and their contents are shaded blue.  Folders and sub-folders cannot mix visibility.  A change to one affects the entire tree.

:tada: Thanks to great work by @sumarlidason and @jbronn
v

