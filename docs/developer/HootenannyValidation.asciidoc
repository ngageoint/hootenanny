
== Using Validation Checks to Improve Conflated Maps

It is quite easy to produce conflated map output that initially seems accurate but upon further 
examination has quality issues. https://josm.openstreetmap.de/[JOSM] has an extensive collection of 
validation tools that can be used to detect such issues. Hootenanny is integrated with 
https://josm.openstreetmap.de/[JOSM] via the 
https://en.wikipedia.org/wiki/Java_Native_Interface[Java Native Interface (JNI)]. This allows 
Hootenanny C++ core code to invoke JOSM validators by making calls into its Java code. The 
integration code resides in the `hoot-josm` library and is used by the `validate` command, which 
uses the `JosmMapValidator` class, and the `JosmMapCleaner` class.

The Hootenanny/JOSM integration is a useful tool to detect undesirable changes to conflated output 
caused by code changes before they make it to the production environment. We have elected to make 
validation checks a voluntary part of the testing process for now vs having them performed 
automatically within tests for the following reasons (the decision may be reversed at some point):

* Not all validation failures are critical and some may be unavoidable in conflated output under 
certain circumstances.
* A large number of tests failing due to just validation errors only would be disruptive to the 
incremental conflation development process. It is easier to make a series of conflated relation 
changes and check validation manually towards the end of the development process.

=== Generating Validation Reports

The `validate` command provides the capability for running validation checks on selected test output 
after it has been generated by `HootTest`. Here is an example:
-----
# Run a selected test.
HootTest --slow '--include=.*AreaConflateStandaloneTest.*'
# Now, generate the validation report for the same test using the test output previously generated 
# in the test-output directory.
hoot validate test-output/cmd/slow/AreaConflateStandaloneTest --recursive "*"--report-output=/my/report
-----

`validate` as used above will generate a single validation report at the specified report output 
location with multiple entries for each test output geospatial file encountered in the input 
directory. The file `conf/core/validationReportExclude` can be used to configure any test output 
file that should not have a validation report generated for it (TODO: future).

=== Comparing Validation Reports Against Different Code Versions

If you want to compare validation errors between two different versions of code, use the following
workflow:

* Check out a branch of code without the changes that need to be evaluated to be used as a baseline 
(e.g. master branch). 
* Run selected tests on the baseline branch.
* Generate a test validation report for the baseline branch using `test-output` as the input 
directory.
* Switch to another source directory and check out the branch of your code with the changes that 
need to be evaluated.
* Run the same tests as in the previous steps on the second test branch.
* Generate a test validation report on the second test branch using `test-output` as the input 
directory.
* Finally, use the `diff` tool on the two validation reports to determine the difference in 
generated validation errors before and after your changes.

Here is a complete example:
-----
cd hoot

git checkout master
aclocal && autoconf && autoheader && automake --add-missing --copy && ./configure --with-rnd --with-josm --with-services
make -j$(nproc)
HootTest --glacial --parallel
hoot validate test-output --recursive "*" --report-output=tmp/master-validation-report

git checkout my-feature-branch
aclocal && autoconf && autoheader && automake --add-missing --copy && ./configure --with-rnd --with-josm --with-services
make -j$(nproc)
HootTest --glacial --parallel
hoot validate test-output --recursive "*" --report-output=tmp/my-feature-branch-validation-report
-----

