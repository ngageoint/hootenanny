
=== Using Validation Checks to Improve Conflated Maps

It is quite easy to produce conflated map output that initially seems accurate but upon further 
examination has quality issues. https://josm.openstreetmap.de/[JOSM] has an extensive collection of 
validation tools that can be used to detect such issues. Hootenanny is integrated with 
https://josm.openstreetmap.de/[JOSM] via the 
https://en.wikipedia.org/wiki/Java_Native_Interface[Java Native Interface (JNI)]. This allows 
Hootenanny C++ core code to invoke JOSM validators by making calls into its Java code. The 
integration code resides in the `hoot-josm` library and is used by the `validate` command, which 
uses the `JosmMapValidator` class, and the `JosmMapCleaner` class. 

Hootenanny has validation integration with some unit tests. See the "Test Output Validation" section 
under the "Hootenanny Tests" section in the Hootenanny Developer Guide for more information.

Notes:

* Not all validation failures are critical and some may be unavoidable in conflated output under 
certain circumstances.
* Validation failures across multiple validators are sometimes contradictory with each other.
* If conflation job is passed inputs that have validation errors, the output will almost undoubtedly
have some of the same validation errors. The input should be cleaned beforehand when possible.
* "Total failing validators" in the validation reports refer to the number of validators which 
exited program execution abnormally due to not being able to properly validate the input data 
provided (crashed). It does not refer to the number of validators which had validation errors. That 
total can be inferred from the total number of unique validation error types that occurred.

==== Generating Validation Reports

The Hootenanny/JOSM integration is a useful tool to detect undesirable changes to conflated output 
caused by code changes before they make it to the production environment. The `validate` command 
provides the capability for running validation checks on selected conflated output after it has been 
generated. Here is an example using one of the script tests:
-----
# Generate some conflated output.
HootTest --slow '--include=.*AreaConflateStandaloneTest.*'
# Now, generate the validation report for the same test using the test output previously generated 
# in the test-output directory, and write validation errors to a separate file.
hoot validate test-output/cmd/slow/AreaConflateStandaloneTest/Output.osm \
  --report-output test-output/cmd/slow/AreaConflateStandaloneTest/MyValidationReport \
  --output test-output/cmd/slow/AreaConflateStandaloneTest/ValidatedOutput.osm
-----

==== JOSM Configuration

The https://josm.openstreetmap.de/[JOSM] library version used in validation, and optionally also 
in cleaning, may be customized. To configure it:
* (optional) If you need to reference a local JOSM JAR (one not available in the default configured 
public Maven JOSM repository), you must manually install it with Maven. See 
`scripts/core/make-hoot-josm-java.sh` for an example.
* Within `hoot-josm/pom.xml`. Under the `<properties>` XML tag, configure `josm.artifactId` and 
`josm.version` for the JOSM JAR you wish to use. This will use the configured Maven repository to 
locate and download the JAR file.
* The JAR file will exist in the Maven cache at: 
`~/.m2/repository/org/openstreetmap/josm/josm/<josm.version>/josm-<version>.jar. Locating the JAR 
file in the cache can be useful for debugging purposes.
* At build time the JOSM jar will be copied to `hoot-josm/target/dependency-jars/josm.jar`, and its 
path referenced within the `jni.class.path` configuration option. Note that `hoot-josm` will modify
the JAR file via a monkey patch. This is necessary to get around some compatibility issues. See 
`scripts/core/make-hoot-josm-java.sh` and the implementation of `AbstractProperty` in hoot-josm for 
more detail.
* Hootenanny produces its own JAR file to interact with the JOSM JAR. By default, this file will be 
copied to `hoot-josm/target/hoot-josm.jar`.
* The value of the configuration option, `josm.validators`, must match the expected validators
available in the JAR. By default the option is configured to work with public JOSM. Other versions
may use different validators.

See the jni.* and josm.* configuration options for more detail on JOSM configuration.

JNI is notoriously difficult to debug and its usage with JOSM can become very brittle with 
underlying changes between JOSM versions. Upgrading JOSM should be done with care and with the 
expectation of involved integration work. JOSM upgrades may involve significant changes to 
`hoot-josm` code. Also if any validators are added in a new JOSM version (assuming you want to use 
the new ones), all the baseline validation reports used by the unit test output validation will need 
to be updated after the new output is examined for accuracy.

