
== Building Hootenanny

Hootenanny uses a top level Makefile to control the building and testing of code from all three of its codebases: 
Hootenanny Core (C++), Hootenanny Web Services (Java), and Hootenanny User Interface (Javascript).  Underneath, 
Hootenanny also uses qmake and Maven for additional build capabilities.

Type `make help` to see a list of all possible build and configuration options, some of which are described in this section.

Before building Hootenanny, the application must be configured:

----------------
aclocal && autoconf && autoheader && automake && ./configure <options>
----------------

Once Hootenanny is initially configured, this command only need be re-run if the underlying make files change in source control:

------------------
aclocal && autoconf && autoheader && automake
------------------

This line needs to be re-run everytime you change configuration options:

-----------------
./configure <options>
-----------------

The Hootenanny configuration options consist of:

* `--with-services` - builds Hootenanny Core services database code as well as all Hootenanny Java Web Services code.
* `--with-rnd` - builds Hootenanny Core experimental R&D code
* `--with-josm` - builds code related to the JOSM integrated features
* `--with-uitests` - enables the Hootenanny User Interface tests
* `--with-coverage` - generates code test coverage reports

See the Notes On Configure doc for even more information about using configure with make.

To build Hootenanny Core command line only code with no options:

---------------------
./configure && make -sj$(nproc)
---------------------

The `-s` option tells Hootenanny to run in silent mode, which suppresses all non-error logging.  Silent mode can be removed for debugging purposes.

The `-j$(nproc)` tells Hootenanny to parallelize compilation and test execution where applicable, where `$(nproc)` returns the number of threads the system is configured to run on (typically the number of system CPU cores or 2x the number of CPU cores if hyperthreading is enabled). You can substitude any value you wish for `$(nproc)` or leave the `-j$(nproc)` option out all together to run within a single thread.

An an example, to build the Hootenanny API database, OSM API database, and Hootenanny Web Services capabilities along with Hootenanny Core:

--------------------
./configure --with-rnd --with-services && make -sj$(nproc)
--------------------

To clean the code:

-------
make clean
-------

To clean the Web Services database:

-------
make clean-db
-------

To generate Hootenanny documention:

------
make docs
------

The documentation can be found in PDF format in the `docs` folder.

Running Hootenanny tests is covered in a subsequent section of this document.

=== Managing the Build

Make files of note:

* Makefile.hoot
* Makefile.am
* hoot-services/Makefile

Under the covers the Java Web Services code is built with Maven, so you may interact directly with Maven if that is more convenient.

Web Services Maven files of note:

* pom.xml
* distribution/pom.xml
* scripts/maven/mvn-build

To switch from the default configuration of a release build to that of a debug build, make the following changes 
in LocalConfig.pri:

------
#CONFIG += release
#CONFIG -= debug

CONFIG += debug
CONFIG -= release
------

=== Integrated Development Environment

# TODO: We should move developer environment setup to its own doc and enhance it with more detail.

==== Core

For Hootenanny core development, Qt Creator is an excellent choice for an IDE. Details on its installation and 
configuration are outside of the scope of this document.

