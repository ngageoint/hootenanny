
=== Building the Software

Hootenanny uses a top level Makefile to control the building and testing of code from all three of its codebases: 
Hootenanny Core (C++), Hootenanny Web Services (Java), and Hootenanny User Interface (Javascript).  Underneath, 
Hootenanny also uses qmake and Maven for additional build capabilities.

Type `make help` to see a list of all possible build and configuration options, some of which are described in this section.

Before building Hootenanny, the application must be configured:

----------------
aclocal && autoconf && autoheader && automake && ./configure <options>
----------------

Once Hootenanny is initially configured, this command only need be re-run if the underlying make files change in source control:

------------------
aclocal && autoconf && autoheader && automake
------------------

This line needs to be re-run everytime you change configuration options:

-----------------
./configure <options>
-----------------

The Hootenanny configuration options consist of:

* `--with-services` - builds Hootenanny Core services database code as well as all Hootenanny Java Web Services code.
* `--with-uitests` - enables the Hootenanny User Interface tests
* `--with-coverage` - generates code test coverage reports

See the Notes On Configure doc for even more information about using configure with make.

To build Hootenanny Core command line only code with no options:

---------------------
./configure && make -sj$(nproc)
---------------------

The `-s` option tells Hootenanny to run in silent mode, which suppresses all non-error logging.  Silent mode can be removed for debugging purposes.

The `-j$(nproc)` tells Hootenanny to parallelize compilation and test execution where applicable, where `$(nproc)` returns the number of threads the system is configured to run on (typically the number of system CPU cores or 2x the number of CPU cores if hyperthreading is enabled). You can substitude any value you wish for `$(nproc)` or leave the `-j$(nproc)` option out all together to run within a single thread.

An an example, to build the Hootenanny API database, OSM API database, and Hootenanny Web Services capabilities along with Hootenanny Core:

--------------------
./configure --with-rnd --with-services && make -sj$(nproc)
--------------------

To clean the code:

-------
make clean
-------

To clean the Web Services database:

-------
make clean-db
-------

To generate Hootenanny documention:

------
make docs
------

The documentation can be found in PDF format in the `docs` folder.

Running Hootenanny tests is covered in a subsequent section of this document.

==== Managing the Build

Make files of note:

* Makefile.hoot
* Makefile.am
* hoot-services/Makefile

Under the covers the Java Web Services code is built with Maven, so you may interact directly with Maven if that is more convenient.

Web Services Maven files of note:

* pom.xml
* distribution/pom.xml
* scripts/maven/mvn-build

To switch from the default configuration of a release build to that of a debug build, make the following changes 
in LocalConfig.pri:

------
#CONFIG += release
#CONFIG -= debug

CONFIG += debug
CONFIG -= release
------

==== Details on `Configure`

The C++ portion of Hootenanny uses autoconf to configure the C++ libraries and such. Any Linux admin will be quite familiar with the `configure` script that this process generates. However, autoconf is anything but automatic. The following sections describe how the configure process works, which files are created and how that impacts the build process.

===== Generating the `configure` Script

The configure script is generated by autoconf via the following commands:

--------
# generate aclocal.m4
aclocal
# generate configure
autoconf
--------

These two command depend on the `configure.ac` file as well as all the files included from `configure.ac` in the `m4` directory. These macro files define all the dependencies and describe how to determine if the dependencies exist, are the right version, and how Hootenanny needs to compile and link against the dependencies. If you take a peek at `configure.ac` most people will think it is some form of gibberish with a few familiar terms mixed in. I won't try and explain what the gibberish means, but you can likely get the gist. There are a number of tutorials on autoconf that should be useful. We can start by looking at a simple example (as of 2013-08-14). At about line 81 is the following snippet:

--------
# CPPUnit
m4_include([m4/cppunit.m4])
CPPUNIT_INIT()
--------

This defines the dependence on CPPUnit by including it's macro file and then executing the CPPUNIT_INIT() method. This in turn executes a number of gibberish macros to determine if CPPUnit exists and if it does sets some variables, but one in particular is useful:

* `HAS_CPPUNIT = cppunit` if cppunit is present. This will provide some substitutions later in the process.

If you then go and poke around inside the crazy long configure script that was generated you'll see the shell script equivalent of that substitution (not recommended).

===== Running `configure`

Now that we've created a magical configure script from some meaningless (to you) gibberish. What does that buy us? Well it gets a bunch of substitutions similar to the `HAS_CPPUNIT` substitution mentioned above. These substitutions can be made within various `.in` files within the source directory to aid in Makefiles and header files. In the case of Hootenanny this applies to `Configure.pri.in`, and `config.h.in`. The `Configure.pri.in` generates `Configure.pri` and aids in the creation of Makefiles via qmake and the various `.pro` files found within the source tree. The `config.h.in` generates `config.h` and aids in determining within Hootenanny source and header files if a library exists or not. For instance there are a few places in the code where one include file is used over another depending on the `HAVE_BOOST_PROPERTY_MAP_PROPERTY_MAP_HPP` flag.

In our example above with `HAS_CPPUNIT` you can see its effect in `Configure.pri.in` in this line:

--------
CONFIG += HAS_NEWMAT HAS_CPPUNIT
--------

During processing the line above is replaced with the following on my machine:

--------
CONFIG += newmat cppunit
--------

If I didn't have CPPUnit installed it would be:

--------
CONFIG += newmat
--------

If you poke around in the various `.pro` files such as `hoot-core.pro` you will notice that one of the early lines is:

--------
include(../Configure.pri)
--------

This gives the `.pro` file access to all the configuration settings determined by the `configure` script.

This `CONFIG` variable is then referenced in a `.pro` files in one of two ways:

* Inline:
+
--------
cppunit:SOURCES += MyTest.cpp
--------

* Blocks:
+
--------
cppunit {
SOURCES += \
  MyTest.cpp \
...
}
--------

There are a number of other settings set in the `Configure.pri` that also get used such as library dependencies and include paths.

===== Running `make`

The make process is itself a bit complicated. There are two Makefiles at the top level of Hootenanny.

* Makefile - This is the manually crafted Makefile that provides things like releasing code, running unit tests and creating the rest of the makefiles.
* Makefile.qmake - This is the file generated from Hootenanny.pro by qmake. This shouldn't be edited, but produces all of the dependencies for calling Makefiles in subdirectories which all conveniently have the name, `Makefile.qmake`.

When modifying projects you'll typically be adding or removing entries from the `.pro` file associated with your project. Rarely changes will be made to the top level `Makefile`. You should never modify a `Makefile.qmake` directly as the changes will be overwritten.

When you type `make` for the first time all the `.qmake` makefiles will be generated for you and the code will be built. _Magic_.

==== Integrated Development Environment

===== Core

For Hootenanny core development, Qt Creator is an excellent choice for an IDE. Details on its installation and 
configuration are outside of the scope of this document.

