
=== Documentation

Documentation should be created for all code changes and feature additions. Code documentation 
guidelines are described below. Feature documentation is done with 
(https://asciidoc-py.github.io/)[AsciiDoc] (what you're reading now). In addition,
 (https://github.com/ngageoint/hootenanny/blob/master/README.md)[the main README file] contains a 
 documentation summary and will need to be updated from time to time.
 
Documentation is checked into source control to allow for linking to it from the main README page. 
Any time you make documentation changes, you must check the generated documentation files in as 
well as the documentation source files.

NOTE: The documentation version for the file checked into source control won't match that created 
during the release process. Some extra work will need to be done to make that happen.

==== Generating

The AsciiDoc documentation is shared by all aspects of Hootenanny. Run either `make archive` or 
`make docs` to generate the documentation. `make archive` generates the file 
`$HOOT_HOME/hootenanny-$(HOOT_VERSION).tar.gz`, which must be extracted to get the documentation.
`make docs` does not generate an archive file. In both cases, the main documentation can be found at 
`docs/Hootenanny - User Guide.pdf`, and the API documentation may be found at 
`docs/developer/CoreAPI/index.html`.

Alternatively, you can configure your Jenkins pull request job to archive the documentation and 
generate the API documentation by selecting: "Build with Parameters" and checking the "Archive_docs" 
checkbox. The documentation can be downloaded from the Jenkins job page as `docs.tar.gz`.

==== AsciiDoc Guidelines

See the AsciiDoc documentation for detailed information. A few tips have been added here.

* AsciiDoc does not allow for as many headers as we need in the Hootenanny documentation. The 
following workaround is used (feel free to implement something better): After the first five header 
levels have been exhausted, use *_Title_* for the sixth level, use _Title_ for the seventh level, 
and use Title for the final level (that's as far as we've needed to go up to this point).

==== Core

===== Command Line API

Each command exposed by Hootenanny should have its own Asciidoc documentation file. See: 
`docs/commands`.

===== C++ API

Class documentation is used to build displayable documentation with 
(https://www.doxygen.nl/index.html)[doxygen].

At a minimum, all public and protected class members that are not simple getters or setters should 
be documented. Private members may be documented on an as needed basis but their documentation will 
not be displayed in the API documentation generated by doxygen. Qt Creator will autocreate 
documentation templates for classes and method when you type `/**` and press enter. Use complete 
sentences in documentation where possible.

*_Classes_*

Class documentation should look something like this:

-----
@brief The WaySublineRemover class removes a sublines from ways.

Optional other info a couple lines down...
-----

It will also work without @brief:

-----
Removes a sublines from ways.

Optional other info a couple lines down...
-----

*_Methods_*

Public/Protected method documentation should look something like this:

-----
/**
  * @brief removeSubline removes a subline from a way.
   
    Optional other info a couple lines down...
  * @param way the way to modify
  * @param subline the subline in the way to remove
  * @param map the map owning the way
  * @return IDs of the ways created and added back to the map as a result of the subline removal
  */
  static std::vector<ElementId> removeSubline(
    const WayPtr& way, const WaySubline& subline, OsmMapPtr& map);
-----

It will also work without @brief:

-----
/**
  * Removes a subline from a way.
   
    Optional other info a couple lines down...
  * @param way the way to modify
  * @param subline the subline in the way to remove
  * @param map the map owning the way
  * @return IDs of the ways created and added back to the map as a result of the subline removal
  */
  static std::vector<ElementId> removeSubline(
    const WayPtr& way, const WaySubline& subline, OsmMapPtr& map);
-----

*_Variables_*

Public/Protected variable documentation should look something like this:
-----
/** This integer variable is documented. */
static int MY_INT;

/// This integer variable is documented.
static int MY_INT;
---- 

===== Conflation Reviews

If you use `ReviewMarker`, `MarkForReviewMerger`, or `NeedsReviewException` to flag a feature for 
review during conflation, document that review in `docs/algorithms/FeatureReview.asciidoc`.

===== Schema

The core schema documentation files are not currently being auto-generated. This is due to the fact 
that the CircleCI job that builds the archive is unable to make calls directly to `hoot` to generate 
the documentation (see `docs/Makefile`). Building the archive with `make archive` locally is 
actually able to generate the documentation though, but we don't want to break the CircleCI job. At 
some point The CircleCI job could be updated to allow for the schema documentation generation. In 
the meantime, run the following to manually generate schema documentation after any changes to the 
schema:
-----
cd docs
make clean-schema
make schema.asciidoc
make schema.png
-----

Then check in the changes to the modified schema documentation files into source control.

==== Services

===== API

See `hoot-services/target/site/apidocs/index.html` in 
`hootenanny-services-API-$(HOOT_VERSION).tar.gz` in the `docs` directory of 
`$HOOT_HOME/hootenanny-$(HOOT_VERSION).tar.gz` when running `make archive`.

