
==== User Interface Advanced Options Design

===== Version 1 (some may be applicable to v2)

This description is for a quick overview of the conflation advanced option meta data rule rest endpoint in the Hootenanny Web Services.

1. Main rule file conf/services/conflateAdvOps.json consists of subset of all hoot options. (see ticket 5840)
2. It is JSONArray with each option as JSON object
3. Each JOSON objects consists of some or all of following
	a. id: unique id that should represents the field in js
	b. elem_type: type of the field. [group|bool|int|double|string|checkbox|checkplus]
		- checkplus: A checkbox which, when set to true, can allow the user to set values for additional parameters.  When checkplus value is false, the additional child parameters are disabled/hidden from the user, and their values are not passed to services.
	c. description: field description which shows as tool tip
	d. name: descriptive field name
	e. hoot_val: unique option value understood by hootenanny. (It should be in configOptions.asciidoc)
	f. hoot_key: unique option key understood by hootenanny. (It should be in configOptions.asciidoc)
	g. members: JSONArray consists of child fields. Intended as sub field of a field. For example, enable checkbox and sub items dependent of the checkbox. Any field object can contain member field.
	h. override: JSONObject containing KV pair which gets overridden. For example if override object contains "elem_type":"checkplus" then the parent object's elem_type will always be "checkplus"
	i. defaultvalue: the default value set in UI
	j. onchange: js which gets executed when the field value changes
	k. required: This field forces value to be set all time when the group is enabled. On UI if required=true then the field is hidden

4. Service rest endpoint http://localhost:8080/hoot-services/info/advancedopts/getoptions?conftype=custom exposes modified conf/conflateAdvOps.json where the Service does following
	a. read conf/core/configOptions.asciidoc
	b. read conf/services/conflateAdvOps.json
	c. for each key in conf/services/conflateAdvOps.json, find from conf/core/configOptions.asciidoc and replace description,elem_type and defaultvalue values in conf/services/conflateAdvOps.json with  decription, Data type and default value of corresponding object in  conf/core/configOptions.asciidoc
	d. if it sees override in field object in conf/services/conflateAdvOps.json, replace the key value if the override object with the matching key value in parent object.
	e. remove override object so it does not get passed to rest enpoint caller.
5. Service rest endpoint http://localhost:8080/hoot-services/info/advancedopts/getoptions?conftype=reference exposes modified conf/services/conflationRefOps.json where it performs same operations as item #4 before returning output.
6. Service rest endpoint http://localhost:8080/hoot-services/info/advancedopts/getoptions?conftype=average exposes modified conf/services/conflationAverageOps.json where it performs same operations as item #4 before returning output.
7. Service rest endpoint http://localhost:8080/hoot-services/info/advancedopts/getoptions?conftype=horizontal exposes modified conf/services/conflationHorizontalOps.json where it performs same operations as item #4 before returning output.
8. reference, average and horizontal rest endpoint consists of subset of options used to be in UnifyingRoads.json
9. reference, average and horizontal rest endpoint output is meant to override corresponding fields in custom rest endpoint when corresponding conflation type is selected on UI. (For example, for reference conflation, the fields in reference rest endpoint will override the matching fields from custom rest end point output)

https://github.com/ngageoint/hootenanny/blob/master/hoot-services/CONTRIBUTING.md[Also see this]

===== Version 2

This file includes documentation for updates to services code to do things like...

1. add/remove advanced options exposed in the hoot2x ui
2. integrate new conflation types in the hoot2x ui

### Update the advanced options exposed in the hoot2x ui

1. Edit the `conf/services/conflationTypes.json` file

- add a new key/value pair for a given advanced option in the desired `${option}:members` property.
- the key is the actual hoot option flag found in the `conf/core/ConfigOptions.ascii` file, the value is the display name shown in the ui
- the `${option}` is the section in the ui the option will be placed. for example, if I have an option related to highways, it would make sense to add it in the `roads:members` property.
- for example, to expose the `highway.matcher.max.angle` option, an edit to the `conflationTypes.json` might be...

```javascript
...
 "Roads": {
        "matcher": "HighwayMatchCreator",
        "merger": "HighwayMergerCreator",
        "members": {
            "search.radius.highway": "Highway search radius",
            "highway.merge.tags.only": "Merge tags only",
            "highway.matcher.max.angle": "Maximum highway match angle" // new option...
        }
...
```

- Since cleaning options are members of the `map.cleaner.transform` option's list value, add the members of that list that a user should be able to toggle on and off
- for example, if it is helpful to turn on an off the `RemoveDuplicateAreaVisitor` cleaning option, an update might be...

```javascript
...
   "Cleaning": {
        "members": {
            "DualHighwaySplitter": "Split Dual Way",
            "RemoveDuplicateAreasVisitor": "Remove Duplicate Area" // new map cleaner...
        }
...
```

- these cleaning options will shown as checked by default in the ui

### Expose a new conflation type to the hoot2x ui

The Conflation type are driven by configs in `conf/core` directory. These configs are used to

* Allow a user to select a conflation type like attribute conflation and have the actual hoot command run on the services' machine something like

```bash
hoot conflate ${reference} ${secondary} -C AttributeConflation.conf # any other command line arguments...
```

* Ensure that the hoot2x advanced options panel options' state match what the conflation option configs define.

- For example, if a conflation type were to set `highway.merge.tags.only=true`, then the ui should show its checkbox as 'checked' when that conflation type is selected. Conversely, that checkbox should be unchecked in all cases where conflation types do not change the option's default value (in this case false).


The services code has the logic to read in these files and generate a lookup table used by the ui code to ensure this synced state. Contributors can integrate new conflation types in this lookup table by making 3 changes to service code.

* update the `hoot-services/main/resources/conf/hoot-services.conf.in` file to include a reference to the new conflation config

- for example something like...

```
# new conflation
newConflationConf=conf/core/newConflation.conf
```

* update the `hoot-services/src/main/java/hoot/services/HootProperties.java` with a new constant for the new conflationType

```java
public static final String NEW_CONFLATION_PATH; // define the new constant
```

```java
NEW_CONFLATION_PATH = getProperty("newConflationConf") // read the config into memory...
```

* add a reference to the new conflation type to the HashMap of conf paths in the `hoot-services/src/main/java/hoot/services/controllers/conflation/AdvancedConflationOptionsResource.java`

```java
    private static Map<String, String> confMap = new HashMap<String, String>(){{
        put("attribute", ATTRIBUTE_CONFLATION_PATH);
        put("horizontal", HORIZONTAL_CONFLATION_PATH);
        put("network", NETWORK_CONFLATION_PATH);
        put("differntial", DIFFERENTIAL_CONFLATION_PATH);
        put("new", NEW_CONFLATION_PATH); // new option...
    }};
```


- To see these changes to a local instance of hoot during development run the following commands...

```bash
make services-build
$HOOT_HOME/scripts/tomcat/CopyWebAppsToTomcat.sh
sudo services tomcat8 restart
```

