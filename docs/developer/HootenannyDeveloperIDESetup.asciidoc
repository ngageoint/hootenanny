
== Hootenanny Developer IDE Setup

This is just one possible way to configure IDE's for developing in Hootenanny.  Feel free to tweak it to your own preferences and share alternatives within this document.

*Some of this has been automated in scripts/InstallHootDevelopmentEnvironment.sh.  All steps are still listed here in case you want to do them manually.  Note that the script relies on Tomcat 7 instead of Tomcat 6, as these instructions do, in order to automate the Eclipse installation.*

You should have already installed both Java and Tomcat as is described in installing the dependencies "here":https://insightcloud.digitalglobe.com/redmine/projects/hootenany/wiki/Developer_-_Build_Hootenanny#Dependencies.

=== Hootenanny Core

==== Install Qt Creator

This only needs to be installed if you will be doing work on the Hootenanny C++ core code.

------
sudo apt-get install qtcreator
------

Note:  If you are running Qt Creator while remoting into xfce desktop, then you may have to launch it like this:

------
nohup qtcreator -noload Welcome -noload QmlDesigner -noload QmlProfiler &
------

==== Configure Qt Projects

* Inside Qt Creator, set your tab spacing to 2 spaces.
* Install ccache:
------
sudo apt-get install ccache
------
* Change build from release to debug:
** In $HOOT_HOME/LocalConfig.pri:
------
#CONFIG += release
#CONFIG -= debug

CONFIG += debug
CONFIG -= release

# Warn about uninitialized variables and set all variables to their default     
# values.                                                                       
QMAKE_CXXFLAGS+=-Wuninitialized -fno-common                                     
# Initialize values in BSS to zero -- dunno if this will help                   
QMAKE_CXXFALGS+=-fzero-initialized-in-bss                                       
                                                                                
QMAKE_CXX=ccache g++                      
------
* (optional) Create a symbolic link from your home dir (if slower magnetic drive) to /tmp (a faster SSD):
------
mkdir /tmp/ccache; ln -s /tmp/ccache ~/.ccache
------
This makes a pretty dramatic difference when doing: +make -s clean && make -sj8+
* Modify qt-creator to use +-j8+ (8 threads) when building.  Make the change in Projects -> Building Settings -> Build Steps -> Make.

==== Load Projects into Qt Creator

* From within Qt Creator, open +$HOOT_HOME/hootenanny.pro+ to import the projects into your workspace.
* Update run settings:
** From Qt Creator, click "Projects" on the LHS.
** Select "Run Settings"
** Expand the "Run Environment" section
** Click "Add" and add an entry for HOOT_HOME
** Change "Working directory" to: /full/path/to/hoot/home

==== Configure Make for Qt Creator

* Click on _Projects_
* Click _Build & Run_
* Click _Build_
* Click _Make_ in the _BuildSteps_ section
* Add +-j16+ (or similar) in the _Make arguments_ section

==== Debugging within Qt Creator

The following will allow you to debug a unit test:

* From Qt Creator, click "Projects" on the LHS.
* Select "Run Settings"
* Select "Run configuration" = hoot-test
* The "Executable" field should populate to something equal to $HOOT_HOME/bin/HootTest.bin
* Add to the "Arguments" field: --debug --single <full class name of test class> (e.g. hoot::PertyWayGeneralizeVisitorTest)
* Working directory should be: $HOOT_HOME
* Open the test class source file and click F5

The following will let you debug a hoot command:

* From Qt Creator, click "Projects" on the LHS.
* Select "Run Settings"
* Select "Run configuration" = hoot-cmd
* The "Executable" field should populate to something equal to $HOOT_HOME/bin/hoot.bin
* Add to the "Arguments" field: <hoot-command> --debug <other-hoot-command-parameters>
* Working directory should be: $HOOT_HOME
8 Open the test class source file and click F5

If you see a message like "No debugger found...":
* Tools -> Options
* Select Build & Run from left side panel
* Click Kits tab
* Click on "Desktop (default)" (or other name), with an exclamation mark near it
* Click "Set as Default" (or "Make Default").
* Set "Debugger" to "System GDB at /usr/bin/gdb"

=== Hootenanny Services and UI

You will definitely need to use an IDE to develop the Java services code.  Using an IDE to develop the Javascript UI code is optional.  These instructions outline how to use the Eclipse IDE.

==== Install Eclipse

This only needs to be installed if you will be doing work on the Hootenanny web services Java code.

There are two ways you can do this:

===== Manual Install

The advantage to this method is you get everything you need for web development in this install package.

* link:$$http://www.eclipse.org/downloads/$$[Download Eclipse IDE for Java EE Developers Linux 64 bit] (The version at the time of this update is Luna)
* Extract the compressed file
------
cd /opt/ && sudo tar -zkvf ~/Downloads/eclipse-*.tar.gz
------
* Launch eclipse from the command line or create launcher shortcut for Eclipse (optional)
* To create launcher, copy/paste below to */usr/share/applications/eclipse.desktop*
------
[Desktop Entry]
Name=Eclipse 4
Type=Application
Exec=/opt/eclipse/eclipse
Terminal=false
Icon=/opt/eclipse/icon.xpm
Comment=Integrated Development Environment
NoDisplay=false
Categories=Development;IDE;
Name[en]=Eclipse
------

===== Aptitude Install

The advantage to this method is that you're using the package manager to keep things nice and neat.  The disadvantage is there are some extra manual steps required to get tools needed for web development.

 * *Install from Synaptic*
 ** +eclipse+ (and the dependencies it asks for)
 ** +eclipse-cdt+  (this gives you c++ development & Visual Studio style keystrokes)
 ** +eclipse-jgit+ (for eventual GIT source control) *Note:* I use the EGit Eclipse software package instead when I want to use git from within Eclipse, although some tasks are still better done from the git command line (BDW).
 * *If you are unable to see any software listed in the Available Software when attempting the steps below, try the following*:
 ** Close Eclipse.
 ** Find a file named .metadata/.plugins/org.eclipse.equinox.p2.ui/dialog_settings.xml in your workspace.
 ** Open the file with a text editor and find a section named AvailableIUsPage.
 ** Remove the following strings:
------
<item value="0" key="AvailableVersionColumnWidth"/>
<item value="0" key="AvailableNameColumnWidth"/> 
------
 ** Save the file and launch Eclipse.

==== Install Java EE Developer Tools

 * From Help->Install New Software, select _Work With: All Available Sites_ - It make take awhile to download all the available software.
 * Select:
 ** +Eclipse Java EE Developer Tools+
 ** +Maven Plugin+
 ** +JST Server Adapters Extensions+
 ** *TODO: there are others*
 * After installation, restart Eclipse.

==== Configure Eclipse

* Go to Window -> Preferences -> Java -> Installed JRE's to make sure your JDK is correctly set to: +/usr/lib/jvm/oracle_jdk8/+.
* Set your tab spacing to 2 spaces.
* See "steps 7 and above here":https://127.0.0.1:9443/redmine/projects/mrgeo/wiki/DeveloperDocumentationBuildEnvironment2#Eclipse for some optional Eclipse configuration steps to make it behave more nicely. (Optional)
* *TODO: Set up source code formatting in eclipse*
* Install the Tomcat Server (Skip if not doing density tiles):
** Find Windows -> Show view -> Other  and find Server -> Servers (select that)
** Right-click the Servers tab -> "Add a new server"
** Select "Tomcat v8.0 Server".  Click "Next".
** Browse to the installation directory at /usr/share/tomcat8 Click "Next".
** Add the hoot-services project to the configuration.  Click "Finish".
* *TODO: This isn't working. (#4630)* To serve up the Density Raster tile images, the Tomcat server has to be configured with a static image directory.  From the Navigator or Project Explorer tab, open the "Servers" -> "Tomcat v6.0 Server at localhost-config" -> server.xml Then, under the <Host> section add: 
------
<Context docBase="/your/path/to/hoot/ingest/processed" path="/static" />
------

==== Load Projects into *_Eclipse_*

These are the steps to load projects into Eclipse.

Hoot Services (hoot-services) - Web services that expose OSM data editing and core Hootenanny 
functionality via REST, as well as Hootenanny data via WFS.

* cd to $HOOT_HOME and +make eclipse+.  This will create the hoot-services Eclipse .project file(s). Verify in $HOOT_HOME/hoot-service a .project dir.
* In Eclipse, import the hoot-services project:
** From _File->import->General->Existing Projects into Workspace_ 
** In "Select root directory", Browse to the top directory of the project and import it.

Hoot UI (hoot-ui) - Hootenanny customized version of the iD OSM editor.  No .project file is automatically created for the hoot-ui project.  It is a Javascript project, so you only need to create a .project file for it if you wish to view the iD Javascript code inside Eclipse alongside the services Java code (optional).

* Load hoot-ui 
** In Project Explorer pane, right click: New -> Dynamic Web Project
** Create a project in any location you desire and use the project name "hoot-ui"
** Select all the default to create the project
** Copy $HOOT_HOME/hoot-ui's contents into the Eclipse project path: hoot-ui/WebContent - *NOTE:* This copy will have to be made every time you update hoot-ui from the source repository.
* Set up the Tomcat Server
** Stop any existing Tomcat server you are running as a service:
------
sudo service tomcat8 stop
------
** Select Window -> Show View -> Servers
** Right-click in the dialog, New -> Server
** Select "Tomcat v8.0 Server" and Click Next.  Select the "Tomcat v8.0" server.  Even though you already have Tomcat installed, it may then force you to click the "Download and install" button. ( link:$$http://stackoverflow.com/questions/13423593/eclipse-4-2-juno-cannot-create-a-server-using-the-selected-type-in-tomcat-7$$[this] may be helpful.)
** Add the hoot-services and hoot-ui projects to the list of configured projects and click Finish.
** Right-click the hoot-services Java project, Debug As -> Debug Configurations
** Select "Apache Tomcat" from the list on the left.
** Click the New Launch Configuration button
** Name the new configuration "hoot-services"
** Click the Classpath tab
** Left click User Entries
** Click Add External Jars
** Add the following jars if they are not already present:
*** /usr/share/tomcat8/bin/bootstrap.jar
*** /usr/lib/jvm/oracle_jdk8/lib/tools.jar
*** Click the Arguments tab
*** Program arguments should contain the text:
------
start
------
*** VM arguments should contain text similar to:
------
-Dcatalina.base="/home/bwitham/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0" -Dcatalina.home="/usr/share/tomcat8" -Dwtp.deploy="/home/bwitham/workspace/.metadata/.plugins/org.eclipse.wst.server.core  /tmp0/wtpwebapps" -Djava.endorsed.dirs="/usr/share/tomcat8/endorsed"
------
where "/home/bwitham/workspace" should be replaced by your Eclipse workspace directory root.
** Click Apply and Close.
** Right-click the hoot-ui project, Debug As -> Debug Configurations
** Select "Apache Tomcat" from the list on the left.
** Click the New Launch Configuration button
** Name the new configuration "hoot-ui"
** Click Apply and Close.

==== Debugging within Eclipse

* Stop any existing Tomcat server you are running as a service:
------
sudo service tomcat8 stop
------
* Launch hoot-services in debug mode by right-click on the project and select "Debug as"->"Debug on Server"   You should see the Tomcat server startup logging in the console view.  The only error you should see at this time is the one described in #2738, which will eventually be fixed.
* hoot-services should start and load all the REST/Node.js services.  If you see class not found errors, your Tomcat debug environment probably is not set up properly...see the troubleshooting guide.
* From a browser, you should be able to navigate to http://localhost:8080/hoot-services/info/about/servicesVersionInfo and see some diagnostic XML.
* From a browser, you should be able to navigate to http://localhost:8080/hoot-ui/#background=Bing&map=17.20/47.43525/6.77106 and see the user interface (substitute any map coordinates and zoom level that you want).
* Debug the services (debugging the UI not covered in these instructions) by settting a breakpoint anywhere in the hoot-services classes to capture incoming requests. For example:
** In "hoot-services"->"src/main/java/hoot/services/controllers/info/AboutResource.java"
** Place a checkpoint in the endpoint for /servicesVersionInfo in the function getServicesVersionInfo().
** Navigate to http://localhost:8080/hoot-services/info/about/servicesVersionInfo and execution will stop at that checkpoint.

==== Running Unit and Integrations Test from Eclipse

Sometimes running these from inside Eclipse is more convenient than doing it from the command line.  The Hootenanny Java test environment is very similar to the link:$$https://insightcloud.digitalglobe.com/redmine/projects/mrgeo/wiki/UnitTests$$[MrGeo Java test environment].  Reading that documentation should tell you what you need to know.  In a nutshell, right-clicking tests under src/test/java and selecting Run As -> JUnit test is what you want to do.

