
== Hootenanny Development Environment Setup Instructions

This document contains the current set of instructions to install the Hootenanny developer build environment within a VirtualBox virtual machine running Ubuntu 14.04.  An alternative more streamlined approach to installing Hootenanny can be taken using the Vagrant file instructions provided in <<HootenannyVagrantSetup>> but note that this has been fairly recently introduced and thus not thoroughly tested.

=== External Dependencies

These steps often require additional assistance so it's best to complete these first.

=== Update Host OS

. `sudo apt-get update`
. `sudo apt-get upgrade`
. `sudo apt-get dist-upgrade`
. `sudo reboot`

=== Install VirtualBox

. `sudo apt-get install wget ca-certificates`
. `sudo sh -c "echo 'deb http://download.virtualbox.org/virtualbox/debian '$(lsb_release -cs)' contrib non-free' > /etc/apt/sources.list.d/virtualbox.list"`
. `wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -`
. `sudo apt-get update`
. `sudo apt-get install virtualbox-4.3 dkms`

=== Build VM

==== Download ISO

Download the ISO image for the latest 64-bit LTS release of 64-bit Ubuntu (14.04 as of this writing) from http://www.ubuntu.com/download/desktop.

[[CreateHootVM]]
==== Create VM

. Launch VirtualBox 
. Click the `New` button
. Name and operating system
.. Name: can be anything
.. Type: `Linux`
.. Version: `Ubuntu (64-bit)`
.. Click `Next`
. Memory
.. Memory Size: `16384 MB`
.. Click `Next`
. Hard drive
.. Select `Create a virtual hard drive now`
.. Click `Create`
. Hard drive file type
.. Leave the option at `VDI` 
.. Click `Next`
. Storage on physical hard drive
.. Select `Fixed size`
.. Click `Next`
. File Location and size
.. Set name to `OS Disk`
.. Change size to `40.00 GB`
.. Click `Create`
.. Wait for drive to build (takes 3-4 minutes)

==== Configure VM

. Right click on the new VM and select `Settings...`
. Select `General`
.. Click the `Advanced` Tab
... Set `Shared Clipboard` to `Bidirectional`
. Select 'System`
.. Click the `Processor` tab
... Increase `Processors` to 4
. Select `Network`
.. Under `Adapter 1` set `Attached to` to `Bridged adapter`
.. Expand `Advanced`
... Change adapter type to `Paravirtualized Network (virtio-net)`
. Click `OK`

==== Install Ubuntu

. Click `Start`
. Under `Select start-up disk` browse to the Ubuntu 64-bit LTS ISO image you downloaded previously
.. Click `Open`
. In the `Welcome` window, select `Install Ubuntu`
. In the `Preparing to install Ubuntu` window, click `Continue`
. In the `Installation type` window, select `Erase disk and install Ubuntu` then click `Install Now`
. Select the proper timezone then click `Continue`
. Select proper keyboard layout then click `Continue`
. Who are you?
.. Input values for all the questions asked then click `Continue`
. Reboot the VM

==== Update OS

. Launch a terminal
. Run `sudo apt-get update`
. Run `sudo apt-get upgrade`
. Run `sudo apt-get dist-upgrade`
. Run `apt-get install ntp`
. Run `reboot`

==== Install VirtualBox Guest Additions

. In the guest OS, press `RIGHT Ctrl + D`
. When the window pops up asking if the VBOXADDITIONS program should be allowed to run, answer yes
. Restart the guest OS
. After rebooting, you can resize the window for the guest OS and the resolution will automatically be updated to match the window size

=== Install Dependencies

==== PostgreSQL 9.1 and PostGIS 1.5

. `sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ '$(lsb_release -cs)'
-pgdg main' > /etc/apt/sources.list.d/pgdg.list"`
. `wget --quiet -O- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -`
. `sudo apt-get update`
. `sudo apt-get upgrade`
. `wget http://launchpadlibrarian.net/86690107/postgresql-9.1-postgis_1.5.3-2_amd64.deb`
. `sudo dpkg -i postgresql-9.1-postgis_1.5.3-2_amd64.deb`
. `sudo apt-get -f install` (fixes missing dependency of postgis 1.5 by installing postgresql 9.1. 9.1 is installed listening on the default port, 5432. It unfortunately also installs postgres 9.4 but we remove that cleanly in the following steps, while leaving postgres 9.1 untouched)
. `sudo apt-get purge postgresql-9.4 postgresql-client-9.4 postgresql-9.4-postgis-scripts`

==== Items from apt repo

---------------
sudo apt-get purge automake
sudo apt-get remove qt5-default octave postgresql-9.3
sudo apt-get autoremove
--------------

. `sudo` `apt-get` `install` `texinfo` `g++` `libicu-dev` `libqt4-dev`
  `git-core` `libboost-dev` `libcppunit-dev` `libcv-dev` `libopencv-dev`
  `libopencv-core-dev` `libopencv-imgproc-dev`
  `libgdal-dev` `liblog4cxx10-dev` `libnewmat10-dev` `libproj-dev` `python-dev`
  `libjson-spirit-dev` `automake1.11` `protobuf-compiler` `libprotobuf-dev` `make` `gdb`
  `libqt4-sql-psql` `libgeos-dev` `libgeos++-dev` `swig` `lcov` `tomcat6` `openjdk-7-jdk`
  `openjdk-7-dbg` `maven` `libstxxl-dev` `zip` `nodejs-dev` `doxygen` `xsltproc`
  `asciidoc` `pgadmin3` `curl` `npm` `postgresql-9.1-postgis` `libxerces-c-dev` `libxerces-c28` `libglpk-dev`
  `libboost-all-dev` `source-highlight` `texlive-lang-all` `graphviz` `w3m``libhdf5-dev` `libgif-dev`
  `gfortran` `python-setuptools` `python` `python-pip` `git` `postgresql-contrib-9.1`
  `ccache` `libogdi3.2-dev` `gnuplot` `python-matplotlib` `postgresql-server-dev-9.1` `libxml-simple-perl`
+

-------------
sudo apt-get autoremove
--------------

NOTE: In some cases, the package `libqt4-dev` may not install properly due to unmet dependencies. If an error message appears when attempting to compile Hoot core, it may be useful to remove all of the unmet dependencies listed when executing `sudo apt-get install libqt4-dev`, then remove `libqt4-dev` (`sudo apt-get remove libqt4-dev`) and reinstall without the unmet dependencies present.  Typically these will get installed by the dependent package.
+
. Modify `~/.profile` and append the following to the bottom of the file: 
+
----
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
----
+
. Run `source ~/.profile`
. `sudo update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10`

==== GDAL/FileGDB

. `wget http://download.osgeo.org/gdal/1.10.1/gdal-1.10.1.tar.gz`
. `tar zxvfp gdal-1.10.1.tar.gz`
. `wget http://downloads2.esri.com/Software/FileGDB_API_1_3-64.tar.gz`
. `cd /usr/local`
. `sudo tar xvfp FileGDB_API_1_3-64.tar.gz`
. `sudo vi /etc/ld.so.conf`
.. Modify the file to contain the following:
+
----
include /etc/ld.so.conf.d/*.conf
/usr/local/FileGDB_API/lib
/usr/local/lib
----
+
. `export PATH=/usr/local/lib:/usr/local/bin:$PATH`
. `cd <path_to_gdal-1.10.1_directory>`
. `sudo ./configure --with-fgdb=/usr/local/FileGDB_API --with-pg=/usr/bin/pg_config 
--with-python`
. `sudo make -j5`
. `sudo make install`
. `cd swig/python`
. `python setup.py build`
. `sudo python setup.py install`
. `sudo ldconfig`
. `gdal-config --version` (make sure you see version 1.10.1)
. `ogrinfo --formats` (confirm "FileGDB" and "PostgreSQL" are both listed)

==== SSH

. `sudo apt-get install openssh-server`
. `cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys`
. `chmod 600 ~/.ssh/authorized_keys`
. `ssh localhost`
. Type `yes` to accept fingerprint
. Confirm that you log in successfully
. `exit`

==== Firewall 

Run `sudo iptables -L -n` and confirm that all three chains have a policy set to `ACCEPT` and no rules under them. If that isn't the case, you'll need to disable your firewall which is out of scope for this document.

==== Hadoop

. `wget https://archive.apache.org/dist/hadoop/core/hadoop-0.20.2/hadoop-0.20.2.tar.gz`
. `cd /usr/local`
. `sudo tar zxvf ~/Downloads/hadoop-0.20.2.tar.gz`
. `sudo ln -s hadoop-0.20.2 hadoop`
. `cd hadoop`
. `sudo find . -type d -exec chmod a+rwx {} \;`
. `sudo find . -type f -exec chmod a+rw {} \;` (last two steps make permissions super lax which eclipse needs)
. Populate the `<configuration>` section of `/usr/local/hadoop/conf/core-site.xml` to contain the following (will be empty to start with):
+
----
<configuration>
  <property>
    <name>fs.default.name</name>
    <value>hdfs://localhost:9000/</value>
  </property>
</configuration>
----
+
. Modify `<configuration>` section in `/usr/local/hadoop/conf/mapred-site.xml` to contain the following (will be empty to start with):
+
----
<configuration>
  <property>
    <name>mapred.job.tracker</name>
    <value>localhost:9001</value>
  </property>
  <property>
    <name>mapred.job.tracker.http.address</name>
    <value>0.0.0.0:50030</value>
  </property>
  <property>
    <name>mapred.task.tracker.http.address</name>
    <value>0.0.0.0:50060</value>
  </property>
  <property>
    <name>mapred.child.java.opts</name>
    <value>-Xmx2048m</value>
  </property>
  <property>
    <name>mapred.map.tasks</name>
    <value>17</value>
  </property>
  <property>
    <name>mapred.tasktracker.map.tasks.maximum</name>
    <value>4</value>
  </property>
  <property>
    <name>mapred.tasktracker.reduce.tasks.maximum</name>
    <value>2</value>
  </property>
  <property>
    <name>mapred.reduce.tasks</name>
    <value>1</value>
  </property>
</configuration>
----
+
. Modify the `<configuration>` section of `/usr/local/hadoop/conf/hdfs-site.xml` to read (will be empty to start with):
+
----
<configuration>
  <property>
    <name>dfs.secondary.http.address</name>
    <value>0.0.0.0:50090</value>
  </property>
  <property>
    <name>dfs.datanode.address</name>
    <value>0.0.0.0:50010</value>
  </property>
  <property>
    <name>dfs.datanode.http.address</name>
    <value>0.0.0.0:50075</value>
  </property>
  <property>
    <name>dfs.datanode.ipc.address</name>
    <value>0.0.0.0:50020</value>
  </property>
  <property>
    <name>dfs.http.address</name>
    <value>0.0.0.0:50070</value>
  </property>
  <property>
    <name>dfs.datanode.https.address</name>
    <value>0.0.0.0:50475</value>
  </property>
  <property>
    <name>dfs.https.address</name>
    <value>0.0.0.0:50470</value>
  </property>
  <property>
    <name>dfs.replication</name>
    <value>2</value>
  </property>
  <property>
    <name>dfs.umaskmode</name>
    <value>002</value>
  </property>
  <property>
    <name>fs.checkpoint.dir</name>
    <value>/hadoop/dfs/namesecondary</value>
  </property>
  <property>
    <name>dfs.name.dir</name>
    <value>/hadoop/dfs/name</value>
  </property>
  <property>
    <name>dfs.data.dir</name>
    <value>/hadoop/dfs/data</value>
  </property>
</configuration>
----
+
. Modify `/usr/local/hadoop/conf/hadoop-env.conf`. Change the line that reads:
+
----
# export JAVA_HOME=/usr/lib/j2sdk1.5-sun
----
+
to read
+
----
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
----
+
. Add the following lines to `~/.profile`
+
----
export HADOOP_HOME=/usr/local/hadoop
export PATH=$PATH:$HADOOP_HOME/bin
----
+
. `source ~/.profile`
. Modify `/usr/local/hadoop/src/c++/pipes/impl/HadoopPipes.cc`. Add the following line to the section of `#include` statements: `#include <unistd.h>`
. Format the namenode (make sure to press CAPITAL Y for yes -- lower case y causes a failure)
+
----
sudo mkdir -p /hadoop/dfs/name/current
sudo chmod -R 777 /hadoop
hadoop namenode -format
----
+
. `$HADOOP_HOME/bin/start-all.sh` should generate the following output:
+
----
starting namenode, logging to /usr/local/hadoop/bin/../logs/hadoop-tott-namenode-tott-VirtualBox.out
localhost: starting datanode, logging to /usr/local/hadoop/bin/../logs/hadoop-tott-datanode-tott-VirtualBox.out
localhost: starting secondarynamenode, logging to /usr/local/hadoop/bin/../logs/hadoop-tott-secondarynamenode-tott-VirtualBox.out
starting jobtracker, logging to /usr/local/hadoop/bin/../logs/hadoop-tott-jobtracker-tott-VirtualBox.out
localhost: starting tasktracker, logging to /usr/local/hadoop/bin/../logs/hadoop-tott-tasktracker-tott-VirtualBox.out
----
+
. `hadoop fs -ls /` should generate the following output:
+
----
Found 1 items
drwxr-xr-x   - tott supergroup          0 2015-02-27 13:45 /tmp
----
+
. Visit `http://localhost:50030` 
.. Verify the `Nodes` field under `Cluster Summary` reads 1
. Visit `http://localhost:50070`
.. Verify the `DFS Remaining` value is fairly close to the available space on `/dev/sda1` as reported by a `df -Hs` command
.. Verify the `Live Nodes` field is 1
.. Verify the `Dead Nodes` field is 0
. `cd /usr/local/hadoop`
. Run `hadoop jar ./hadoop-0.20.2-examples.jar pi 2 100` and verify the output is similar to the following:
----
Number of Maps  = 2
Samples per Map = 100
Wrote input for Map #0
Wrote input for Map #1
Starting Job
15/02/27 15:05:33 INFO mapred.FileInputFormat: Total input paths to process : 2
15/02/27 15:05:34 INFO mapred.JobClient: Running job: job_201502271345_0001
15/02/27 15:05:35 INFO mapred.JobClient:  map 0% reduce 0%
15/02/27 15:05:43 INFO mapred.JobClient:  map 100% reduce 0%
15/02/27 15:05:55 INFO mapred.JobClient:  map 100% reduce 100%
15/02/27 15:05:57 INFO mapred.JobClient: Job complete: job_201502271345_0001
15/02/27 15:05:57 INFO mapred.JobClient: Counters: 18
15/02/27 15:05:57 INFO mapred.JobClient:   Job Counters 
15/02/27 15:05:57 INFO mapred.JobClient:     Launched reduce tasks=1
15/02/27 15:05:57 INFO mapred.JobClient:     Launched map tasks=2
15/02/27 15:05:57 INFO mapred.JobClient:     Data-local map tasks=2
15/02/27 15:05:57 INFO mapred.JobClient:   FileSystemCounters
15/02/27 15:05:57 INFO mapred.JobClient:     FILE_BYTES_READ=50
15/02/27 15:05:57 INFO mapred.JobClient:     HDFS_BYTES_READ=236
15/02/27 15:05:57 INFO mapred.JobClient:     FILE_BYTES_WRITTEN=170
15/02/27 15:05:57 INFO mapred.JobClient:     HDFS_BYTES_WRITTEN=215
15/02/27 15:05:57 INFO mapred.JobClient:   Map-Reduce Framework
15/02/27 15:05:57 INFO mapred.JobClient:     Reduce input groups=4
15/02/27 15:05:57 INFO mapred.JobClient:     Combine output records=0
15/02/27 15:05:57 INFO mapred.JobClient:     Map input records=2
15/02/27 15:05:57 INFO mapred.JobClient:     Reduce shuffle bytes=28
15/02/27 15:05:57 INFO mapred.JobClient:     Reduce output records=0
15/02/27 15:05:57 INFO mapred.JobClient:     Spilled Records=8
15/02/27 15:05:57 INFO mapred.JobClient:     Map output bytes=36
15/02/27 15:05:57 INFO mapred.JobClient:     Map input bytes=48
15/02/27 15:05:57 INFO mapred.JobClient:     Combine input records=0
15/02/27 15:05:57 INFO mapred.JobClient:     Map output records=4
15/02/27 15:05:57 INFO mapred.JobClient:     Reduce input records=4
Job Finished in 23.716 seconds
Estimated value of Pi is 3.12000000000000000000
tott@tott-VirtualBox:/usr/local/hadoop$ 
----

==== Hadoop Configuration After Upgrading from Java 6 to 7

If for some reason you had Java 6 previously installed and upgraded to Java 7 as a result of these 
instructions, you may have to perform the following steps.

. Update JAVA_HOME in ~/.profile: export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
. Update JAVA_HOME in $HADOOP_HOME/conf/hadoop-env.sh: export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
. Run the following:
----
cd /lib
sudo ln -s /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server/libjvm.so libjvm.so
cd /lib64
sudo ln -s /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server/libjvm.so libjvm.so
cd /x86_64-linux-gnu
sudo ln -s /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server/libjvm.so libjvm.so
sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/java 1
sudo update-alternatives --config java
sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/javac" 1
sudo update-alternatives --config javac
$HADOOP_HOME/bin/stop-all.sh && $HADOOP_HOME/bin/start-all.sh
----

==== Node.js modules

. `sudo npm config set registry http://registry.npmjs.org/`
. `sudo npm install -g xml2js htmlparser imagemagick mocha@1.20.1 express@3.1.2 async html-to-text restler`
. Add the line `export NODE_PATH=/usr/local/lib/node_modules` to `~/.profile`
. `source ~/.profile`

==== hstore

. `sudo -u postgres psql template1 -c 'create extension hstore;'`

==== Services Database

. `sudo -u postgres createuser --superuser --pwprompt hoot `enter default pw'
. `sudo -u postgres createdb hoot --owner=hoot`
. `sudo -u postgres createdb wfsstoredb --owner=hoot`
. `sudo vi /etc/postgresql/9.1/main/pg_hba.conf`
.. Modify the line reading `local  all  all  peer` to read `local  all  all  md5`
. `sudo service postgresql restart`
. `psql hoot hoot`
.. Confirm that the system displays the `hoot=#` prompt, rather than the following error: `psql: FATAL:  database "hoot" does not exist`
. `hoot=# \q`
. `psql wfsstoredb hoot`
.. Confirm that the system displays the `wfsstoredb=#` prompt, rather than the following error: `psql: FATAL:  database "wfsstore" does not exist`
. `wfsstoredb=# \q`

==== postgis 

Execute the following SQL statements

----
sudo -u postgres psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='wfsstoredb'" 
sudo -u postgres psql -d wfsstoredb -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
sudo -u postgres psql -d wfsstoredb -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql
sudo -u postgres psql -d wfsstoredb -c "GRANT ALL on geometry_columns TO PUBLIC;"
sudo -u postgres psql -d wfsstoredb -c "GRANT ALL on geography_columns TO PUBLIC;"
sudo -u postgres psql -d wfsstoredb -c "GRANT ALL on spatial_ref_sys TO PUBLIC;"
----

=== PostgreSQL Tuning

. `sudo -u postgres vi /etc/postgresql/9.1/main/postgresql.conf` 
.. `max_connections`: increase from `100` to `1000`
.. `shared_buffers`: increase from `24M` to `1024M`
.. `max_files_per_process`: uncomment the line that sets it to `1000`
.. `work_mem`: uncomment, change value from `1MB` to `16MB`
.. `maintenance_work_mem`: uncomment and change value from `16MB` to `256MB`
.. `checkpoint_segments`: uncomment and change value from `3` to `20`
.. `autovacuum`: uncomment and change value from `on` to `off`
.. Save and exit file
. Check shared memory limits in OS
.. `sysctl -e kernel.shmmax`
... If the value is not `1173741824`, run `sudo sysctl -w kernel.shmmax=1173741824`
.. `sysctl -e kernel.shmall`
... If the value is not `2097152`, run `sudo sysctl -w kernel.shmall=2097152`
.. `sudo vi /etc/sysctl.conf`
... Add the following lines at the bottom of the file:
+
---- 
kernel.shmmax=1173741824
kernel.shmall=2097152
----
+
. `sudo service postgresql restart`

=== Get Hootenany Source Code

Find Hootenanny on GitHub and then:

. `cd ~`
. `git config --global user.name "<First> <Last>"`
. `git config --global user.email <email>`
. `git clone <repo>:hootenanny hoot`
. `cd hoot`
. `git submodule init`
. `git submodule update`

=== Configure and Build

. `cd ~/hoot`
. `cp ./conf/DatabaseConfig.sh.orig ./conf/DatabaseConfig.sh`
. `source ./SetupEnv.sh`
. `aclocal` (ignore warning)
. `autoconf`
. `autoheader`
. `automake`
. `./configure --with-services --with-rnd`
. `cp LocalConfig.pri.orig LocalConfig.pri`
. `vi LocalConfig.pri`
.. Add the following line at the bottom of the file:
+
----
QMAKE_CXX=ccache g++
----
+

. `make -sj5` 

----
Please note if you need add new table or remove table from hoot db, please make sure to modify DB_ALLOWED_TABLES variable in DatabaseConfig.sh.orig'
----

=== Configuration

==== Services Local Configuration

You can permanently override services configuration settings in your development environment by 
adding a local.conf file to hoot-services/src/main/resources/conf.  Override any number of settings
from hoot-services/src/main/resources/conf/hoot-services.conf in this file.

=== Tests

==== Unit Tests

`make -sj<thread count> test`

==== Integration Tests

`make -sj<thread count> test-all`
==== Test Running Tips

===== Services Job Poller Timeout

You can significantly speed up the time the services test take to execute by adjusting the job
status poller timeout.  The setting is configured to run on the build servers without issues, but
can be optimized for some developer environments.  In 
hoot-services/src/main/resources/conf/local.conf adjust the testJobStatusPollerTimeout setting
to something lower than the default value (value in milliseconds):

===== Disabling Warning Messages in the C++ Unit Tests

Some tests, by their very nature, will log warning messages to the Hootenanny log when run (even 
when tests are run in silent mode).  To avoid cluttering up the display during testing, you can 
temporarily disable the log for your test.  Do this by referencing the DisableLog class at the 
beginning of your test.  An example:
------------
class BuildingOutlineUpdateOpTest : public CppUnit::TestFixture
{
  CPPUNIT_TEST_SUITE(BuildingOutlineUpdateOpTest);
  CPPUNIT_TEST(runSelfIntersectingRelationTest);
  CPPUNIT_TEST_SUITE_END();

public:

  void runSelfIntersectingRelationTest()
  {
    DisableLog dl;

    ...
  }

};
------------

-----------
testJobStatusPollerTimeout=250
-----------

=== Hootenanny Services and UI

You will need to use an IDE to develop the Java services code.  Using an IDE to develop the JavaScript UI code is optional.  The following instructions outline how to install and configure the Eclipse IDE for Hootenanny.

==== Install Eclipse
. link:http://www.eclipse.org/downloads/[Download Eclipse IDE for Java EE Developers Linux 64 bit] (The version at the times of this update is Luna).
. Extract the compressed file:
+
-----------
cd /opt/ && sudo tar -zkvf ~/Downloads/eclipse-*.tar.gz
-----------
+
. Launch eclipse from the command line or create launcher shortcut for Eclipse (optional).
. To create launcher, copy/paste below to */usr/share/applications/eclipse.dekstop*.
+
-----------
[Desktop Entry]
Name=Eclipse 4
Type=Application
Exec=/opt/eclipse/eclipse
Terminal=false
Icon=/opt/eclipse/icon.xpm
Comment=Integrated Development Environment
NoDisplay=false
Categories=Development;IDE;
Name[en]=Eclipse
-----------


==== Install Java EE Developer Tools
. From Help -> Install New Software, select 'Work With: All Available Sites'.  It may take awhile to download all the available software.
.. Select:
... Eclipse Java EE Developer Tools
... JST Server Adapters
... JST Server Adapters Extension
. After installation, restart Eclipse.

==== Configure Eclipse
. Go to Window -> Preferences -> Java -> Installed JRE's to make sure your JDK is correctly set to:
+
-----------
/usr/lib/jvm/java-6-openjdk-amd64
-----------
+
. Set your tab spacing to 2 spaces.

==== Load Projects into Eclipse
 
===== Hoot Services
'Hoot Services (hoot-services)': Web services that expose OSM data editing, core Hootenanny functionality via WPS, and Hootenanny data via WFS.

. Create hoot-services Eclipse .project file(s) if this has not yet been done.
+
-----------
cd $HOOT_HOME
make eclipse
-----------
+
. Verify that $HOOT_HOME/hoot-service is a .project directory.
. In Eclipse, import the hoot-services project:
.. File -> Import -> General -> Existing Projects into Workspace.
.. Select Root Directory: Browse to the top directory of the project and import it.

===== Hoot UI
'Hoot UI (hoot-ui)': Hootenanny customized version of the iD OSM editor.  There is no .project file automatically created for the hoot-ui project.  It is a customized JavaScript project, so you only need to create a .project file for it if you wish to view the iD JavaScript code inside Eclipse alongside the services Java code (optional).

. Load hoot-ui
.. In the Project Explorer pane, right-click: New -> Dynamic Web Project.
.. Create a project in any location you desire and use the project name "hoot-ui".
.. Select/Keep defaults to create the project.
.. Copy $HOOT_HOME/hoot-ui's contents into the Eclipse project path: 'hoot-ui/WebContent'.
.. *NOTE:* This copy will have to be made every time you update hoot-ui from the source repository.

. Set up the Tomcat Server:
.. Stop any existing Tomcat server you are running as a service:
+
-----------
sudo service tomcat6 stop
-----------
+
.. Select Window -> Show View -> Servers.
.. Right-click in the dialog window and select New -> Server.
.. Select "Tomcat v6.0 Server" and click Next.  Select the "Tomcat v6.0" server.  You may be foreced to click the "Download and Install" button even if you have Tomcat installed.
.. Add the hoot-services and hoot-ui projects to the list of configured and click Finish.
.. Right-click the hoot-services Java project and select Debug As -> Debug Configurations.
.. Select "Apache Tomcat" from the list.
.. Click the "New Launch Configuration" button.
.. Name the new configuration "hoot-services".
.. Click the Claspath tab.
.. Left-click "User Entries" and click "Add External Jars".
.. Add the following jars if they are not already present:
... /usr/share/tomcat6/bin/bootstrap.jar
... /usr/lib/jvm/java-6-openjdk-amd64/lib/tools.jar

.. Click the Arguments tab
... Program arguments should contain the text:
+
-----------
start
-----------
+
... VM arguments should contain text similar to:
+
-----------
 -Dcatalina.base="/home/username/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0" -Dcatalina.home="/usr/share/tomcat6" -Dwtp.deploy="/home/username/workspace/.metadata/.plugins/org.eclipse.wst.server.core  /tmp0/wtpwebapps" -Djava.endorsed.dirs="/usr/share/tomcat6/endorsed" 
-----------
+
where "/home/username/workspace" should be replaced by the location of your Eclipse workspace directory root.

.. Click Apply and Close.
.. Right-click the hoot-ui project and select Debug As -> Debug Configurations.
.. Select "Apache Tomcat" from the list.
.. Click the "New Launch Configuration" button.
.. Name the new configuration "hoot-ui".
.. Click Apply and Close.

==== Debugging within Eclipse
. Stop any existing Tomcat server you are running as a service:
+
-----------
sudo service tomcat6 stop
-----------
+
. Launch hoot-services in debug mode by right-click on the project and select Debug as -> Debug on Server. You should see the Tomcat server startup logging in the console view. 
. hoot-services should start and load all the WPS services.  If you see "Class not found" errors, your Tomcat debug environment is probably not set up properly.  
. From a browser, you should be able to navigate to link:http://localhost:8080/hoot-services/info/about/servicesVersionInfo[http://localhost:8080/hoot-services/info/about/servicesVersionInfo] and see some diagnostic XML.
. From a browser, you should be able to navigate to link:http://localhost:8080/hoot-ui/#background=Bing&map=17.20/47.43525/6.77106[http://localhost:8080/hoot-ui/#background=Bing&map=17.20/47.43525/6.77106] and see the user interface.  Substitute any map coordiantes and zoom to the level you want.
. Debug the services (debugging the UI is not covered in these instructions, and could be completed in the client using the browser's Developer Tools) by setting up a breakpoint anywhere in the hoot-services classes to capture incoming requests.

