
# If the silent flag is passed to make then make Maven quiet too.
ifneq (,$(findstring s,$(MAKEFLAGS)))
	MVN_QUIET="-q"
else
	HOOT_TEST_DIFF="--diff"
endif

SHELL=/bin/bash

# If you're adding another schema file be sure and update the archive target
# too.
#SCHEMA_FILES=plugins/script/tds40/schema/__init__.js plugins/script/tds61/schema/__init__.js plugins/script/mgcp/schema/__init__.js plugins/script/etds/rules/__init__.js plugins/script/etds61/rules/__init__.js plugins/script/etds61_osm/rules/__init__.js
SCHEMA_FILES=plugins/tds40_schema.js plugins/tds61_schema.js plugins/mgcp_schema.js plugins/etds_rules.js plugins/etds61_rules.js plugins/etds61_osm_rules.js plugins/tds61_full_schema.js

-include Makefile.inc

default: build

all: build
always:

build: js-make qt-make pp-build services-build model-build conf/words.sqlite \
	conf/WordsAbridged.sqlite osmapidb

clean: Makefile.qmake services-clean
	$(MAKE) -f Makefile.qmake clean
	rm -f `find . -name Makefile.qmake`
	rm -f `find . -name \*.gcov`
	rm -f lib/*
	rm -f pretty-pipes/lib/*
	rm -rf pretty-pipes/pp-lib/target/
	rm -rf test-output/*
	rm -rf tgs/libTgs.a
	rm -rf tmp/coverage
	rm -rf hoot-core/tmp/debug/* hoot-core-test/tmp/debug/* hoot-hadoop/tmp/debug/* tbs/tmp/debug/* hoot-rnd/tmp/debug/*
	rm -rf bin/*
	rm -f plugins/config.js
	rm -f $(SCHEMA_FILES)
	# The following bits are due to moving files in git. Since the Output.osm
	# file is written to the test-files/cases/**/ directory git won't remove
	# the directory. Doing this as part of clean will ensure that the 
	# directories are removed.
	# remove any empty test cases 
	find test-files/cases -type f -name Output.osm -exec rm {} \;
	# call this command 3 times b/c there may be sub-dirs that need deleteing.
	rm -rf `find test-files/cases -type d -empty`
	rm -rf `find test-files/cases -type d -empty`
	rm -rf `find test-files/cases -type d -empty`
	cd docs; $(MAKE) clean
	scripts/CleanOsmApiDB.sh

clean-db: services-clean-db

# start over as close to a new build as is reasonable
clean-all: clean clean-db

check: test
test: build ui-test services-test pp-test plugins-test 
	bin/HootTest $(HOOT_TEST_DIFF) --slow

docs: always HOOT_VERSION_FILE
	cd docs; $(MAKE)

test-quick: build services-test pp-test
	bin/HootTest $(HOOT_TEST_DIFF) --quick

test-all-no-core: ui-test build services-test-all pp-test plugins-test 

test-all: test-all-no-core
	bin/HootTest $(HOOT_TEST_DIFF) --glacial

licenses:
	scripts/UpdateAllCopyrightHeaders.sh

pp-build-jar: qt-make
ifneq ($(HADOOP_HOME),)
ifneq ($(JAVA_HOME),)
	cd pretty-pipes/pp-lib/ ; $(MAKE) -f Makefile.mvn build
endif
endif

pp-build: pp-build-jar
ifneq ($(HADOOP_HOME),)
ifneq ($(JAVA_HOME),)
	rm -f hs_err*
	rm -rf $$HOOT_HOME/local/lib/
	mkdir -p $$HOOT_HOME/local/lib/
	DEPS=`ldd bin/hoot.bin | grep $$HOME | grep -v $$HOOT_HOME | sed -e "s/.*=> //g" | sed -e "s/ (.*//g"`; \
	if [ "$$DEPS" != "" ]; then \
		cp $$DEPS $$HOOT_HOME/local/lib/; \
	fi ; \
	if [ -a "$$HOME/local/lib/libproj.so" ]; then \
		cp $$HOME/local/lib/libproj.so $$HOOT_HOME/local/lib/ ; \
	fi
endif
endif

pp-test:
ifneq ($(HADOOP_HOME),)
	cd pretty-pipes/pp-lib/ ; $(MAKE) -f Makefile.mvn test
endif

plugins-test:
	# Only run the plugins tests if mocha is installed.
	cd plugins; (command -v mocha &> /dev/null) && mocha test || echo Skipping mocha tests

ui-test:
ifeq ($(BUILD_UI),ui)
	cd hoot-ui; npm test #&> /dev/null
endif

pp-test-all:
ifneq ($(HADOOP_HOME),)
	cd pretty-pipes/pp-lib/ ; $(MAKE) -f Makefile.mvn test-all
endif

# Prepend HOOT_ to all config variables.
hoot-core/src/main/cpp/hoot/core/HootConfig.h: config.h
	echo "#ifndef __HOOT_CONFIG_H__" > hoot-core/src/main/cpp/hoot/core/HootConfig.h
	echo "#define __HOOT_CONFIG_H__" >> hoot-core/src/main/cpp/hoot/core/HootConfig.h
	/bin/sed -r -e 's/^(#[ \t]*define) /\1 HOOT_/' config.h >> hoot-core/src/main/cpp/hoot/core/HootConfig.h
	echo "#endif" >> hoot-core/src/main/cpp/hoot/core/HootConfig.h

hoot-core/src/main/cpp/hoot/core/util/ConfigDefaults.h: hoot-core/src/main/cpp/hoot/core/util/ConfigOptions.h
hoot-core/src/main/cpp/hoot/core/util/ConfigOptions.h: conf/ConfigOptions.asciidoc scripts/CreateConfigCode.py
	python scripts/CreateConfigCode.py conf/ConfigOptions.asciidoc hoot-core/src/main/cpp/hoot/core/util/ConfigOptions.h hoot-core/src/main/cpp/hoot/core/util/ConfigDefaults.h

plugins/config.js: conf/ConfigOptions.asciidoc scripts/CreateJsConfigCode.py
	python scripts/CreateJsConfigCode.py conf/ConfigOptions.asciidoc plugins/config.js

tgs/src/main/cpp/tgs/TgsConfig.h: config.h
	echo "#ifndef __TGS_CONFIG_H__" > tgs/src/main/cpp/tgs/TgsConfig.h
	echo "#define __TGS_CONFIG_H__" >> tgs/src/main/cpp/tgs/TgsConfig.h
	/bin/sed -r -e 's/^(#[ \t]*define) /\1 TGS_/' config.h >> tgs/src/main/cpp/tgs/TgsConfig.h
	echo "#endif" >> tgs/src/main/cpp/tgs/TgsConfig.h

conf/DatabaseConfig.sh: conf/DatabaseConfig.sh.orig
	# This will copy conf/DatabaseConfig.sh.orig to conf/DatabaseConfig.sh if necessary
	if [ ! -f conf/DatabaseConfig.sh ]; then echo "Using default database configuration. You can safely customize: conf/DatabaseConfig.sh"; cp conf/DatabaseConfig.sh.orig conf/DatabaseConfig.sh; else echo "Check your conf/DatabaseConfig.sh to see if it needs updating with conf/DatabaseConfig.sh.orig, if not just 'touch conf/DatabaseConfig.sh'"; false; fi

conf/LocalHoot.json: conf/LocalHoot.json.in conf/DatabaseConfig.sh
	export HOOT_HOME=`pwd`; scripts/ReplaceEnvironmentVariables.sh conf/LocalHoot.json.in conf/LocalHoot.json

# We now have different versions of the NFDD Schema that are built from Excel files:
# LTDSv40.csv.gz - Local TDS v4.0
# SUTDSv40.csv.gz - Specialized Urban TDS v4.0
# TDSv40.csv.gz - Full TDS v4.0
# The default is to use the LTDSv40 file so we can append to existing LTDS templates

# The Macro's are for Jason :-)

plugins/tds40_schema.js: scripts/ConvertTDSv40Schema.py conf/nfdd/LTDSv40.csv.gz
	mkdir -p $(@D)
	$^ > $@ || (rm -f $@ ; exit -1)

plugins/mgcp_schema.js: scripts/ConvertMGCPSchema.py conf/gait/MGCP4_SchemaInfo_GAIT21.txt.gz
	mkdir -p $(@D)
	$^ > $@ || (rm -f $@ ; exit -1)

# Build the TDS40 "english" rules
# This need to be full TDS so we have access to the full range of attributes
plugins/etds_rules.js: scripts/ConvertTDSv40English.py conf/nfdd/TDSv40.csv.gz
	mkdir -p $(@D)
	$^ > $@ || (rm -f $@ ; exit -1)


# TDSv61 is built from the TDSv60 spec with NGA's extensions
plugins/tds61_schema.js: scripts/ConvertTDSv61Schema.py conf/nfdd/TDSv60.csv.gz conf/nfdd/TDS_NGAv01.csv.gz
	mkdir -p $(@D)
	$< $(word 2,$^) $(word 3,$^) > $@ || (rm -f $@ ; exit -1)

# TDSv61 full schema is built from the TDSv60 spec with NGA's extensions. 
# This one has all of the Text Enumerations
plugins/tds61_full_schema.js: scripts/ConvertTDSv61Schema.py conf/nfdd/TDSv60.csv.gz conf/nfdd/TDS_NGAv01.csv.gz
	mkdir -p $(@D)
	$< --fullschema $(word 2,$^) $(word 3,$^) > $@ || (rm -f $@ ; exit -1)

# Build the TDS61 "To English" rules
plugins/etds61_rules.js: scripts/ConvertTDSv61Schema.py conf/nfdd/TDSv60.csv.gz conf/nfdd/TDS_NGAv01.csv.gz
	mkdir -p $(@D)
	$< --toenglish $(word 2,$^) $(word 3,$^) > $@ || (rm -f $@ ; exit -1)

# Build the TDS61 "From English" rules
plugins/etds61_osm_rules.js: scripts/ConvertTDSv61Schema.py conf/nfdd/TDSv60.csv.gz conf/nfdd/TDS_NGAv01.csv.gz
	mkdir -p $(@D)
	$< --fromenglish $(word 2,$^) $(word 3,$^) > $@ || (rm -f $@ ; exit -1)

# Build osmapi db
osmapidb:
	scripts/SetupOsmApiDB.sh

# Build automatically generated JS files
js-make: $(SCHEMA_FILES) plugins/config.js

# Only PoiModel.rf is being generated this way at this time. The older .arff
# files don't have the precision to recreate the exact model. That is a
# task for another time.
ARFFS=$(wildcard conf/*.arff.bz2)
RF_MODELS=$(ARFFS:.arff.bz2=.rf)
model-build: $(RF_MODELS)

# These are not cleaned b/c they take a long time to build and it would simply
# be unnecessary. Use the appropriate git command if you want everything
# cleaned.
conf/%.rf: conf/%.arff.bz2 qt-make
	[ $< -nt $@ ] && hoot build-rf $< $@ || true

qt-make: HOOT_VERSION_FILE Makefile.qmake hoot-core/src/main/cpp/hoot/core/HootConfig.h conf/LocalHoot.json tgs/src/main/cpp/tgs/TgsConfig.h hoot-core/src/main/cpp/hoot/core/util/ConfigOptions.h hoot-core/src/main/cpp/hoot/core/util/ConfigDefaults.h bin/hoot bin/HootTest
	$(MAKE) -f Makefile.qmake
	
services-build:	HOOT_VERSION_FILE conf/DatabaseConfig.sh
ifeq ($(BUILD_SERVICES),services)
	cd hoot-services && $(MAKE) -f Makefile build
endif

services-clean:
ifeq ($(BUILD_SERVICES),services)
	cd hoot-services && $(MAKE) -f Makefile clean
endif

services-clean-db:
ifeq ($(BUILD_SERVICES),services)
	cd hoot-services && $(MAKE) -f Makefile clean-db
endif

services-coverage:
ifeq ($(BUILD_SERVICES),services)
	scripts/mvn-build $(MVN_QUIET) cobertura:cobertura
endif

services-test: services-build
ifeq ($(BUILD_SERVICES),services)
	cd hoot-services && $(MAKE) -f Makefile test
endif

services-test-all: services-build
ifeq ($(BUILD_SERVICES),services)
	cd hoot-services && $(MAKE) -f Makefile test-all
endif


FORCE:

HOOT_VERSION_FILE: FORCE
	$(SHELL_PATH) ./HOOT_VERSION_GEN;
-include HOOT_VERSION_FILE

rebuild-db:
	scripts/DeleteAllTables.sh
	cd hoot-services && $(MAKE) -f Makefile build

HOOT_TARNAME=hootenanny-$(HOOT_VERSION)
dist: archive
archive: default docs
	if [ "$(BUILD_SERVICES)" == "services" ]; then cp hoot-services/target/hoot-services-*.war hootenanny-services-$(HOOT_VERSION).war; fi
	rm -f $(HOOT_TARNAME).tar.gz
	scripts/git-archive-all.sh --prefix $(HOOT_TARNAME)/ $(HOOT_TARNAME).tar
	mkdir -p $(HOOT_TARNAME)
	cp Makefile.in aclocal.m4 configure config.h.in $(HOOT_TARNAME)
	mkdir -p $(HOOT_TARNAME)/docs/
	cp docs/*.pdf docs/*.html docs/*.text $(HOOT_TARNAME)/docs/
	# Copy the protocol buffer generated files. Eases a dependency when building
	# on CentOS
	mkdir -p $(HOOT_TARNAME)/hoot-core/src/main/cpp/hoot/core/proto/
	# Copy the auto-generated schema definitions. This eases another dependency
	# on CentOS
	mkdir -p $(HOOT_TARNAME)/plugins/
	cp plugins/tds40_schema.js $(HOOT_TARNAME)/plugins/tds40_schema.js
	cp plugins/tds61_schema.js $(HOOT_TARNAME)/plugins/tds61_schema.js
	cp plugins/tds61_full_schema.js $(HOOT_TARNAME)/plugins/tds61_full_schema.js
	cp plugins/mgcp_schema.js $(HOOT_TARNAME)/plugins/mgcp_schema.js
	cp plugins/etds_rules.js $(HOOT_TARNAME)/plugins/etds_rules.js
	cp plugins/etds61_rules.js $(HOOT_TARNAME)/plugins/etds61_rules.js
	if [ "$(BUILD_SERVICES)" == "services" ]; then mkdir -p $(HOOT_TARNAME)/hoot-ui/data; cp hoot-ui/data/buildInfo.json $(HOOT_TARNAME)/hoot-ui/data; fi
	echo $(HOOT_VERSION) > $(HOOT_TARNAME)/version
	tar rf $(HOOT_TARNAME).tar \
	$(HOOT_TARNAME)/*  
	rm -rf $(HOOT_TARNAME)
	gzip -9 $(HOOT_TARNAME).tar

LocalConfig.pri:
	cp LocalConfig.pri.orig LocalConfig.pri
  
Makefile.qmake: Hootenanny.pro Configure.pri LocalConfig.pri
	qmake

tmp/schema.dot: qt-make
	HootTest --single hoot::OsmSchemaTest

tmp/schema.png: tmp/schema.dot
	neato -Tpng -Gsize=50,50\! -GK=3 -Gratio=.5 -Gmindist=1 -Gmclimit=10 -Gnodesep=4 -Granksep=4 -Gsplines=true -Glen=0.5 -Gconcentrate=true -Gdpi=50 -Goverlap=false -Elen=3 -o tmp/schema.png tmp/schema.dot

# Code Coverage

IGNORED=/usr/\* \*test/cpp\* \*tgs/src\* \*/local/\* \*/tmp/moc/\*

tmp/coverage/core/index.html: 
	mkdir -p tmp/coverage
	lcov --capture --ignore-errors source -d hoot-core/tmp/debug -b hoot-core/ --output-file tmp/coverage/Core.info
	lcov -r tmp/coverage/Core.info $(IGNORED) \*tbs/src\* -o tmp/coverage/CoreTrimmed.info
	genhtml tmp/coverage/CoreTrimmed.info --output-directory tmp/coverage/core/

tmp/coverage/hadoop/index.html: 
	mkdir -p tmp/coverage
	lcov --capture --ignore-errors source -d hoot-hadoop/tmp/debug -b hoot-hadoop/ --output-file tmp/coverage/Hadoop.info
	lcov -r tmp/coverage/Hadoop.info $(IGNORED) \*tbs/src\* -o tmp/coverage/HadoopTrimmed.info
	genhtml tmp/coverage/HadoopTrimmed.info --output-directory tmp/coverage/hadoop/

tmp/coverage/tbs/index.html: 
	mkdir -p tmp/coverage
	lcov --capture --ignore-errors source -d tbs/tmp/debug -b tbs/ --output-file tmp/coverage/Tbs.info
	lcov -r tmp/coverage/Tbs.info $(IGNORED) -o tmp/coverage/TbsTrimmed.info
	genhtml tmp/coverage/TbsTrimmed.info --output-directory tmp/coverage/tbs/

coverage: services-coverage tmp/coverage/core/index.html  tmp/coverage/hadoop/index.html tmp/coverage/tbs/index.html

conf/WordsAbridged.sqlite: conf/WordsAbridged.sqlite.gz
	gunzip -c $^ > $@

conf/words.sqlite: conf/words1.sqlite
	rm -f conf/words.sqlite
	[ -e $^ ] && ln -s words1.sqlite conf/words.sqlite

# If you create a new words.sqlite please just increment the number rather than
# replacing the old file. This way we can maintain the history.
conf/words1.sqlite:
	wget -N -P conf/ https://github.com/ngageoint/hootenanny/releases/download/v0.2.16/words1.sqlite || echo "Failure downloading words1.sqlite. Build will continue, but conflation accuracy may suffer."

bin/HootEnv.sh: scripts/HootEnv.sh
	mkdir -p bin
	cp scripts/HootEnv.sh bin/HootEnv.sh

bin/HootTest: scripts/HootTest.sh bin/HootEnv.sh
	mkdir -p bin
	cp scripts/HootTest.sh bin/HootTest

bin/hoot: scripts/RunHoot.sh bin/HootEnv.sh
	mkdir -p bin
	cp scripts/RunHoot.sh bin/hoot
	chmod +x bin/hoot

eclipse:
ifeq ($(BUILD_SERVICES),services)
	scripts/mvn-build $(MVN_QUIET) eclipse
endif
