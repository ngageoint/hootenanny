#!/bin/bash
set -e

# This script tests the replacement changeset generation workflow for various geometry types. It is called from the
# ServiceChangesetReplacement*.sh tests. All resultant changesets are written back to an OSM API database, as that allows 
# for ease of visual inspection of the changes and makes debugging easier.
#
# When examining test outputs, ensure that all element changes made honor the specified bounds. Also, pay close 
# attention to the modify change counts, as you can end up with output that looks correct but isn't due to ways being 
# deleted and re-created when they should have been modified.
#
# UPDATE 11/16/20: Going forward, its best to write these types of tests as part of ServiceChangesetReplacementGridTest 
# rather than use this test. If you need to synthesize replacement data with perty 
# (e.g. ServiceChangesetReplacementBuildingTest.sh) or want to test something specific in the CLI, however, then you will 
# need to use this script.

# Input Parameters (see changeset-derive-replacement command doc for more detail):
# 1  - test name
# 2  - ref input file path
# 3  - sec input file path - (use "test-files/Empty.osm" for cut only; that's hackish, but we already use the existing of 
#      an empty second input to determine whether generate the second input via perturbation)
# 4  - replacement aoi - what section is being replaced; matches bounds format
# 5  - crop aoi - an initial rectangular aoi to crop both datasets down to in order to save processing time; matches bounds
#                 rectangular envelope format only use a global bounds to bypass cropping completely: "-180,-90,180,90"
# 6  - input filter - what types of elements are being replaced?; delimited ElementCriterion class name list; leave 
#                     empty to bypass and replace elements of any type
# 7 - way snapping - snap unconnected ways between replacement data and data being replaced?; may be useful if linear 
#                     data varies greatly between the two
# 8 - way snap tolerance (m) - how far can we snap ways to other ways?; leave empty to specify 0.0m
# 9 - way snap node tolerance (m) - how far can we snap way nodes directly to other way nodes?; leave empty to specify 0.0m
# 10 - extra params; anything extra params or config options you want to pass in for a custom config; applied to all commands

# PROCESS INPUTS

TEST_NAME=$1
echo "test name: " $TEST_NAME

# There may be multiple source files delimited with ';'. For multiple file inputs we'll run multiple consecutive replacements 
# in a loop.
SOURCE_FILE_1=$2
echo "source file 1: " $SOURCE_FILE_1

# This has to come before parsing SOURCE_FILE_2.
CROP_AOI=$5
echo "crop aoi: " $CROP_AOI
CROP_OPTS="-D crop.bounds=$CROP_AOI"
if [[ "$CROP_AOI" == "-180,-90,180,90" ]]; then # If a global crop bounds was passed in, then skip cropping.
  CROP_OPTS=""
fi

SOURCE_FILE_2=$3
# If the second source file input parameter was not passed in, we'll perturb the first input source file and use the 
# original data for the secondary and the perturbed for the ref. Tagging the inputs make it easier to determine
# which features are reference or secondary in the replaced output.
if [ "$SOURCE_FILE_2" == "" ]; then
  SOURCE_FILE_2=$SOURCE_FILE_1
  if [ "$CROP_OPTS" == "" ]; then
    REF_CONVERT_OPS="SetTagValueVisitor;PertyOp"
    SEC_CONVERT_OPS="SetTagValueVisitor"
  else
    REF_CONVERT_OPS="MapCropper;SetTagValueVisitor;PertyOp"
    SEC_CONVERT_OPS="MapCropper;SetTagValueVisitor"
  fi
  PERTURBING_REF="true"
else
  if [ "$CROP_OPTS" == "" ]; then
    REF_CONVERT_OPS="SetTagValueVisitor"
    SEC_CONVERT_OPS="SetTagValueVisitor"
  else
    REF_CONVERT_OPS="MapCropper;SetTagValueVisitor"
    SEC_CONVERT_OPS="MapCropper;SetTagValueVisitor"
  fi
  PERTURBING_REF="false"
fi
echo "source file 2: " $SOURCE_FILE_2
echo "REF_CONVERT_OPS: " $REF_CONVERT_OPS
echo "SEC_CONVERT_OPS: " $SEC_CONVERT_OPS

REPLACEMENT_AOI=$4
echo "replacement aoi: " $REPLACEMENT_AOI

if [ "$6" == "" ]; then
  INPUT_FILTER=""
else
  # If a input filter was specified we'll remove everything that doesn't pass the specified filter,
  # by placing a RemoveElementsVisitor as the very first op and negating the criterion.
  INPUT_FILTER=$6
  REF_CONVERT_OPS="RemoveElementsVisitor;"$REF_CONVERT_OPS
  SEC_CONVERT_OPS="RemoveElementsVisitor;"$SEC_CONVERT_OPS
fi
echo "input filter: " $INPUT_FILTER

ENABLE_WAY_SNAPPING=$7
if [ "$ENABLE_WAY_SNAPPING" == "true" ]; then
  ENABLE_WAY_SNAPPING="--enable-way-snapping"
else
  ENABLE_WAY_SNAPPING=""
fi
echo "enable way snapping: " $ENABLE_WAY_SNAPPING

if [ "$8" == "" ]; then
  WAY_SNAP_TOLERANCE="0.0"
else
  WAY_SNAP_TOLERANCE=$8
fi
echo "way snap tolerance: " $WAY_SNAP_TOLERANCE

if [ "$9" == "" ]; then
  EXISTING_WAY_NODE_TOLERANCE="0.0"
else
  EXISTING_WAY_NODE_TOLERANCE=$9
fi
echo "existing way node tolerance: " $EXISTING_WAY_NODE_TOLERANCE

EXTRA_PARAMS=${10}
echo "extra params: " $EXTRA_PARAMS

# SET UP TEST FILES

IN_DIR=test-files/cmd/glacial/serial/$TEST_NAME
OUT_DIR=test-output/cmd/glacial/serial/$TEST_NAME
rm -rf $OUT_DIR
mkdir -p $OUT_DIR

# INIT REF DATABASE VARS

source conf/database/DatabaseConfig.sh
export OSM_API_DB_URL="osmapidb://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME_OSMAPI"
export PSQL_DB_AUTH="-h $DB_HOST -p $DB_PORT -U $DB_USER"
export PGPASSWORD=$DB_PASSWORD_OSMAPI
REF_DB_INPUT=$OSM_API_DB_URL

HOOT_EMAIL="${TEST_NAME}@hoottestcpp.org"

# SET UP HOOT CONFIGURATION

# Had to set changeset.max.size to a large number due to the fact with certain larger datasets (debugging data only being 
# larger than we would include in actual tests) the osm api db bulk inserter would write multiple changesets for the input 
# data and then the sql changeset applier would pick up the wrong latest changeset ID. Possibly worth fixing (part of 
# #4171), but since we only use sql changesets internally for testing...not that big of a deal for now.

# debug.maps.remove.missing.elements=false is useful for debugging but it can make output unviewable in JOSM.
# bounds.remove.missing.elements=false ensures that we don't drop any missing elements except when writing out our debug maps.

LOG_LEVEL="--warn"
GENERAL_OPTS="-C UnifyingAlgorithm.conf -C Testing.conf -D test.force.orthographic.projection=false -D uuid.helper.repeatable=true -D writer.include.debug.tags=true -D reader.add.source.datetime=false -D writer.include.circular.error.tags=false -D bounds.remove.missing.elements=false -D log.warnings.for.missing.elements=false -D debug.maps.write=false -D debug.maps.remove.missing.elements=false -D element.hash.visitor.non.metadata.ignore.keys=note $EXTRA_PARAMS -D log.class.include.filter= "
# Holding onto missing child element refs does not work yet with cropping, so disable it when
# cropping is specified.
if [ "$CROP_OPTS" == "" ]; then
  GENERAL_OPTS=$GENERAL_OPTS" -D map.reader.add.child.refs.when.missing=true"
fi
DB_OPTS="-D api.db.email=$HOOT_EMAIL -D hootapi.db.writer.create.user=true -D hootapi.db.writer.overwrite.map=true -D changeset.user.id=1 -D changeset.max.size=999999 $EXTRA_PARAMS"
PERTY_OPTS="-D random.seed=1 -D perty.systematic.error.x=15 -D perty.systematic.error.y=15 $EXTRA_PARAMS -D perty.ops= "
CHANGESET_DERIVE_OPTS="-D changeset.user.id=1 -D bounds.output.file=$OUT_DIR/$TEST_NAME-bounds.osm -D snap.unconnected.ways.existing.way.node.tolerance=$EXISTING_WAY_NODE_TOLERANCE -D snap.unconnected.ways.snap.tolerance=$WAY_SNAP_TOLERANCE $EXTRA_PARAMS "
CUSTOM_TAG_KEY="note"
CUSTOM_TAG_VAL="Source"

# SET UP HOOT VARS

if [ "$PERTURBING_REF" == "true" ]; then
  REF_XML_INPUT=$OUT_DIR/ref-perturbed-original.osm
else
  REF_XML_INPUT=$OUT_DIR/ref-original.osm
fi
SEC_XML_INPUT=$OUT_DIR/sec-original.osm
CHANGESET_XML=$OUT_DIR/$TEST_NAME-changeset-xml.osc.sql
CHANGESET_XML_DEBUG=$OUT_DIR/$TEST_NAME-changeset-xml.osc
OUT_XML=$TEST_NAME-xml-replaced.osm

# DATA PREP

echo ""
if [[ "$CROP_OPTS" == "" ]]; then
  echo "Writing the reference dataset from: $SOURCE_FILE_1 to an osm api db (contains features to be replaced)..."
else
  echo "Cropping the reference dataset from: $SOURCE_FILE_1 to: $CROP_AOI, then writing it to an osm api db (contains features to be replaced)..."
fi
echo ""
scripts/database/CleanAndInitializeOsmApiDb.sh
hoot convert $LOG_LEVEL $GENERAL_OPTS $DB_OPTS $CROP_OPTS $PERTY_OPTS -D debug.maps.filename=$OUT_DIR/data-prep-ref-xml.osm -D reader.use.data.source.ids=false -D id.generator=PositiveIdGenerator -D convert.ops=$REF_CONVERT_OPS -D remove.elements.visitor.element.criteria=$INPUT_FILTER -D remove.elements.visitor.recursive=true -D element.criteria.negate=true -D remove.elements.visitor.chain.element.criteria=true -D set.tag.value.visitor.keys=$CUSTOM_TAG_KEY -D set.tag.value.visitor.values=$CUSTOM_TAG_VAL" 1" $SOURCE_FILE_1 $REF_DB_INPUT
# Don't remove missing elements for these file conversions (even if you need to view them in JOSM), since they are the 
# input data and we want to see any errors caused by them having missing elements.
echo ""
echo "Writing the reference dataset from the osm apidb to an xml file: $REF_XML_INPUT (contains features to be replaced)..."
echo ""
hoot convert $LOG_LEVEL $GENERAL_OPTS $DB_OPTS -D debug.maps.filename=$OUT_DIR/data-prep-ref-xml.osm -D reader.use.data.source.ids=true $REF_DB_INPUT $REF_XML_INPUT
echo ""
if [[ "$CROP_OPTS" == "" ]]; then
  echo "Writing the secondary dataset from: $SOURCE_FILE_2 to an xml file: $SEC_XML_INPUT (contains features to replace with)..."
else
  echo "Cropping the secondary dataset from: $SOURCE_FILE_2 to: $CROP_AOI, then writing it to an xml file: $SEC_XML_INPUT (contains features to replace with)..."
fi
echo ""
hoot convert $LOG_LEVEL $GENERAL_OPTS $CROP_OPTS -D debug.maps.filename=$OUT_DIR/data-prep-sec-xml.osm -D reader.use.data.source.ids=false -D convert.ops=$SEC_CONVERT_OPS -D remove.elements.visitor.element.criteria=$INPUT_FILTER -D remove.elements.visitor.recursive=true -D element.criteria.negate=true -D remove.elements.visitor.chain.element.criteria=true -D set.tag.value.visitor.keys=$CUSTOM_TAG_KEY -D set.tag.value.visitor.values=$CUSTOM_TAG_VAL" 2" $SOURCE_FILE_2 $SEC_XML_INPUT

# CHANGESET DERIVATION

echo ""
echo "Deriving a changeset between $REF_XML_INPUT and $SEC_XML_INPUT over: $REPLACEMENT_AOI, to file: $CHANGESET_XML that replaces features in the reference dataset with those from a secondary dataset..."
echo ""
if [ "$SOURCE_FILE_2" == "test-files/Empty.osm" ]; then
  hoot changeset-derive $LOG_LEVEL $GENERAL_OPTS $CHANGESET_DERIVE_OPTS -D bounds=$REPLACEMENT_AOI -D debug.maps.filename=$OUT_DIR/changeset-derive-xml.osm $REF_XML_INPUT "" $CHANGESET_XML --osmApiDatabaseUrl $REF_DB_INPUT $ENABLE_WAY_SNAPPING --write-bounds --replacement
else
  hoot changeset-derive $LOG_LEVEL $GENERAL_OPTS $CHANGESET_DERIVE_OPTS -D bounds=$REPLACEMENT_AOI -D debug.maps.filename=$OUT_DIR/changeset-derive-xml.osm $REF_XML_INPUT $SEC_XML_INPUT $CHANGESET_XML --osmApiDatabaseUrl $REF_DB_INPUT $ENABLE_WAY_SNAPPING --write-bounds --replacement
fi

# CHANGESET APPLICATION

echo ""
echo "Applying the changeset: $CHANGESET_XML to the reference data in the osm api db..."
echo ""
hoot changeset-apply $LOG_LEVEL $GENERAL_OPTS $DB_OPTS $CHANGESET_DERIVE_OPTS -D debug.maps.filename=$OUT_DIR/changeset-apply-xml.osm $CHANGESET_XML $OSM_API_DB_URL

# CHECK THE RESULTS

echo ""
echo "Reading the entire reference dataset out of the osm api db to: $OUT_XML for verification..."
echo ""
hoot convert $LOG_LEVEL $GENERAL_OPTS $DB_OPTS -D convert.ops="RemoveMissingElementsVisitor" -D debug.maps.filename=$OUT_DIR/final-write-xml.osm $OSM_API_DB_URL $OUT_DIR/$OUT_XML
# Not completely sure what the differences between the xml output and db output are yet, but the output maps look identical.
hoot diff $LOG_LEVEL $GENERAL_OPTS $IN_DIR/$OUT_XML $OUT_DIR/$OUT_XML

# CLEANUP
psql $PSQL_DB_AUTH -d $DB_NAME -c "DELETE FROM users WHERE email='$HOOT_EMAIL';" > /dev/null
