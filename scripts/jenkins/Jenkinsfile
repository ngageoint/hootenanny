// Load shared libraries
@Library('radiant-pipeline-library')_

pipeline {
    agent { label 'master' }
    triggers {
        // Set nightly triggers
        cron((BRANCH_NAME == "master" || BRANCH_NAME == "develop") ? "H H(21-22) * * 1-5" : "")
    }
    // Configurable parameters for users to skip steps and control pipeline behavior
    parameters {
        booleanParam(name: 'Destroy_VM', defaultValue: true)
        booleanParam(name: 'Static_analysis', defaultValue: true)
        booleanParam(name: 'License_headers', defaultValue: true)
        booleanParam(name: 'Hoot_provision', defaultValue: true)
        booleanParam(name: 'Configure_Tests', defaultValue: false)
        booleanParam(name: 'Build', defaultValue: true)
        booleanParam(name: 'Core_tests', defaultValue: true)
        booleanParam(name: 'Services_tests', defaultValue: true)
        booleanParam(name: 'UI_tests', defaultValue: true)
        string(name: 'Box', defaultValue: 'default', description: 'Vagrant Box')
    }
    stages {
        stage("Destroy VM") {
            when { expression { return params.Destroy_VM } }
            steps {
                // Attempt to destroy exiting VM but don't stop job if not there
                sh "vagrant destroy -f ${params.Box} || true"
            }
        }
        stage("Setup") {
            steps {
                
                // Make sure we have the tags info because figuring out the version is required in the build process
                // Remove any screenshots from previous runs
                sh '''
                    git fetch --tags
                    git submodule update --init
                    cp -R ../software.ubuntu1404 software
                    rm -rf ./test-files/ui/screenshot_*.png
                '''
            }
        }
        // Need to expand this step to more robust static analysis scanning with SonarQube
        // and publish results
        stage ("Static checks") {
            parallel {
                stage("Static Analysis") {
                    when { 
                        expression { return params.Static_analysis }
                        not { branch 'PR-*' }
                    }
                    steps {
                        sh 'cppcheck --enable=all --inconclusive --xml-version=2 --verbose --check-config . 2> cppcheck.xml'
                    }
                }
                stage("License Header") {
                    when { expression { return params.License_headers } }
                    steps {
                        script { 
                            sh '''
                                export HOOT_HOME=`pwd`
                                ./scripts/copyright/UpdateAllCopyrightHeaders.sh
                            '''
                        }
                    }
                }
            }
        }
        stage("Hoot Provision") {
            when { expression { return params.Hoot_provision } }
            steps {
                // NOTE: Only installs hoot build dependencies
                sh "vagrant up ${params.Box} --provision-with software,hoot --provider aws"
            }       
        }
        stage("Test Configure") {
            when { 
                anyOf {
                    expression { return params.Configure_Tests }
                    // Work around to run configuration tests during nightly cron triggers but not on commits to develop.  Logic can be udpated
                    // once this https://issues.jenkins-ci.org/browse/JENKINS-41272 is implemented
                    expression { return Calendar.instance.get(Calendar.HOUR_OF_DAY) in 21..23 }
                }
            }
            steps {
                // Run configuration tests
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; ./scripts/TestConfigure.sh &> Hoot_Config_Test || { cat Hoot_Config_Test; false; }'"
            }
        }
        stage("Build") {
            when { expression { return params.Build } }
            steps {
                // NOTE: Ubuntu only, may need more complex logic if other OS are included in pipeline
                sh '''
                    cp LocalConfig.pri.orig LocalConfig.pri
                    echo "QMAKE_CXXFLAGS += -Werror" >> LocalConfig.pri
                    sed -i s/"QMAKE_CXX=g++"/"#QMAKE_CXX=g++"/g LocalConfig.pri
                    sed -i s/"#QMAKE_CXX=ccache g++"/"QMAKE_CXX=ccache g++"/g LocalConfig.pri
                '''
                
                // Perform remainder of provisioning
                sh "vagrant provision ${params.Box} --provision-with build,EGD,tomcat,mapnik"
            }       
        }
        stage("Core Tests") {
            when { expression { return params.Core_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; hoot version --debug; bin/HootTest --diff --glacial --parallel \$(nproc)'"
            }
        }
        stage("Services Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` plugins-test'"
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` services-test'"
            }
        }
        stage("UI Tests") {
            when { expression { return params.UI_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui-test'"
            }
        }
    }
    post {
        always {
            script {
                if (!env.BRANCH_NAME.startsWith("PR-")) {
                    // Send build notification
                    notifySlack(currentBuild.result, "#builds_hoot")
                }
            }
        }
        success {
            // If all tests passed, clean everything up
            sh "vagrant destroy -f ${params.Box}"
            cleanWs()
        }
        failure {
            script {
                if (!env.BRANCH_NAME.startsWith("PR-")) {
                    // Copy over any UI failure screenshots and send to slack
                    sh "vagrant scp ${params.Box}:~/hoot/test-files/ui/screenshot_*.png ./test-files/ui/"
                    postSlack("${env.WORKSPACE}/test-files/ui/", "screenshot_*.png", "${env.JENKINS_BOT_TOKEN}", "#builds_hoot")
                }
            }
        }
    }
}
