#!/usr/bin/env groovy
// Load shared libraries
@Library('radiant-pipeline-library')_

pipeline {
    agent { label 'master' }

    environment {
        SYS_URL = 'UNKOWN'
        SYS_VER = 'UNKOWN'
        BUILD_VERBOSE = 'no'
        BUILD_DEBUG = 'yes'
    }

    triggers {
        // Set nightly trigger
        cron((BRANCH_NAME == "master") ? "H H(4-5) * * 1-5" : "")
    }

    // Configurable parameters for users to skip steps and control pipeline behavior
    parameters {
        booleanParam(name: 'Destroy_VM', defaultValue: true)
        booleanParam(name: 'Hoot_provision', defaultValue: true)
        booleanParam(name: 'Configure_Tests', defaultValue: false)
        booleanParam(name: 'Build', defaultValue: true)
        booleanParam(name: 'Core_tests', defaultValue: true)
        booleanParam(name: 'Services_tests', defaultValue: true)
        booleanParam(name: 'UI_hoot1_tests', defaultValue: true)
        booleanParam(name: 'UI_hoot2_tests', defaultValue: true)
        booleanParam(name: 'Sonar', defaultValue: false)
        string(name: 'Box', defaultValue: 'default', description: 'Vagrant Box')
    }

    stages {
        stage("Destroy VM") {
            when { expression { return params.Destroy_VM } }
            steps {
                // Existing VM may or may not exist depending on previous runs
                sh "vagrant destroy -f ${params.Box} || true"
            }
        }
        stage("Setup") {
            steps {
                script {
                    if (env.BRANCH_NAME.startsWith("release")) {
                        sh '''
                        PREV_EC2_NAME="jenkins-hootenanny-#{os.downcase}"
                        NEW_EC2_NAME="jenkins-hootenanny-#{os.downcase}-release"
                        sed -i "s/${PREV_EC2_NAME}/${NEW_EC2_NAME}/g" Vagrantfile
                        '''
                     }
                }
                // Make sure we have the tags info because figuring out the version is required in the build process
                // Remove any screenshots from previous runs
                sh '''
                    git fetch --tags
                    git submodule update --init
                    cp -R ../software.ubuntu1404 software
                    rm -rf ./test-files/ui/screenshot_*.png
                '''
            }
        }
        stage("Hoot Provision") {
            when { expression { return params.Hoot_provision } }
            steps {
                // NOTE: Only installs hoot build dependencies
                sh "vagrant up ${params.Box} --provision-with software,hoot --provider aws"
                script {
                    SYS_VER = sh(returnStdout: true, script: "vagrant ssh ${params.Box} -c 'cd hoot; ./scripts/git/GitVersion.sh'")
                    SYS_URL = sh(returnStdout: true, script: "vagrant ssh-config ${params.Box} | grep HostName | awk '{print \$2}'")
                    SYS_URL = SYS_URL.trim()
                    echo "System under test version ${SYS_VER}  http://${SYS_URL}:8080/hootenanny-id/"
                }
            }
        }
        stage("Test Configure") {
            when {
                anyOf {
                    expression { return params.Configure_Tests }
                    triggeredBy 'TimerTrigger'
                }
            }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; ./scripts/TestConfigure.sh &> Hoot_Config_Test || { cat Hoot_Config_Test; false; }'"
            }
        }
        stage("Sonar Config") {
            when {
                anyOf {
                    // Configure for sonar if user selected it, pull-request, or nightly run of master
                    expression { return params.Sonar }
                    changeRequest()
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; ./scripts/sonar/sonar-install.sh'"
                // Compile with build watcher to allow for sonar scanning in subsequent steps
                sh "sed -i 's/^make \$SILENT_MAKE -j\$(nproc)\$/build-wrapper-linux-x86-64 --out-dir bw-output make \$SILENT_MAKE -j\$(nproc)/' VagrantBuild.sh"
                script {
                    if (env.BRANCH_NAME == "master") {
                        // Compile instrumented code for master branch which allows for calculating coverage
                        sh "sed -i 's/--with-uitests/--with-uitests --with-coverage/g' VagrantBuild.sh"
                    }
                }
            }
        }
        stage("Build") {
            when { expression { return params.Build } }
            steps {
                // Set build verbosity
                sh "vagrant ssh ${params.Box} -c 'echo \"export BUILD_VERBOSE=${env.BUILD_VERBOSE}\" | sudo tee -a /etc/environment'"
                // Set debug/release build
                sh "vagrant ssh ${params.Box} -c 'echo \"export BUILD_DEBUG=${env.BUILD_DEBUG}\" | sudo tee -a /etc/environment'"
                // Perform remainder of provisioning
                sh "vagrant provision ${params.Box} --provision-with build,EGD,tomcat"
                // Configure authentication and reboot tomcat
                sh "vagrant ssh ${params.Box} -c 'sed -i 's,oauthRedirectURL=http://localhost:8080/,oauthRedirectURL=http://${SYS_URL}:8080/hootenanny-id/,' /var/lib/tomcat8/webapps/hoot-services/WEB-INF/classes/conf/hoot-services.conf'"
                sh "vagrant provision ${params.Box} --provision-with tomcat"
            }
        }
        stage("Core Tests") {
            when { expression { return params.Core_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; hoot version --debug; bin/HootTest --diff --glacial --parallel 6'"
            }
        }
        stage("Services Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` translations-test'"
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` services-test-all'"
            }
        }
        stage("UI Hoot 1 Tests") {
            when { expression { return params.UI_hoot1_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui-test'"
            }
        }
        stage("UI Hoot 2 Tests") {
            when { expression { return params.UI_hoot2_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui2x-test'"
            }
        }
        stage("Sonar") {
            when {
                anyOf {
                    expression { return params.Sonar }
                    changeRequest()
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps{
                    sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; cd hoot-services; mvn sonar:sonar \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.organization=hootenanny \
                        -Dsonar.login=${env.SONAR_CLOUD_KEY} \
                        -Dsonar.projectKey=hoot-services \
                        -Dsonar.branch.name=${env.BRANCH_NAME}'"

                script {
                    if (env.BRANCH_NAME.startsWith("PR-")) {
                        // PR scan will use github plugin
                        sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; ./scripts/sonar/sonar-scan.sh -l ${env.SONAR_CLOUD_KEY} -b ${env.BRANCH_NAME} -p ${env.CHANGE_ID} -a ${env.DGIS_BOT_TOKEN}'"
                    }
                    else {
                        if (env.BRANCH_NAME == "master") {
                            sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; ./scripts/cover/coverGcov.sh'"
                        }
                        sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; ./scripts/sonar/sonar-scan.sh -l ${env.SONAR_CLOUD_KEY} -b ${env.BRANCH_NAME}'"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if (!env.BRANCH_NAME.startsWith("release")) {
                    // Always halt the VM to save resources, but don't destroy so devs can troubleshoot on failures
                    sh "vagrant halt ${params.Box}"
                }
            }
        }
        aborted {
            script {
                notifySlack("ABORTED", "#builds_hoot")
            }
        }
        success {
            script {
                notifySlack("SUCCESS", "#builds_hoot")
                if (env.BRANCH_NAME.startsWith("release")) {
                    // Don't clean up this workspace.  We want to leave it up for acceptance testing
                    slackSend channel: "#builds_hoot", message: "Release candidate version ${SYS_VER} ready for testing http://${SYS_URL}:8080/hootenanny-id/"
                } else {
                    // If all tests passed, clean everything up
                    sh "vagrant destroy -f ${params.Box}"
                    cleanWs()
                }
            }
        }
        failure {
            script {
                notifySlack("FAILURE", "#builds_hoot")
                // Copy over any UI failure screenshots and send to slack
                sh "vagrant scp ${params.Box}:~/hoot/test-files/ui/screenshot_*.png ./test-files/ui/"
                postSlack("${env.WORKSPACE}/test-files/ui/", "screenshot_*.png", "${env.JENKINS_BOT_TOKEN}", "#builds_hoot")
            }
        }
    }
}
