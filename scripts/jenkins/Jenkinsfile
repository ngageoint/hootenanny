#!/usr/bin/env groovy
// Load shared libraries
@Library('radiant-pipeline-library')_

buildFailed = "no"

pipeline {
    agent { label 'master' }

    triggers {
        // Set nightly trigger
        cron((BRANCH_NAME == "master") ? "H H(4-5) * * 1-5" : "")
    }

    // Configurable parameters for users to skip steps and control pipeline behavior
    parameters {
        booleanParam(name: 'Destroy_VM', defaultValue: true)
        booleanParam(name: 'Hoot_provision', defaultValue: true)
        booleanParam(name: 'Configure_Tests', defaultValue: false)
        // Generating a core test coverage report slows down the core tests quite a bit, so turning
        // it off by default.
        booleanParam(name: 'Coverage', defaultValue: false)
        booleanParam(name: 'Build', defaultValue: true)
        booleanParam(name: 'Archive_docs', defaultValue: false)
        booleanParam(name: 'Core_tests', defaultValue: true)
        booleanParam(name: 'Translations_tests', defaultValue: true)
        booleanParam(name: 'Services_tests', defaultValue: true)
        booleanParam(name: 'UI_hoot1_tests', defaultValue: true)
        booleanParam(name: 'UI_hoot2_tests', defaultValue: true)
        booleanParam(name: 'Sonar', defaultValue: false)
        booleanParam(name: 'Halt_on_failure', defaultValue: true)
        string(name: 'Box', defaultValue: 'hoot_centos7', description: 'Vagrant Box')
        string(name: 'HOOT_AWS_ENV_TAG', defaultValue: 'testing')
        string(name: 'HOOT_AWS_USE_TAG', defaultValue: 'jenkins')
        string(name: 'HOOT_AWS_GROUP_TAG', defaultValue: 'devops')
        // Setting 'show_names' to '--names' will turn on the names of all unit tests to
        // help debug any hanging or crashing unit tests
        string(name: 'show_names', defaultValue: '--names')
    }

    environment {
        SYS_URL = 'UNKOWN'
        SYS_VER = 'UNKOWN'
        BUILD_VERBOSE = 'no'
        HOOT_AWS_ENV_TAG="${params.HOOT_AWS_ENV_TAG}"
        HOOT_AWS_USE_TAG="${params.HOOT_AWS_USE_TAG}"
        HOOT_AWS_GROUP_TAG="${params.HOOT_AWS_GROUP_TAG}"
    }

    stages {
        stage("Destroy VM") {
            when { expression { return params.Destroy_VM } }
            steps {
                // Existing VM may or may not exist depending on previous runs
                sh "vagrant destroy -f ${params.Box} || true"
            }
        }
        stage("Setup") {
            steps {
                script {
                    // Setup debug build as local environment variable that can be modified
                    env.BUILD_DEBUG = 'no'
                }
                script {
                    if (env.BRANCH_NAME.startsWith("release")) {
                        sh '''
                        PREV_EC2_NAME="jenkins-hootenanny-#{os.downcase}"
                        NEW_EC2_NAME="jenkins-hootenanny-#{os.downcase}-release"
                        sed -i "s/${PREV_EC2_NAME}/${NEW_EC2_NAME}/g" Vagrantfile
                        '''
                     }
                }
                // Make sure we have the tags info because figuring out the version is required in the build process
                // Remove any screenshots from previous runs
                sh '''
                    git fetch --tags
                    git submodule update --init
                    ( [ -d ../software.ubuntu1404 ] && cp -R ../software.ubuntu1404 software ) || true
                    rm -rf ./test-files/ui/screenshot_*.png
                '''
            }
        }
        stage("Hoot Provision") {
            when { expression { return params.Hoot_provision } }
            steps {
                // NOTE: Only installs hoot build dependencies
                sh "vagrant up ${params.Box} --provision-with software,hoot --provider aws"
                script {
                    SYS_VER = sh(returnStdout: true, script: "vagrant ssh ${params.Box} -c 'cd hoot; ./scripts/git/GitVersion.sh'")
                    SYS_URL = sh(returnStdout: true, script: "vagrant ssh-config ${params.Box} | grep HostName | awk '{print \$2}'")
                    SYS_URL = SYS_URL.trim()
                    echo "System under test version ${SYS_VER}  http://${SYS_URL}:8080/hootenanny-id/"
                }
            }
        }
        stage("Test Configure") {
            when {
                anyOf {
                    expression { return params.Configure_Tests }
                    triggeredBy 'TimerTrigger'
                }
            }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; ./scripts/TestConfigure.sh &> Hoot_Config_Test || { cat Hoot_Config_Test; false; }'"
            }
        }
        stage("Sonar Config") {
            when {
                anyOf {
                    // Configure for sonar if user selected it, pull-request, or nightly run of master
                    expression { return params.Sonar }
                    changeRequest()
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; ./scripts/sonar/sonar-install.sh'"
                // Compile with build watcher to allow for sonar scanning in subsequent steps
                sh "sed -i 's/^make \$SILENT_MAKE -j\$(nproc)\$/build-wrapper-linux-x86-64 --out-dir bw-output make \$SILENT_MAKE -j\$(nproc)/' VagrantBuild.sh"
                // Until PCH support is fixed in Sonar, run this to fix
                sh "sed -i 's|^make \$SILENT_MAKE clean|make \$SILENT_MAKE clean\\n./scripts/sonar/sonar-prep-makefile.sh|g' VagrantBuild.sh"
            }
        }
        stage("Configure Coverage") {
            when {
                anyOf {
                    expression { return params.Coverage }
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps {
                // Allow test coverage to be generated.
                sh "sed -i 's/--with-uitests/--with-uitests --with-coverage/g' VagrantBuild.sh"
                // Coverage must be built in debug mode
                script {
                    env.BUILD_DEBUG = 'yes'
                }
            }
        }
        stage("Build") {
            when { expression { return params.Build } }
            steps {
                // Set build verbosity
                sh "vagrant ssh ${params.Box} -c 'echo \"export BUILD_VERBOSE=${env.BUILD_VERBOSE}\" | sudo tee -a /etc/environment'"
                // Set debug/release build
                sh "vagrant ssh ${params.Box} -c 'echo \"export BUILD_DEBUG=${env.BUILD_DEBUG}\" | sudo tee -a /etc/environment'"
                // Perform remainder of provisioning
                sh "vagrant provision ${params.Box} --provision-with build,EGD,tomcat"
                // Configure authentication and reboot tomcat
                sh "vagrant ssh ${params.Box} -c 'sed -i 's,oauthRedirectURL=http://localhost:8080/,oauthRedirectURL=http://${SYS_URL}:8080/hootenanny-id/,' /var/lib/tomcat8/webapps/hoot-services/WEB-INF/classes/conf/hoot-services.conf'"
                sh "vagrant provision ${params.Box} --provision-with tomcat"
            }
        }
        stage("Archive Docs") {
            when { expression { return params.Archive_docs } }
            steps {
                // make archive does this same thing, but we don't run it from this script.
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; tar czf docs.tar.gz docs || touch docs.tar.gz'"
                sh "vagrant scp ${params.Box}:~/hoot/docs.tar.gz ./"
                archiveArtifacts artifacts: '**/docs.tar.gz'
            }
        }
        stage("Core Tests") {
            when { expression { return params.Core_tests } }
            steps {
                // Unfortunately, the code coverage report generation slows down tests and results in a lot of "Waiting
                // for process to finish..." messages to be displayed that you wouldn't see otherwise. So, we may want
                // to make a change that runs this as --error here or increase the wait time when generating the report.
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; hoot version --debug; bin/HootTest --error --glacial --diff --parallel ${params.show_names}'"
            }
        }
        stage("Translations Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` translations-test'"
            }
        }
        stage("Node Export Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` node-export-test'"
            }
        }
        stage("Core Coverage") {
            when {
                anyOf {
                    expression { return params.Coverage }
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; ./scripts/cover/coverGcov.sh'"
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; make -j`nproc` core-coverage; tar czf coverage.tar.gz coverage || touch coverage.tar.gz'"
                sh "vagrant scp ${params.Box}:~/hoot/coverage.tar.gz ./"
                archiveArtifacts artifacts: '**/coverage.tar.gz'
            }
        }
        stage("Services Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` services-test-all'"
            }
        }
// NOTE: UI 1 tests are randomly failing, push them to the last to get through UI2x and Sonar before randomly failing
//        stage("UI Hoot 1 Tests") {
//            when { expression { return params.UI_hoot1_tests } }
//            steps {
//                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui-test'"
//            }
//        }
        stage("UI Hoot 2 Tests") {
            when { expression { return params.UI_hoot2_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui2x-test'"
            }
        }
        stage("Sonar") {
            when {
                anyOf {
                    expression { return params.Sonar }
                    changeRequest()
                    allOf {
                        triggeredBy 'TimerTrigger'
                        branch 'master'
                    }
                }
            }
            steps{
                    sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; cd hoot-services; \
                        JAVA_HOME=/usr/lib/jvm/java-11-openjdk \
                        mvn sonar:sonar \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.organization=hootenanny \
                        -Dsonar.login=${env.SONAR_CLOUD_KEY} \
                        -Dsonar.projectKey=hoot-services \
                        -Dsonar.branch.name=${env.BRANCH_NAME}'"

                script {
                    if (env.BRANCH_NAME.startsWith("PR-")) {
                        // PR scan will use github plugin
                        sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; ./scripts/sonar/sonar-scan.sh -l ${env.SONAR_CLOUD_KEY} -b ${env.BRANCH_NAME} -p ${env.CHANGE_ID} -a ${env.DGIS_BOT_TOKEN}'"
                    }
                    else {
                        sh "vagrant ssh ${params.Box} -c 'cd hoot; ./SetupEnv.sh; ./scripts/sonar/sonar-scan.sh -l ${env.SONAR_CLOUD_KEY} -b ${env.BRANCH_NAME}'"
                    }
                }
            }
        }
        stage("UI Hoot 1 Tests") {
            when { expression { return params.UI_hoot1_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -s ui-test'"
            }
        }
    }
    post {
        //  always runs first so halting on non-release VM should happen at the end in cleanup
        aborted {
            script {
                buildFailed = "no"
                notifySlack("ABORTED", "#builds_hoot")
            }
        }
        success {
            script {
                buildFailed = "no"
                notifySlack("SUCCESS", "#builds_hoot")
                if (env.BRANCH_NAME.startsWith("release")) {
                    // Don't clean up this workspace.  We want to leave it up for acceptance testing
                    slackSend channel: "#builds_hoot", message: "Release candidate version ${SYS_VER} ready for testing http://${SYS_URL}:8080/hootenanny-id/"
                }
            }
        }
        failure {
            script {
                buildFailed = "yes"
                notifySlack("FAILURE", "#builds_hoot")
                // Copy over any UI failure screenshots and send to slack
                sh "vagrant scp ${params.Box}:~/hoot/test-files/ui/screenshot_*.png ./test-files/ui/"
                postSlack("${env.WORKSPACE}/test-files/ui/", "screenshot_*.png", "${env.JENKINS_BOT_TOKEN}", "#builds_hoot")
                // Copy over the test-output directory and add it to the artifacts
                sh "vagrant ssh ${params.Box} -c 'cd hoot; tar czf failed-test-output.tar.gz test-output || touch failed-test-output.tar.gz'"
                sh "vagrant scp ${params.Box}:~/hoot/failed-test-output.tar.gz ./"
                archiveArtifacts artifacts: '**/failed-test-output.tar.gz'
                // Copy over the failed sonar file
                sh "vagrant scp ${params.Box}:~/hoot/sonar-cfamily-reproducer.zip ./ || touch sonar-cfamily-reproducer.zip"
                archiveArtifacts artifacts: '**/sonar-cfamily-reproducer.zip'
            }
        }
        cleanup {
            script {
                if (!env.BRANCH_NAME.startsWith("release")) {
                    if (params.Halt_on_failure && buildFailed.equals('yes')) {
                        // Halt failed VMs so that the developer can debug
                        sh "vagrant halt ${params.Box}"
                    } else {
                        // Destroy all non-release VMs since the test output files are archived
                        sh "vagrant destroy -f ${params.Box}"
                        cleanWs()
                    }
                }
            }
        }
    }
}
