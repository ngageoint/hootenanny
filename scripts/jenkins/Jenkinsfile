pipeline {
    agent any
    parameters {
        booleanParam(name: 'DESTROY_VM',
            defaulValue: true,
            description: 'Destroy VM (Coming soon!)')
        booleanParam(name: 'STATIC_ANALYSIS',
            defaulValue: true,
            description: 'Run static analysis')
        booleanParam(name: 'LICENSE',
            defaulValue: true,
            description: 'Check license headers')
        booleanParam(name: 'CORE',
            defaulValue: true,
            description: 'Run core test')
        booleanParam(name: 'SERVICES',
            defaulValue: true,
            description: 'Run services tests')
        booleanParam(name: 'UI',
            defaulValue: true,
            description: 'Run UI tests')
    }
    stages {
        stage("Setup") {
            steps {
                // Attempt to destroy exiting VM but don't stop job if not there
                sh 'vagrant destroy -f || true'
                cleanWs()
                
                //git branch: 'develop', credentialsId: 'bebe8221-2edd-4ef5-bc85-fa5ec52c8ffc', url: 'https://github.com/ngageoint/hootenanny'
                sh 'git submodule update --init'
                
                sh 'cp -R ../software.ubuntu1404 software'
                //sh 'export WORDS_HOME=/fouo/ubuntu'
                //sh '( [ -e $WORDS_HOME/words1.sqlite ] &&  cp $WORDS_HOME/words1.sqlite conf )'
               
                sh 'cp LocalConfig.pri.orig LocalConfig.pri'
                sh 'echo "QMAKE_CXXFLAGS += -Werror" >> LocalConfig.pri'
                sh 'sed -i s/"QMAKE_CXX=g++"/"#QMAKE_CXX=g++"/g LocalConfig.pri'                 
                sh 'sed -i s/"#QMAKE_CXX=ccache g++"/"QMAKE_CXX=ccache g++"/g LocalConfig.pri'
            }
        }
        stage("Static Analysis") {
            when {
                expression {
                    return params.STATIC_ANALYSIS
                }
                not {
                    branch 'PR-*'
                }
            }
            steps {
                sh 'cppcheck --enable=all --inconclusive --xml-version=2 --verbose --check-config . 2> cppcheck.xml'
            }
        }
        stage("License Header") {
            when {
                expression {
                    return params.LICENSE
                }
            }
            steps {
                sh 'export HOOT_HOME=`pwd`; ./scripts/copyright/UpdateAllCopyrightHeaders.sh'
            }
        }
        stage("Vagrant Up") {
            steps {
                sh 'vagrant up --provider aws'
            }       
        }
        stage("Core Tests") {
            when {
                expression {
                    return params.CORE
                }
            }
            steps {
                sh 'vagrant ssh -c "cd hoot; source ./SetupEnv.sh; hoot --version --debug"'
                sh 'vagrant ssh -c "export HOOT_TEST_DIFF=--diff"'
                sh 'vagrant ssh -c "cd hoot; bin/HootTest $HOOT_TEST_DIFF --glacial"'
            }
        }
        stage("Services Tests") {
            when {
                expression {
                    return params.SERVICES
                }
            }
            steps {
                sh 'vagrant ssh -c "cd hoot; make -sj`nproc` pp-test"'
                sh 'vagrant ssh -c "cd hoot; make -sj`nproc` plugins-test"'
                sh 'vagrant ssh -c "cd hoot; make -sj`nproc` services-test"'
            }
        }
         stage("UI Tests") {
            when {
                expression {
                    return params.UI
                }
            }
            steps {
                sh 'vagrant ssh -c "cd hoot; make -s ui-test"'
            }
        }
    }
    post {
        success {
            sh 'vagrant destroy -f'
            cleanWs()
        }
        failure {
            slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}
