// Load shared libraries
@Library('radiant-pipeline-library')_

pipeline {
    agent { label 'master' }
    // Configurable parameters for users to skip steps and control pipeline behavior
    parameters {
        booleanParam(name: 'Destroy_VM', defaultValue: true)
        booleanParam(name: 'Hoot_provision', defaultValue: true)
        string(name: 'Box', defaultValue: 'default', description: 'Vagrant Box')
    }
    stages {
        stage("Destroy VM") {
            when { expression { return params.Destroy_VM } }
            steps {
                // Attempt to destroy exiting VM but don't stop job if not there
                sh "vagrant destroy -f ${params.Box} || true"
            }
        }
        stage("Setup") {
            steps {
                
                // Make sure we have the tags info because figuring out the version is required in the build process
                // Remove any screenshots from previous runs
                sh '''
                    git fetch --tags
                    git submodule update --init
                    cp -R ../software.ubuntu1404 software
                    rm -rf ./test-files/ui/screenshot_*.png
                '''
            }
        }
        stage("Hoot Provision") {
            when { expression { return params.Hoot_provision } }
            steps {
                // NOTE: Only installs hoot build dependencies
                sh "vagrant up ${params.Box} --provision-with software,hoot --provider aws"
                // Install sonar scanner
                sh "vagrant ssh ${params.Box} -c 'cd hoot; ./scripts/sonar/sonar-install.sh'"
            }       
        }
        stage("Build") {
            steps {
                // NOTE: Ubuntu only, may need more complex logic if other OS are included in pipeline
                sh '''
                    cp LocalConfig.pri.orig LocalConfig.pri
                    echo "QMAKE_CXXFLAGS += -Werror" >> LocalConfig.pri
                    sed -i s/"QMAKE_CXX=g++"/"#QMAKE_CXX=g++"/g LocalConfig.pri
                    sed -i s/"#QMAKE_CXX=ccache g++"/"QMAKE_CXX=ccache g++"/g LocalConfig.pri
                '''
                
                // Configure code
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; aclocal && autoconf && autoheader && automake --add-missing --copy && ./configure --quiet --with-rnd --with-services --with-uitests'"
                // Make hoot with build watcher
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; build-wrapper-linux-x86-64 --out-dir bw-output make -sj\$(nproc)'"
            }       
        }
        stage("Scan") {
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; sonar-scanner -Dsonar.projectKey=hoot -Dsonar.sources=./hoot-cmd,./hoot-core,./hoot-core-test,./hoot-js,./hoot-rnd,./hoot-test,./tbs,./tgs -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=hootenanny -Dsonar.login=${env.SONAR_CLOUD_KEY} -Dsonar.cfamily.threads=4'"
            }    
        }
    }
    post {
        always {
            script {
                // Send build notification
                notifySlack(currentBuild.result, "#builds_hoot")
            }
        }
        success {
            // If all tests passed, clean everything up
            sh "vagrant destroy -f ${params.Box}"
            cleanWs()
        }
        failure {
            script {
                if (!env.BRANCH_NAME.startsWith("PR-")) {
                    // Copy over any UI failure screenshots and send to slack
                    sh "vagrant scp ${params.Box}:~/hoot/test-files/ui/screenshot_*.png ./test-files/ui/"
                    postSlack("${env.WORKSPACE}/test-files/ui/", "screenshot_*.png", "${env.JENKINS_BOT_TOKEN}", "#builds_hoot")
                }
            }
        }
    }
}
