#!/usr/bin/perl -w

use strict;
use File::Temp qw/ tempdir /;

sub executeCmdReturnOutput($);

sub executeCmdReturnOutput($)
{
  my $cmd = shift(@_);

  return `$cmd 2>&1`;
}


if ( scalar( @ARGV ) != 1 )
{
  print( 
    "Usage: createBlankOsmApiDb <database name>\n\n" .
    "NOTE: script will leverage PGUSER, PGPASSWORD,\n" .
    "      and PGPASSWORD environment variables if \n" .
    "      defined to control connections that\n" .
    "      require them.\n\n");

  exit;
}

# Make temp dir
my $dir = tempdir( CLEANUP => 1 );
chdir( $dir );
#print( "\tSwitched to $dir\n" );

# Retrieve latest schema -- URL should always point to latest
my $schemaUrl =
  'https://raw.githubusercontent.com/openstreetmap/openstreetmap-website' .
  '/master/db/structure.sql';

print( "\tDownloading newest schema... " );
`wget $schemaUrl >/dev/null 2>&1`;
print( "complete!\n" );

# Pull latest version out of structure file
open( my $structureFile, '< structure.sql' ) or die( "Could not open structure file\n\n" );

my @lines = <$structureFile>;
close( $structureFile );

my $fileSchemaVersion = '19700101000000';

foreach my $currLine ( @lines )
{
  if ( $currLine =~ /INSERT INTO schema_migrations \(version\) VALUES \('(\d{14})'\)/ )
  {
    if ( $1 gt $fileSchemaVersion )
    {
      $fileSchemaVersion = $1;
    }
  }
}

print( "\tVersion of schema: $fileSchemaVersion\n" );


my $databaseName = $ARGV[0];

# Try to drop remote DB if it exists
my $dropCmd = "dropdb $databaseName";
my $retVal = executeCmdReturnOutput($dropCmd);
if ( (length($retVal) > 0) && ($retVal !~ /database \"$databaseName\" does not exist/) )
{
  print( "Drop cmd had error: $retVal\n" );
  exit;
}
print( "\tExisting database \"$databaseName\" dropped (if applicable)\n" );

my $createCmd = "createdb $databaseName";
$retVal = executeCmdReturnOutput($createCmd);
if ( length($retVal) > 0 )
{
  print( "Create cmd $createCmd returned $retVal\n" );
  exit;
}

print( "\tNew database \"$databaseName\" created\n" );

# Populate new data
my $populateCmd = "psql -f structure.sql $databaseName";
$retVal = executeCmdReturnOutput($populateCmd);

if ( length($retVal) > 0 ) 
{
  #print( "Populate cmd $populateCmd returned $retVal\n" );
  #exit;
}

my $checkSchemaVersionCmd = 
  "psql -c \"SELECT MAX(version) FROM schema_migrations WHERE version LIKE '201%';\" " .
  $databaseName;
$retVal = executeCmdReturnOutput($checkSchemaVersionCmd);

if ( $retVal =~ /(201\d{11})/s )
{
  print( "\tDatabase \"$databaseName\" schema version: $1 " );

  if ( $1 eq $fileSchemaVersion )
  {
    print( "(OK)\n" );
  }
  else
  {
    print( "(ERROR)\n" );
  }
}
else
{
  print( "Could not find version in $retVal\n" );
}
