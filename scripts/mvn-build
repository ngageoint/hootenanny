#!/bin/bash
set -e

usage() {
    echo "Usage: $0 [module] [build type] [phase] <args>"
    echo "-----------------------------"
    echo "module:"
    echo "  all        - all modules"
    echo "phase:"
    echo "  build          - build a deployable version"
    echo "  test           - build, then run unit tests"
    echo "  verify         - run all tests"
    echo "  integration    - run integration tests"
    echo "  clean          - clean the build"
    echo "  eclipse        - build eclipse files for the project"
    echo "  docs           - build documentation"
    echo "args:"
    echo "  -f  --failfast            - fail fast tests (immediately stop on test failure)"
    echo "  -j  --javadocs            - include javadocs of dependencies (if available)"
    echo "  -s  --source              - include source jars of dependencies (if available)"
    echo " "
    echo "  any other args will be passed to maven directly"
    echo " "
    echo "Defaults:"
    echo "  phase test"
}

run-eclipse() {
    
    mvn -Denv=eclipse eclipse:clean $ARGS | grep -v -F "Groovy: [scmModified"$'\n'"execute contextualize" || true
    mvn -Denv=eclipse eclipse:eclipse  $ARGS | grep -v -F "Groovy: [scmModified"$'\n'"execute contextualize" || true

    # This find & sed edits the .project file to add resource filters
    # - ignore all .svn files
    find . -name .project -exec sed -i 's|</projectDescription>|\
        <filteredResources>\
          <filter>\
            <id>1345462274799</id>\
            <name />\
            <type>30</type>\
            <matcher>\
              <id>org.eclipse.ui.ide.multiFilter</id>\
              <arguments>1.0-name-matches-false-false-*.svn*</arguments>\
            </matcher>\
          </filter>\
        </filteredResources>\
        </projectDescription>|' {} \;
    
    # This adds an "exported="true" to the jar libraries, so we can run from eclipse
    find . -name .classpath -exec sed -i 's|kind="var" path="M2_REPO|kind="var" exported="true" path="M2_REPO|' {} \;
    
    # This removes the warning: "Classpath entry M2_REPO/<xxx>.jar will not be exported or published. Runtime ClassNotFoundExceptions may result." 
    pushd hoot-services
    sed -i '/<classpathentry kind="var"/{s|/>$|><attributes><attribute name="org.eclipse.jst.component.nondependency" value=""\/\></attributes></classpathentry>|}' .classpath     

    # Move the JDK to the top of libs to make sure the correct libraries get placed on the path first.
    sed -i 's/<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"\/>/ /g' .classpath
    sed -i 's/<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"\/>/ /g' .classpath
    sed -i 's/<classpath>/<classpath>\n  <classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"\/>/g' .classpath
}

CWD=`pwd`

ARGS=""

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

PHASE="test"
MODULE="all"

while [ $# -gt 0 ] ; do
    case $1 in
    "-h" | "--help" | "-?" | "help")
        usage
        exit 0
        ;;
    "all") 
        MODULE="all"
        shift 1
        ;;
    "build")
        PHASE="build"
        shift 1
        ;;
    "test") 
        PHASE="test"
        shift 1
        ;;
    "integration") 
        PHASE="integration"
        shift 1
        ;;        
    "verify") 
        PHASE="verify"
        shift 1
        ;;        
    "cobertura:cobertura")
        PHASE="cobertura:cobertura"
        shift 1
        ;;
    "clean")
        PHASE="clean"
        shift 1
        ;;
    "eclipse") 
        PHASE="eclipse"
        shift 1
        ;;
    "docs") 
        PHASE="docs"
	ARGS=$ARGS" -Dliquibase.should.run=false"
        shift 1
        ;;
    "-f" | "--failfast")
        ARGS=$ARGS" -Dmrgeo.failfast=true"
        shift 1
        ;;
    "-i" | "--identity-file")
        IDENTITY=$2
        shift 2
        ;;
    "-j" | "--javadocs")
        ARGS=$ARGS" -DdownloadJavadocs=true"
        shift 1
        ;;
    "-s" | "--source")
        ARGS=$ARGS" -DdownloadSources=true"
        shift 1
        ;;
    "-q" | "--quiet")
        QUIET=1
        ARGS=$ARGS" -q"
        shift 1
        ;;
     *) 
     ARGS=$ARGS" "$1
     shift 1
      ;;
    esac
done

export HOME=$CWD

MODIFIED=`git diff --shortstat 2> /dev/null | awk '{ print $1 }'`

if [ "$QUIET" != "1" ]; then
    echo " "
    echo "Phase: $PHASE"
    echo "Module: $MODULE"
    echo " "
    echo "-----------------------"
    echo "  JAVA_HOME:           " $JAVA_HOME
    echo "  HOOT_HOME:           " $HOOT_HOME
    echo "  Build:               " $HOME
    echo "  Local Modifications: " $MODIFIED
    echo " "
    echo "  Additional maven args: " $ARGS
    echo " "
fi

ARGS="-Dmodules=$MODULE -DfailIfNoTests=false -DscmModified=$MODIFIED$ARGS"

case $PHASE in
   "build")
   ARGS="-Dskip.hoot.services.tests=true -Dskip.hoot.services.integrationTests=true $ARGS"
   ;;
   "test")
   ARGS="-Dskip.hoot.services.integrationTests=true $ARGS"
   ;;
   "integration")
   ARGS="-Dskip.hoot.services.tests=true $ARGS verify"
   ;;
   "verify")
   ARGS="$ARGS verify"
   ;;   
   "cobertura:cobertura")
   ARGS="$ARGS cobertura:cobertura"
   ;;
   "clean")
   ARGS="$ARGS clean"
   ;;
   "eclipse")
   run-eclipse
   exit 0
   ;;
   "docs")
   ARGS="$ARGS javadoc:javadoc"
   ;;
esac

if [ "$QUIET" != "1" ]; then
	  ARGS="$ARGS -Dredirect-test-output-to-file=false"
    echo "-----------------------"
    echo "  Maven command: "
    echo "mvn $ARGS"
    echo " "
else
    ARGS="$ARGS -Dredirect-test-output-to-file=true"
fi

# The grep removes some silly messages that can't be removed.
# The SLF4J problem should probably be fixed at the source rather than filtered.
# https://github.com/ngageoint/hootenanny/issues/348#issuecomment-185770582
mvn $ARGS 2>&1 \
    | grep -v -F "Groovy: [scmModified"$'\n'"execute contextualize" \
    | grep -v "Outputting log4j snippets" \
    | grep -v -e 'Generating.*' \
    | grep -v -e '\[INFO\].*' \
    | grep -v -e 'Constructing Javadoc information.*' \
    | grep -v -e 'Standard Doclet version .*' \
    | grep -v -e 'Loading source files for package .*' \
    | grep -v -e 'Building [^ ]* for all .*' \
    | grep -v -e 'SLF4J:.*' \
    || true
# Use the return value of mvn, not the last grep
[ ${PIPESTATUS[0]} == "0" ] && true || false

