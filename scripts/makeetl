#
#  ETL Make file
#

HOOT_OPTS+= -D osm2ogr.ops=hoot::DecomposeBuildingRelationsVisitor
HOOT_OPTS+= -D hootapi.db.writer.overwrite.map=true -D hootapi.db.writer.create.user=true
HOOT_OPTS+= -D api.db.email=test@test.com

OP_INPUT=$(INPUT)
OP_TRANSLATION=$(HOOT_HOME)/$(TRANSLATION)
OP_INPUT_PATH=$(HOOT_HOME)/$(INPUT_PATH)


# This replaces semicolon with vsizip and path
ifeq "$(INPUT_TYPE)" "ZIP"
	OP_INPUT="/vsizip/$(HOOT_HOME)/$(INPUT_PATH)/$(subst ;,/" "/vsizip/$(HOOT_HOME)/$(INPUT_PATH)/,$(INPUT))/"
endif

ifeq "$(INPUT_TYPE)" "GEONAMES"
	HOOT_OPTS+= -D convert.ops=hoot::TranslationOp
	HOOT_OPTS+= -D translation.script="$(OP_TRANSLATION)"
endif


ifeq "$(INPUT_TYPE)" "OSM"
ifneq "$(NONE_TRANSLATION)" "true"
	HOOT_OPTS+= -D convert.ops=hoot::TranslationOp
	HOOT_OPTS+= -D translation.script="$(OP_TRANSLATION)"
endif
endif

###
# Transform and load data
###
step1:
# Unzip when semicolon separated lists are provided
ifneq ($(strip $(UNZIP_LIST)), )
	bash $(HOOT_HOME)/scripts/unzipfiles.sh "$(UNZIP_LIST)" "$(OP_INPUT_PATH)"
endif
  ifeq "$(INPUT_TYPE)" "OGR"
	  cd "$(OP_INPUT_PATH)" && hoot --ogr2osm $(HOOT_OPTS) "$(OP_TRANSLATION)" "$(DB_URL)/$(INPUT_NAME)" $(OP_INPUT)
  endif

  ifeq "$(INPUT_TYPE)" "OSM"
	  cd "$(OP_INPUT_PATH)" && hoot --convert $(HOOT_OPTS) $(OP_INPUT) "$(DB_URL)/$(INPUT_NAME)"
  endif

  ifeq "$(INPUT_TYPE)" "ZIP"
	  cd "$(OP_INPUT_PATH)" && hoot --ogr2osm $(HOOT_OPTS) "$(OP_TRANSLATION)" "$(DB_URL)/$(INPUT_NAME)" $(OP_INPUT)
  endif

  ifeq "$(INPUT_TYPE)" "FGDB"
	  cd "$(OP_INPUT_PATH)" && hoot --ogr2osm $(HOOT_OPTS) "$(OP_TRANSLATION)" "$(DB_URL)/$(INPUT_NAME)" $(OP_INPUT)
  endif

  ifeq "$(INPUT_TYPE)" "GEONAMES"
	  cd "$(OP_INPUT_PATH)" && hoot convert $(HOOT_OPTS) $(OP_INPUT) "$(DB_URL)/$(INPUT_NAME)"
  endif
	rm -rf "$(OP_INPUT_PATH)"

