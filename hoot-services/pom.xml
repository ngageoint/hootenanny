<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>hoot</groupId>
    <artifactId>hoot-services</artifactId>
    <packaging>war</packaging>
    <version>0.0.1</version>
    <name>hoot-services</name>
    <url>http://hootenanny.org</url>


    <properties>
        <revision>${user.name}</revision>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Change to skip unit tests on these modules.  A better way to change these is to use the
        command line.  e.g.  mvn -Dmaven.skip.tests=true -->
        <skip.hoot.services.tests>false</skip.hoot.services.tests>
        <skip.hoot.services.integrationTests>false</skip.hoot.services.integrationTests>
        <redirect-test-output-to-file>false</redirect-test-output-to-file>

        <spring.version>4.2.6.RELEASE</spring.version>
        <deegree.version>3.3.6</deegree.version>
        <jersey.version>2.23.1</jersey.version>
        <querydsl.version>4.1.0</querydsl.version>
        <postgresql.version>9.4.1208.jre7</postgresql.version>
        <slf4j.version>1.7.21</slf4j.version>
        <log4j2.version>2.7</log4j2.version>
        <javax.servlet-api.version>3.0.1</javax.servlet-api.version>
        <httpclient.version>4.3.1</httpclient.version>
        <httpcore.version>4.3</httpcore.version>
        <httpcore-nio.version>4.3</httpcore-nio.version>
        <httpasyncclient.version>4.0</httpasyncclient.version>
        <apache.commons.lang3.version>3.1</apache.commons.lang3.version>
        <apache.commons.io.version>2.5</apache.commons.io.version>
        <apache.commons.exec.version>1.3</apache.commons.exec.version>
        <xalan.version>2.7.1</xalan.version>
        <xercesImpl.version>2.9.1</xercesImpl.version>
        <json-simple.version>1.1.1</json-simple.version>
        <guava.version>18.0</guava.version>
        <rhino.version>1.7R4</rhino.version>
        <!--<osmosis-core.version>0.43-RELEASE</osmosis-core.version>-->
        <antlr-runtime.version>3.4</antlr-runtime.version>

        <!-- Unit test tools section -->
        <junit.version>4.12</junit.version>
        <hamcrest.version>1.3</hamcrest.version>
        <powermock.version>1.6.5</powermock.version>
        <cpsuite.version>1.2.6</cpsuite.version>
    </properties>

    <repositories>
        <!-- can comment out these repos if using artifactory -->

        <repository>
            <id>deegree-repo</id>
            <url>http://repo.deegree.org/content/groups/public/</url>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>

        <!-- uncomment below for artifactory support -->
        <!-- repository>
            <id>central</id>
            <url>http://selma:8081/artifactory/libs-release</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>snapshots</id>
            <url>http://selma:8081/artifactory/libs-snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository -->
    </repositories>

    <build>
        <finalName>hoot-services-${revision}</finalName>
        <defaultGoal>install</defaultGoal>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/*.in</exclude>
                    <exclude>**/local.conf</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <!-- This plugin is only needed if you adding custom files to the war outside of
            src/main/resources is required. -->
            <!-- plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-war-plugin</artifactId>
              <version>2.4</version>
              <configuration>
                <webResources>
                  <resource>
                    <directory>localDependencies</directory>
                    <includes>
                      <include>**/*.jar</include>
                    </includes>
                    <targetPath>WEB-INF/lib</targetPath>
                  </resource>
                </webResources>
              </configuration>
            </plugin -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <!-- As of 10/20/2016 executing of tests in parallel doesn't work -->
                    <printSummary>false</printSummary>
                    <groups>hoot.services.UnitTest</groups>
                    <skipTests>${skip.hoot.services.tests}</skipTests>
                    <excludes>
                        <exclude>**/*AllTests.class</exclude>
                        <exclude>**/*Suite.class</exclude>
                    </excludes>
                    <redirectTestOutputToFile>${redirect-test-output-to-file}</redirectTestOutputToFile>
                    <systemPropertyVariables>
                        <log4j.configurationFile>file:${project.build.testOutputDirectory}/log4j2-test.xml</log4j.configurationFile>
                    </systemPropertyVariables>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>2.19.1</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.19.1</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>2.19.1</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <groups>hoot.services.IntegrationTest</groups>
                    <printSummary>false</printSummary>
                    <skipTests>${skip.hoot.services.integrationTests}</skipTests>
                    <redirectTestOutputToFile>${redirect-test-output-to-file}</redirectTestOutputToFile>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/*.class</include>
                            </includes>
                            <excludes>
                                <exclude>**/*AllTests.class</exclude>
                                <exclude>**/*Suite.class</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.10</version>
                <inherited>true</inherited>
                <configuration>
                    <additionalProjectFacets>
                        <jst.web>2.5</jst.web>
                    </additionalProjectFacets>
                    <sourceExcludes>
                        <sourceExclude>**/.svn/**</sourceExclude>
                    </sourceExcludes>
                    <wtpversion>2.0</wtpversion>
                </configuration>
            </plugin>
            <!-- liquibase manages database upgrades -->
            <!-- versions higher than 3.1.x currently have trouble finding our master changelog file -->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <contexts>default</contexts>
                    <propertyFile>src/main/resources/db/liquibase.properties</propertyFile>
                    <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
                    <changeLogFile>src/main/resources/db/db.changelog-master.xml</changeLogFile>
                    <logging>warning</logging>
                </configuration>

<!-- Exclude from the main build.  To be invoked manually via the command line instead.
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>update</goal>
                        </goals>
                    </execution>
                </executions>
 -->
            </plugin>
            <plugin>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-maven-plugin</artifactId>
                <version>${querydsl.version}</version>

<!--  Exclude from the main build.  To be invoked manually via the command line instead.

                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>export</goal>
                        </goals>
                    </execution>
                </executions>
-->
                <configuration>
                    <jdbcDriver>org.postgresql.Driver</jdbcDriver>
                    <jdbcUrl>jdbc:postgresql://localhost:5432/hoot</jdbcUrl>
                    <jdbcUser>hoot</jdbcUser>
                    <jdbcPassword>hoottest</jdbcPassword>
                    <packageName>hoot.services.models.db</packageName>
                    <tableNamePattern>
                                      changesets,
                                      current_nodes,
                                      current_relation_members,
                                      current_relations,
                                      current_way_nodes,
                                      current_ways,
                                      folder_map_mappings,
                                      folders,
                                      job_status,
                                      maps,
                                      users,
                                      review_bookmarks,
                                      command_status
                    </tableNamePattern>
                    <targetFolder>src/main/java</targetFolder>
                    <sourceFolder>target/generated-sources/java</sourceFolder>
                    <exportBeans>true</exportBeans>
                    <exportForeignKeys>false</exportForeignKeys>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>${postgresql.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- output from javadoc will go to hoot-services/target/site/apidocs by default -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
                <configuration>
                    <!-- This has been disabled to prevent build breakage....but then you could end up with
                    no docs. -->
                    <failOnError>false</failOnError>
                    <excludePackageNames>hoot.services.models.db</excludePackageNames>
                    <!-- the version isn't right here; if fixed, then we could use the default param -->
                    <doctitle>${project.name} API</doctitle>
                    <additionalparam>-Xdoclint:none</additionalparam>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <!-- this argument allows classes within rt.jar to be referenced... -->
                    <compilerArgument>-XDignore.symbol.file=true</compilerArgument>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.6.201602180812</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!--
                         <execution>
                             <id>default-check</id>
                             <goals>
                                 <goal>check</goal>
                             </goals>
                         </execution>
                    -->
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>src/main/resources/db/db.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${jersey.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-bom</artifactId>
                <version>${log4j2.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- web -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <!-- This is the version the jersey test framework uses. -->
            <version>${javax.servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>${httpcore.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore-nio</artifactId>
            <version>${httpcore-nio.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpasyncclient</artifactId>
            <version>${httpasyncclient.version}</version>
        </dependency>
        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Apache commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${apache.commons.lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <version>${apache.commons.exec.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${apache.commons.io.version}</version>
        </dependency>

        <!-- Postgresql database driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!-- XML processing -->

        <!-- XPath -->
        <dependency>
            <groupId>xalan</groupId>
            <artifactId>xalan</artifactId>
            <version>${xalan.version}</version>
        </dependency>

        <!-- DOM -->
        <!-- deegree actually depends on a later version of Xerces but it appears classes have
        been refactored in that version and class not found errors occur if this version isn't
        included.  Later, when it comes time to use deegree more heavily, this conflict may need to
        be resolved. -->
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>${xercesImpl.version}</version>
        </dependency>

        <!-- JSON processing -->
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>${json-simple.version}</version>
        </dependency>

        <!-- QueryDsl Dependency -->
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-sql</artifactId>
            <version>${querydsl.version}</version>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-sql-codegen</artifactId>
            <version>${querydsl.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-sql-spring</artifactId>
            <version>${querydsl.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <!-- Javascript Support -->
        <dependency>
            <groupId>org.mozilla</groupId>
            <artifactId>rhino</artifactId>
            <version>${rhino.version}</version>
        </dependency>

        <!--  OSM Parsing Support -->
<!--
        <dependency>
            <groupId>org.openstreetmap.osmosis</groupId>
            <artifactId>osmosis-core</artifactId>
            <version>${osmosis-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openstreetmap.osmosis</groupId>
            <artifactId>osmosis-testutil</artifactId>
            <version>${osmosis-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openstreetmap.osmosis</groupId>
            <artifactId>osmosis-xml</artifactId>
            <version>${osmosis-core.version}</version>
        </dependency>
-->

        <!-- Spring framework provides dependency injection, transaction management, and a hook
        into db connection pooling via commons dbcp -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>

        <!-- Jersey is for hosting RESTful web service endpoints -->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <!-- if your container implements Servlet API older than 3.0, use "jersey-container-servlet-core"  -->
            <artifactId>jersey-container-servlet-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-common</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.ext</groupId>
            <artifactId>jersey-metainf-services</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.ext</groupId>
            <artifactId>jersey-spring3</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-web</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework.providers</groupId>
            <artifactId>jersey-test-framework-provider-inmemory</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework</groupId>
            <artifactId>jersey-test-framework-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework</groupId>
            <artifactId>jersey-test-framework-util</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- deegree provides OGC compliant services -->
        <dependency>
            <groupId>org.deegree</groupId>
            <artifactId>deegree-services-wfs</artifactId>
            <version>${deegree.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javassist</groupId>
                    <artifactId>javassist</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>postgresql</artifactId>
                    <groupId>postgresql</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-server</artifactId>
                    <groupId>com.sun.jersey</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>log4j</artifactId>
                    <groupId>log4j</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.deegree</groupId>
            <artifactId>deegree-sqldialect-postgis</artifactId>
            <version>${deegree.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>postgresql</artifactId>
                    <groupId>postgresql</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.deegree</groupId>
            <artifactId>deegree-featurestore-sql</artifactId>
            <version>${deegree.version}</version>
        </dependency>
        <dependency>
            <groupId>org.deegree</groupId>
            <artifactId>deegree-services-config</artifactId>
            <version>${deegree.version}</version>
        </dependency>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr-runtime</artifactId>
            <version>${antlr-runtime.version}</version>
        </dependency>
        <!-- test -->

        <!-- JUnit is the core testing framework -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>${hamcrest.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- PowerMock builds on top of Mockito -->
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-core</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-support</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-reflect</artifactId>
            <version>${powermock.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- cpsuite allows for having separate unit and integration test suites -->
        <dependency>
            <groupId>com.googlecode.cedar-common</groupId>
            <artifactId>cpsuite</artifactId>
            <version>${cpsuite.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <!-- Normally, we take off the dependency report, saves time. -->
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <check/>
                    <!-- outputDirectory>../../../coverage/services</outputDirectory -->
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                    <quiet>true</quiet>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.6</version>
                <configuration>
                    <rulesets>
                        <ruleset>pmd-custom-rules.xml</ruleset>
                    </rulesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.4</version>
                <configuration>
                    <excludeFilterFile>findbugs-exclude.xml</excludeFilterFile>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
