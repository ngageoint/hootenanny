<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>hoot</groupId>
    <artifactId>hoot-java</artifactId>
    <version>0.0.1</version>
  </parent>
  <artifactId>hoot-services</artifactId>
  <packaging>war</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <spring.version>3.2.4.RELEASE</spring.version>
    <deegree.version>3.3.6</deegree.version>
    <jersey.version>1.17.1</jersey.version>
    <querydsl.version>3.3.2</querydsl.version>
    <powermock.version>1.5.6</powermock.version>
  </properties>
  <name>hoot-services</name>
  <url>http://hootenanny.org</url>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <excludes>
           <exclude>**/*.in</exclude>
           <exclude>**/local.conf</exclude>
        </excludes>
      </resource>
    </resources>
    <plugins>
      <!-- This plugin is only needed if you adding custom files to the war outside of
      src/main/resources is required. -->
      <!-- plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>localDependencies</directory>
              <includes>
                <include>**/*.jar</include>
              </includes>
              <targetPath>WEB-INF/lib</targetPath>
            </resource>
          </webResources>
        </configuration>
      </plugin -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.18.1</version>
        <configuration>
          <forkCount>8</forkCount>
          <reuseForks>true</reuseForks>
          <groups>hoot.services.UnitTest</groups>
          <skipTests>${skip.hoot.services.tests}</skipTests>
          <excludes>
            <exclude>**/*AllTests.class</exclude>
            <exclude>**/*Suite.class</exclude>
          </excludes>
          <redirectTestOutputToFile>${redirect-test-output-to-file}</redirectTestOutputToFile>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>2.18.1</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.14.1</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>2.18.1</version>
          </dependency>
        </dependencies>
        <configuration>
          <groups>hoot.services.IntegrationTest</groups>
          <skipTests>${skip.hoot.services.integrationTests}</skipTests>
          <redirectTestOutputToFile>${redirect-test-output-to-file}</redirectTestOutputToFile>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*.class</include>
              </includes>
              <excludes>
                <exclude>**/*AllTests.class</exclude>
                <exclude>**/*Suite.class</exclude>
              </excludes>
            </configuration>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.9</version>
        <inherited>true</inherited>
        <configuration>
          <additionalProjectFacets>
            <jst.web>2.5</jst.web>
          </additionalProjectFacets>
          <sourceExcludes>
            <sourceExclude>**/.svn/**</sourceExclude>
          </sourceExcludes>
          <wtpversion>2.0</wtpversion>
        </configuration>
      </plugin>
      <!-- liquibase manages database upgrades -->
      <!-- versions higher than 3.1.x currently have trouble finding our master changelog file -->
      <plugin>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-maven-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <contexts>default</contexts>
          <propertyFile>src/main/resources/db/liquibase.properties</propertyFile>
          <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
          <changeLogFile>src/main/resources/db/db.changelog-master.xml</changeLogFile>
          <logging>warning</logging>
        </configuration>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>update</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    <plugin>
      <groupId>com.mysema.querydsl</groupId>
      <artifactId>querydsl-maven-plugin</artifactId>
      <version>${querydsl.version}</version>
      <executions>
        <execution>
                <phase>generate-sources</phase>
          <goals>
            <goal>export</goal>
          </goals>
        </execution>
      </executions>
      <configuration>
        <jdbcDriver>org.postgresql.Driver</jdbcDriver>
        <jdbcUrl>jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}</jdbcUrl>
        <jdbcUser>${DB_USER}</jdbcUser>
        <jdbcPassword>${DB_PASSWORD}</jdbcPassword>
        <packageName>hoot.services.db2</packageName>
<tableNamePattern>${DB_ALLOWED_TABLES}</tableNamePattern>
        <targetFolder>src/main/java</targetFolder>
      <exportBeans>true</exportBeans>
<exportForeignKeys>false</exportForeignKeys>
    </configuration>
      <dependencies>
        <dependency>
          <groupId>postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>9.1-901-1.jdbc4</version>
        </dependency>
      </dependencies>
    </plugin>

    <!-- Document Generation -->
     <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-javadoc-plugin</artifactId>
      <version>2.5</version>
      <executions>
        <execution>
            <goals>
          <goal>javadoc</goal>
            </goals>
            <phase>compile</phase>
        </execution>
      </executions>

      <configuration>
        <quiet>true</quiet>
        <verbose>false</verbose>
        <encoding>UTF-8</encoding>
        <verbose>false</verbose>
        <show>public</show>
        <subpackages>hoot.services</subpackages>

        <doclet>com.sun.jersey.wadl.resourcedoc.ResourceDoclet</doclet>
        <docletArtifacts>
            <docletArtifact>
          <groupId>com.sun.jersey.contribs</groupId>
          <artifactId>wadl-resourcedoc-doclet</artifactId>
          <version>${jersey.version}</version>
            </docletArtifact>
            <!--
          Also specify jersey and xerces as doclet artifacts as the ResourceDoclet
          uses classes provided by them to generate the resourcedoc.
             -->
            <docletArtifact>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-server</artifactId>
          <version>${jersey.version}</version>
            </docletArtifact>
            <docletArtifact>
          <groupId>xerces</groupId>
          <artifactId>xercesImpl</artifactId>
          <version>2.6.1</version>
            </docletArtifact>
        </docletArtifacts>
<useStandardDocletOptions>false</useStandardDocletOptions>
        <additionalparam>-output ${project.build.outputDirectory}/resourcedoc.xml</additionalparam>

          </configuration>
    </plugin>

    <plugin>
        <groupId>com.sun.tools.xjc.maven2</groupId>
        <artifactId>maven-jaxb-plugin</artifactId>
        <version>1.1</version>
        <executions>
      <execution>
          <phase>generate-sources</phase>
          <goals>
              <goal>generate</goal>
          </goals>
      </execution>
        </executions>
        <configuration>
      <generatePackage>hoot.services</generatePackage>
      <schemaDirectory>src/main/xsd</schemaDirectory>
      <includeSchemas>
          <includeSchema>**/*.xsd</includeSchema>
      </includeSchemas>
      <extension>true</extension>
      <strict>false</strict>
      <verbose>false</verbose>
        </configuration>
    </plugin>


    <plugin>
        <groupId>com.sun.jersey.contribs</groupId>
        <artifactId>maven-wadl-plugin</artifactId>
        <version>${jersey.version}</version>

        <executions>

        <!-- Generate OSM WADL -->
            <execution>
                <id>generate-osm-wadl</id>
                <goals>
                    <goal>generate</goal>
                </goals>
                <phase>compile</phase>

                <configuration>
                    <wadlFile>${project.build.outputDirectory}/hootenanny_rest_doc_osm.wadl
                    </wadlFile>
                    <formatWadlFile>true</formatWadlFile>
                    <baseUri>http://localhost:8080/hoot-services/osm</baseUri>
                    <packagesResourceConfig>
                        <param>hoot.services.controllers.osm</param>
                    </packagesResourceConfig>
                    <wadlGenerators>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
                            </className>
                            <properties>
                                <property>
                                    <name>applicationDocsFile</name>
                                    <value>${basedir}/src/main/doc/application-doc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
                            </className>
                            <properties>
                                <property>
                                    <name>grammarsFile</name>
                                    <value>${basedir}/src/main/doc/application-grammars.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
                            <properties>
                                <property>
                                    <name>resourceDocFile</name>
                                    <value>${project.build.outputDirectory}/resourcedoc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                    </wadlGenerators>
                </configuration>

            </execution>


            <!-- Generate Job WADL -->
            <execution>
                <id>generate-job-wadl</id>
                <goals>
                    <goal>generate</goal>
                </goals>
                <phase>compile</phase>
                <configuration>
                    <wadlFile>${project.build.outputDirectory}/hootenanny_rest_doc_job.wadl
                    </wadlFile>
                    <formatWadlFile>true</formatWadlFile>
                    <baseUri>http://localhost:8080/hoot-services/job</baseUri>
                    <packagesResourceConfig>
                        <param>hoot.services.controllers.job</param>
                    </packagesResourceConfig>
                    <wadlGenerators>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
                            </className>
                            <properties>
                                <property>
                                    <name>applicationDocsFile</name>
                                    <value>${basedir}/src/main/doc/application-doc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
                            </className>
                            <properties>
                                <property>
                                    <name>grammarsFile</name>
                                    <value>${basedir}/src/main/doc/application-grammars.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
                            <properties>
                                <property>
                                    <name>resourceDocFile</name>
                                    <value>${project.build.outputDirectory}/resourcedoc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                    </wadlGenerators>
                </configuration>

            </execution>

            <!-- Generate info WADL -->
            <execution>
                <id>generate-info-wadl</id>
                <goals>
                    <goal>generate</goal>
                </goals>
                <phase>compile</phase>
                <configuration>
                    <wadlFile>${project.build.outputDirectory}/hootenanny_rest_doc_info.wadl
                    </wadlFile>
                    <formatWadlFile>true</formatWadlFile>
                    <baseUri>http://localhost:8080/hoot-services/info</baseUri>
                    <packagesResourceConfig>
                        <param>hoot.services.controllers.info</param>
                    </packagesResourceConfig>
                    <wadlGenerators>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
                            </className>
                            <properties>
                                <property>
                                    <name>applicationDocsFile</name>
                                    <value>${basedir}/src/main/doc/application-doc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
                            </className>
                            <properties>
                                <property>
                                    <name>grammarsFile</name>
                                    <value>${basedir}/src/main/doc/application-grammars.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
                            <properties>
                                <property>
                                    <name>resourceDocFile</name>
                                    <value>${project.build.outputDirectory}/resourcedoc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                    </wadlGenerators>
                </configuration>

            </execution>


            <!-- Generate ogr WADL -->
            <execution>
                <id>generate-ogr-wadl</id>
                <goals>
                    <goal>generate</goal>
                </goals>
                <phase>compile</phase>
                <configuration>
                    <wadlFile>${project.build.outputDirectory}/hootenanny_rest_doc_ogr.wadl
                    </wadlFile>
                    <formatWadlFile>true</formatWadlFile>
                    <baseUri>http://localhost:8080/hoot-services/ogr</baseUri>
                    <packagesResourceConfig>
                        <param>hoot.services.controllers.ogr</param>
                    </packagesResourceConfig>
                    <wadlGenerators>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
                            </className>
                            <properties>
                                <property>
                                    <name>applicationDocsFile</name>
                                    <value>${basedir}/src/main/doc/application-doc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
                            </className>
                            <properties>
                                <property>
                                    <name>grammarsFile</name>
                                    <value>${basedir}/src/main/doc/application-grammars.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
                            <properties>
                                <property>
                                    <name>resourceDocFile</name>
                                    <value>${project.build.outputDirectory}/resourcedoc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                    </wadlGenerators>
                </configuration>

            </execution>


            <!-- Generate ingest WADL -->
            <execution>
                <id>generate-ingest-wadl</id>
                <goals>
                    <goal>generate</goal>
                </goals>
                <phase>compile</phase>
                <configuration>
                    <wadlFile>${project.build.outputDirectory}/hootenanny_rest_doc_ingest.wadl
                    </wadlFile>
                    <formatWadlFile>true</formatWadlFile>
                    <baseUri>http://localhost:8080/hoot-services/ingest</baseUri>
                    <packagesResourceConfig>
                        <param>hoot.services.controllers.ingest</param>
                    </packagesResourceConfig>
                    <wadlGenerators>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
                            </className>
                            <properties>
                                <property>
                                    <name>applicationDocsFile</name>
                                    <value>${basedir}/src/main/doc/application-doc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
                            </className>
                            <properties>
                                <property>
                                    <name>grammarsFile</name>
                                    <value>${basedir}/src/main/doc/application-grammars.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>

                        <wadlGeneratorDescription>
                            <className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
                            <properties>
                                <property>
                                    <name>resourceDocFile</name>
                                    <value>${project.build.outputDirectory}/resourcedoc.xml</value>
                                </property>
                            </properties>
                        </wadlGeneratorDescription>
                    </wadlGenerators>
                </configuration>

            </execution>

        </executions>

      <dependencies>
      
        <!-- powermock needs this to run in Java 1.7 (deegree also uses this).  javassist behavior
        in 1.7 is kind of erratic, so upgrade with caution. -->
        <dependency>
          <groupId>org.javassist</groupId>
          <artifactId>javassist</artifactId>
          <version>3.18.2-GA</version>
        </dependency>

        <!-- Apache commons -->
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-lang3</artifactId>
          <version>3.1</version>
        </dependency>
        <dependency>
          <groupId>commons-io</groupId>
          <artifactId>commons-io</artifactId>
          <version>2.4</version>
        </dependency>
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-compress</artifactId>
          <version>1.0</version>
        </dependency>
        <dependency>
          <groupId>commons-codec</groupId>
          <artifactId>commons-codec</artifactId>
          <version>1.7</version>
        </dependency>
        <dependency>
          <groupId>commons-fileupload</groupId>
          <artifactId>commons-fileupload</artifactId>
          <version>1.3</version>
        </dependency>

        <!-- database driver -->
        <dependency>
          <groupId>postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>9.1-901-1.jdbc4</version>
        </dependency>

        <!-- XML processing -->

        <!-- XPath -->
        <dependency>
          <groupId>xalan</groupId>
          <artifactId>xalan</artifactId>
          <version>2.7.1</version>
        </dependency>
        <!-- DOM -->
        <!-- deegree actually depends on a later version of Xerces but it appears classes have
        been refactored in that version and class not found errors occur if this version isn't
        included.  Later, when it comes time to use deegree more heavily, this conflict may need to
        be resolved. -->
        <dependency>
          <groupId>xerces</groupId>
          <artifactId>xercesImpl</artifactId>
          <version>2.9.1</version>
        </dependency>


        <!-- QueryDsl Dependency -->
        <dependency>
          <groupId>com.mysema.querydsl</groupId>
          <artifactId>querydsl-sql</artifactId>
          <version>${querydsl.version}</version>
        </dependency>

        <dependency>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
          <version>11.0.2</version>
        </dependency>




        <!-- Spring framework provides dependency injection, transaction management, and a hook
        into db connection pooling via commons dbcp -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
          <version>${spring.version}</version>
          <exclusions>
            <exclusion>
              <groupId>commons-logging</groupId>
              <artifactId>commons-logging</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>${spring.version}</version>
        </dependency>

        <!-- Jersey is for hosting RESTful web service endpoints -->
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-server</artifactId>
          <version>${jersey.version}</version>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-servlet</artifactId>
          <version>${jersey.version}</version>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-json</artifactId>
          <version>${jersey.version}</version>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-bundle</artifactId>
          <version>${jersey.version}</version>
        </dependency>


        <dependency>
          <groupId>org.antlr</groupId>
          <artifactId>antlr-runtime</artifactId>
          <version>3.4</version>
        </dependency>

      </dependencies>
    </plugin>



    </plugins>
  </build>
  <dependencies>

    <!-- web -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <!-- This is the version the jersey test framework uses. -->
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>4.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore-nio</artifactId>
      <version>4.3</version>
    </dependency>
     <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpasyncclient</artifactId>
      <version>4.0</version>
    </dependency>

    <!-- proxy -->
    <dependency>
        <groupId>org.mitre.dsmiley.httpproxy</groupId>
        <artifactId>smiley-http-proxy-servlet</artifactId>
        <version>1.6</version>
    </dependency>

    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.5.8</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.5.8</version>
    </dependency>

    <!-- Apache commons -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.7</version>
    </dependency>
  <dependency>
    <groupId>commons-httpclient</groupId>
    <artifactId>commons-httpclient</artifactId>
    <version>3.1</version>
  </dependency>

    <!-- date/time parsing -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>2.3</version>
    </dependency>

    <!-- database driver -->
    <dependency>
      <groupId>postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>9.1-901-1.jdbc4</version>
    </dependency>

    <!-- XML processing -->

    <!-- XPath -->
    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.7.1</version>
    </dependency>
    <!-- DOM -->
    <!-- deegree actually depends on a later version of Xerces but it appears classes have
    been refactored in that version and class not found errors occur if this version isn't
    included.  Later, when it comes time to use deegree more heavily, this conflict may need to
    be resolved. -->
    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
      <version>2.9.1</version>
    </dependency>

    <!-- JSON processing -->
    <dependency>
      <groupId>com.googlecode.json-simple</groupId>
      <artifactId>json-simple</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>1.9.2</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.2</version>
    </dependency>
  <!-- QueryDsl Dependency -->
  <dependency>
    <groupId>com.mysema.querydsl</groupId>
    <artifactId>querydsl-sql</artifactId>
    <version>${querydsl.version}</version>
  </dependency>
<dependency>
  <groupId>com.mysema.querydsl</groupId>
  <artifactId>querydsl-sql-codegen</artifactId>
  <version>${querydsl.version}</version>
  <scope>provided</scope>
</dependency>
<dependency>
  <groupId>com.google.guava</groupId>
  <artifactId>guava</artifactId>
  <version>11.0.2</version>
</dependency>

    <!-- Javascript Support -->
    <dependency>
      <groupId>org.mozilla</groupId>
      <artifactId>rhino</artifactId>
      <version>1.7R4</version>
    </dependency>

    <!--  OSM Parsing Support -->
    <dependency>
      <groupId>org.openstreetmap.osmosis</groupId>
      <artifactId>osmosis-core</artifactId>
      <version>0.43-RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.openstreetmap.osmosis</groupId>
      <artifactId>osmosis-testutil</artifactId>
      <version>0.43-RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.openstreetmap.osmosis</groupId>
      <artifactId>osmosis-xml</artifactId>
      <version>0.43-RELEASE</version>
    </dependency>

    <!-- Spring framework provides dependency injection, transaction management, and a hook
    into db connection pooling via commons dbcp -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${spring.version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Jersey is for hosting RESTful web service endpoints -->
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-servlet</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-json</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-bundle</artifactId>
      <version>${jersey.version}</version>
    </dependency>

    <!-- deegree provides OGC compliant services -->
    <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-services-wps</artifactId>
      <version>${deegree.version}</version>
      <exclusions>
       <exclusion>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
       </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-services-wfs</artifactId>
      <version>${deegree.version}</version>
      <exclusions>
       <exclusion>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
       </exclusion>
       <exclusion>
        <groupId>javassist</groupId>
        <artifactId>javassist</artifactId>
       </exclusion>
      </exclusions>
    </dependency>


  <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-sqldialect-postgis</artifactId>
      <version>${deegree.version}</version>
    </dependency>

  <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-featurestore-sql</artifactId>
      <version>${deegree.version}</version>
    </dependency>

    <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-services-config</artifactId>
      <version>${deegree.version}</version>
    </dependency>
    <!--
    <dependency>
      <groupId>org.deegree</groupId>
      <artifactId>deegree-services-resources</artifactId>
      <version>${deegree.version}</version>
    </dependency>
-->
  <dependency>
    <groupId>org.antlr</groupId>
    <artifactId>antlr-runtime</artifactId>
    <version>3.4</version>
  </dependency>
    <!-- test -->

    <!-- JUnit is the core testing framework -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <!-- Mockito allows for using mock object in unit testing -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>
    <!-- PowerMock builds on top of Mockito -->
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-easymock</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-core</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-support</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-reflect</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- mocking api -->
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymockclassextension</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>
    <!-- cpsuite allows for having separate unit and integration test suites -->
     <dependency>
      <groupId>cpsuite</groupId>
      <artifactId>cpsuite</artifactId>
      <version>1.2.5</version>
      <scope>test</scope>
    </dependency>
    <!-- This sets up the test framework for Jersey web services -->
    <dependency>
      <groupId>com.sun.jersey.jersey-test-framework</groupId>
      <artifactId>jersey-test-framework-inmemory</artifactId>
      <version>${jersey.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

</project>
