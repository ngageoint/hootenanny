{
    "Cleaning": {
        "members": {
            "hoot::DualWaySplitter": "Split Dual Way"
        }
    },
    "General": {
        "members": {
            "add.review.tags.to.features": "Add review tags to individual features",
            "review.score.criterion.min.threshold": "Min Review Score",
            "review.score.criterion.max.threshold": "Max Review Score"
        }
    },
    "Attribute": {
        "members": {
            "attribute.conflation.aggressive.highway.joining": "Aggressively join highways",
            "attribute.conflation.allow.ref.geometry.changes.for.bridges": "Change reference layer bridge geometries",
            "attribute.conflation.allow.reviews.by.score": "Allow reviews by score",
            "corner.splitter.rounded.split": "Split Rounded Corners"
        }
    },
    "Roads": {
        "matcher": "hoot::HighwayMatchCreator",
        "merger": "hoot::HighwayMergerCreator",
        "members": {
            "search.radius.highway": "Highway search radius",
            "highway.merge.tags.only": "Merge tags only"
        }
    },
    "RoadsNetwork": {
        "matcher": "hoot::NetworkMatchCreator",
        "merger": "hoot::NetworkMergerCreator",
        "members": {}
    },
    "Buildings": {
        "matcher": "hoot::BuildingMatchCreator",
        "merger": "hoot::BuildingMergerCreator",
        "members": {
            "building.review.if.secondary.newer": "Review if secondary dataset is newer",
            "building.date.format": "Date format",
            "building.date.tag.key": "Date tag key",
            "building.keep.more.complex.geometry.when.auto.merging": "Keep more complicated geometry when auto merging",
            "building.review.matches.other.than.one.to.one": "Mark all non one to one matches for review" 
        }
    },
    "Pois": {
        "matcher": "hoot::ScriptMatchCreator,PoiGeneric.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "PoiPolygon": {
        "matcher": "hoot::PoiPolygonMatchCreator",
        "merger": "hoot::PoiPolygonMergerCreator",
        "members": {
            "poi.polygon.address.match.enabled": "Enable address matching",
            "poi.polygon.disable.same.source.conflation": "Disable same source conflation",
            "poi.polygon.disable.same.source.conflation.match.tag.key.prefix.only": "Match key prefix only if same source conflation disabled",
            "poi.polygon.match.distance.threshold" : "Match distance threshold",
            "poi.polygon.match.evidence.threshold": "Match evidence threshold",
            "poi.polygon.name.score.threshold": "Name score threshold",
            "poi.polygon.review.distance.threshold": "Review distance threshold",
            "poi.polygon.review.evidence.threshold": "Review evidence threshold",
            "poi.polygon.review.if.matched.types": "Tags used to flag reviews",
            "poi.polygon.source.tag.key": "Source key used when disabling same source conflation",
            "poi.polygon.type.score.threshold": "Type score threshold"
        }
    },
    "Areas": {
        "matcher": "hoot::ScriptMatchCreator,Area.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Railways": {
        "matcher": "hoot::ScriptMatchCreator,Railway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Powerlines": {
        "matcher": "hoot::ScriptMatchCreator,PowerLine.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Waterways": {
        "matcher": "hoot::ScriptMatchCreator,LinearWaterway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    }
}
