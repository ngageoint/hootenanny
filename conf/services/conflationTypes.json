{
    "General": {
        "members": {
            "add.review.tags.to.features": "Add review tags to individual features",
            "corner.splitter.rounded.split": "Round corners when splitting",
            "overwrite.tag.merger.exclude": "Tag overwrite exclude list",
            "review.score.criterion.max.threshold": "Maximum review score",
            "review.score.criterion.min.threshold": "Minimum review score"
        }
    },
    "Cleaning": {
        "members": {
            "hoot::DualWaySplitter": "Split divided highways"
        }
    },
    "Attribute": {
        "members": {
            "attribute.conflation.aggressive.highway.joining": "Aggressively join roads",
            "attribute.conflation.allow.reviews.by.score": "Allow reviews by score",
            "attribute.conflation.ref.tag.overwrite.exclude": "Reference feature tags not to be overwritten",
            "attribute.conflation.suppress.building.tag.on.multipoly.relation.constituents": "Suppress building tags on multi-polygon relation building members"
        }
    },
    "Differential": {
        "matcher": "",
        "merger": "",
        "members": {
            "differential.remove.unconflatable.data": "Remove unconflatable data in the secondary input from the output",
            "differential.treat.reviews.as.matches": "Treat reviews as matches and remove from the output",
            "differential.snap.unconnected.roads": "Snap unconnected secondary roads to reference roads",
            "snap.unconnected.ways.snap.tolerance": "Maximum distance, in meters, to allow snapping unconnected roads to existing roads",
            "snap.unconnected.ways.use.existing.way.nodes": "Reuse existing road nodes when snapping unconnected roads",
            "snap.unconnected.ways.existing.way.node.tolerance": "Maximum distance, in meters, to allow snapping unconnected roads to existing road nodes"
        }
    },
    "Roads": {
        "matcher": "hoot::HighwayMatchCreator",
        "merger": "hoot::HighwayMergerCreator",
        "members": {
            "search.radius.highway": "Highway search radius",
            "highway.merge.tags.only": "Merge road tags only"
        }
    },
    "RoadsNetwork": {
        "matcher": "hoot::NetworkMatchCreator",
        "merger": "hoot::NetworkMergerCreator",
        "members": {}
    },
    "Buildings": {
        "matcher": "hoot::BuildingMatchCreator",
        "merger": "hoot::BuildingMergerCreator",
        "members": {
            "building.changed.review": "Use the changed review",
            "building.changed.review.iou.threshold": "Intersection over Union threshold below which the changed review is triggered",
            "building.date.format": "Date format",
            "building.date.tag.key": "Date tag key",
            "building.force.contained.match": "Force matches when one building contains another",
            "building.keep.more.complex.geometry.when.auto.merging": "Keep more complex geometry when merging",
            "building.match.threshold": "Score threshold for matching",
            "building.merge.many.to.many.matches": "Always merge many to many matches",
            "building.review.if.secondary.newer": "Review if secondary feature is newer",
            "building.review.matches.other.than.one.to.one": "Review matches that are not one to one"
        }
    },
    "Pois": {
        "matcher": "hoot::ScriptMatchCreator,PoiGeneric.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {
            "poi.ignore.type.if.name.present": "Ignore type if name present"
        }
    },
    "PoiPolygon": {
        "matcher": "hoot::PoiPolygonMatchCreator",
        "merger": "hoot::PoiPolygonMergerCreator",
        "members": {
            "poi.polygon.allow.cross.conflation.merging": "Allow merging of Building and Poi to Polygon matches",
            "poi.polygon.auto.merge.many.poi.to.one.poly.matches": "Merge many to one POI to polygon matches",
            "poi.polygon.disable.same.source.conflation": "Disable same source conflation",
            "poi.polygon.disable.same.source.conflation.match.tag.key.prefix.only": "Match key prefix only if same source conflation disabled",
            "poi.polygon.keep.closest.matches.only": "Keep only the closest matching POI to a polygon",
            "poi.polygon.match.distance.threshold" : "Match distance threshold",
            "poi.polygon.match.evidence.threshold": "Match evidence threshold",
            "poi.polygon.name.score.threshold": "Name score threshold",
            "poi.polygon.promote.points.with.addresses.to.pois": "Promote point with addresses to POIs",
            "poi.polygon.review.distance.threshold": "Review distance threshold",
            "poi.polygon.review.evidence.threshold": "Review evidence threshold",
            "poi.polygon.review.if.matched.types": "Tags used to flag reviews",
            "poi.polygon.review.multiuse.buildings": "Review POI matches with multi-use buildings",
            "poi.polygon.source.tag.key": "Source key used when disabling same source conflation",
            "poi.polygon.type.score.threshold": "Type score threshold"
        }
    },
    "Areas": {
        "matcher": "hoot::ScriptMatchCreator,Area.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {
            "search.radius.area": "Area search radius"
        }
    },
    "Railways": {
        "matcher": "hoot::ScriptMatchCreator,Railway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {
            "search.radius.railway": "Railway search radius"
        }
    },
    "Powerlines": {
        "matcher": "hoot::ScriptMatchCreator,PowerLine.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Waterways": {
        "matcher": "hoot::ScriptMatchCreator,LinearWaterway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {
            "search.radius.waterway": "Waterway search radius"
        }
    }
}
