//
// The ConfigOptions.asciidoc is a specially formatted file that is parsed
// during the build process to generate the ConfigOptions.h header file and
// user documentation. Changing the default values in this file will change
// the way Hootenanny runs so be careful, this isn't just documentation.
//
// This file is also parsed by asciidoc to generate the user documentation. Look
// at that; our docs and code are in lock step! Nice. Please keep this in mind
// when writing documentation. This isn't just comments, this is user
// documentation. Try to include the following information in the description:
//
// * What does this configuration change?
// * If relevant, what are the units of the config option (e.g. meters)?
// * Where can the user go to get more information? Please reference the
//   appropriate document. E.g. "See `convert` in the _Command Line
//   Reference_ for more information."
// * What other options may be of interest? E.g. "See also
//   `big.perty.op.sigma`"
// * Please keep the list in Alphabetical order.
//
// The format is as follows:
//
// The section name is all lowercase and separated by periods. This shouldn't
// contain any special characters.
// === key.name
//
// * Data Type: <string, double, list, bool>
// * Default Value: <value>
//
// If the default value is for a list then the default value should be followed
// by a number of sub items in the list. E.g.
// * Default Value:
// ** `<Value 1>`
// ** `<Value 2>`
// The left ticks provide proper formatting in the documentation.
//
// Finally the section that contains the documentation. This is free-form
// asciidoc just make sure you don't start any lines with "=== ".
// http://www.methods.co.nz/asciidoc/
//
=== add.attributes.visitor.add.only.if.empty

* Data Type: bool
* Default Value: `false`

If true and an element already has a non-empty attribute (attribute without a default value) with
the same key as one specified in add.attributes.visitor.kvps, then the AddAttributesVisitor will not
add the attribute.  If false, then AddAttributesVisitor will add the attribute to the element
regardless.

=== add.attributes.visitor.chain.element.criteria

* Data Type: bool
* Default Value: `false`

If set to true and multiple criterion are specified in add.attributes.visitor.element.criteria,
the attributes of elements will be modified only if they satisfy all of the criteria.  If set to
false, then only one of the specified criteria must be met in order to modify the attributes of an
element.

=== add.attributes.visitor.element.criteria

* Data Type: list
* Default Value: ``

One or more element criteria used for selecting elements whose attributes to modify. Delimit names
with '='. From the command line, names with ';' and surround the entire list in double quotes.
E.g. "hoot::TagCriterion;hoot::ReviewRelationCriterion"

=== add.attributes.visitor.kvps

* Data Type: list
* Default Value:
** ``

List of element attribute key/value pairs to add with the AddAttributesVisitor of the form
key=value.  The AddAttributesVisitor is generally used to repair a corrupted OSM output, as the
attributes are normally added to the output automatically.  Valid key values are: changeset,
timestamp, user, uid, or version.

=== add.ref.visitor.information.only

* Data Type: bool
* Default Value: `true`

Typically REF1/2 values are only applied to elements with informational tags (e.g. name=foo),
however setting this to false will apply REF1/2 values to all elements.

=== add.ref1.visitor.prefix

* Data Type: string
* Default Value: ``

Prefix to apply to REF1 values.

The REF1 values are typically used when training a model. See the Developer Documentation for
details.

=== add.review.tags.to.features

* Data Type: bool
* Default Value: `false`

If true, not only will review relations receive the hoot:review:needs tag, the features involved in
the review will receive them as well.

=== add.uuid.visitor.key

* Data Type: string
* Default Value: `uuid`

Tag key used by AddUuidVisitor for adding custom unique ID's to data.

=== address.additional.tag.keys

* Data Type: list
* Default Value:
** ``

By default,conflation examines standard OSM tags for address comparisons (see the addressTagKeys
file).  You can expand the tag keys searched by populating this list. From the command line,
separate list items with a semicolon and surround the entire list in double quotes.

=== address.allow.lenient.house.number.matching

* Data Type: bool
* Default Value: `true`

If true, conflation that uses address matching will allow house number subletter mismatches for the
addresses with the same house number.  e.g. when enabled, 23a Elm Street matches 23 Elm Street

=== address.scorer.enable.caching

* Data Type: bool
* Default Value: `true`

Allows address comparison to score addresses parsed from elements. This is generally only to be
turned off when running certain unit tests which are incompatible with it being enabled.

=== address.tag.keys.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/addressTagKeys`

Flat file containing tag keys that make up feature address components.

=== address.translate.to.english

* Data Type: bool
* Default Value: `false`

If true, Hootenanny will attempt to translate to English the value of any tag that is part of an
address before normalizing it during conflation address matching (note that address normalization
may involve some form of language translation even when this setting is).  This can have significant
impact on the runtime performance of conflation when enabled and should only be enabled if the
source data is known to have non-English addresses.  The configuration option,
'language.translation.translator', controls which translator is used.

=== address.use.default.language.translation.only

* Data Type: bool
* Default Value: `true`

If true, conflation using address matching will use only libpostal for translating languages in
addresses, which occurs during address normalization.  If false, and  address.translate.to.english
is enabled, POI/Polygon conflation will use additional to English language translation before
address normalization.  Disable this only if libpostal's language translation is not adequate for
your language translation needs.

=== angle.histogram.extractor.bins

* Data Type: int
* Default Value: `16`

The number of data bins used by the AngleHistogramExtractor.

=== angle.histogram.extractor.smoothing

* Data Type: double
* Default Value: `0.0`

Smoothing value in radians used by the AngleHistogramExtractor.

=== api.db.email

* Data Type: string
* Default Value: ``

Email address of the API database user.  Can be set here for debugging and testing.

=== apidb.bulk.inserter.output.files.copy.location

* Data Type: string
* Default Value: ``

Use this option if you wish to retain the file data generated during an OSM/Hootenanny API database
write.  This option is not needed and will be ignored if writing OSM data to a SQL file that will be
applied/written to an OSM API database at a later time.  If this option is populated, any file data
files generated as a result of executing the hoot convert command with an OSM API database target
are copied to the specified location.  This option should be set to a full file path to a SQL
file (.sql).

=== apidb.bulk.inserter.run.validation.in.memory

* Data Type: bool
* Default Value: `false`

When set to true, this bypasses STXXL disk writing completely when performing data validation, is
equivalent to apidb.bulk.inserter.validate.data=true and
apidb.bulk.inserter.stxxl.map.min.size=<infinity>, and overrides values passed in for those
settings.  If the system does not have enough memory to support in memory validation of the loaded
features, an out of memory error will occur.

=== apidb.bulk.inserter.starting.node.id

* Data Type: long
* Default Value: `1`

First record ID to assign to written nodes when writing to an OSM/Hootenanny API database or SQL
file.  Must be a positive number.  Use this when working with an offline database and know the
ID range you want to assign to node records.  If writing to an OSM API databse, this option is
ignored if "osmapidb.bulk.inserter.reserve.record.ids.before.writing.data" is set to true.

=== apidb.bulk.inserter.starting.way.id

* Data Type: long
* Default Value: `1`

First record ID to assign to written ways when writing to an OSM/Hootenanny API database or SQL file.
Must be a positive number.  Use this when working with an offline database and know the ID range you
want to assign to way records.  If writing to an OSM API databse, this option is
ignored if "osmapidb.bulk.inserter.reserve.record.ids.before.writing.data" is set to true.

=== apidb.bulk.inserter.starting.relation.id

* Data Type: long
* Default Value: `1`

First record ID to assign to written relations when writing to an OSM/Hootenanny API database or
SQL file.  Must be a positive number.  Use this when working with an offline database and know the
ID range you want to assign to relation records.  If writing to an OSM API database, this option is
ignored if "osmapidb.bulk.inserter.reserve.record.ids.before.writing.data" is set to true.

=== apidb.bulk.inserter.stxxl.map.min.size

* Data Type: long
* Default Value: `10000000`

Size at which the ID mappings storage for the OSM/Hootenanny API database bulk inserter switches
from a std::map to an stxxl::map, which is a container optimized for very large amounts of data.
For debugging purposes only.

=== apidb.bulk.inserter.temp.file.dir

* Data Type: string
* Default Value: `/tmp`

Allows for customizing where the OSM/Hootenanny API database bulk inserter stores temp files.

=== apidb.bulk.inserter.validate.data

* Data Type: bool
* Default Value: `false`

If true, the OSM/Hootenanny API database bulk inserter will renumber element IDs, check for
duplicated element IDs, check for invalid way node references, and check for invalid relation member
references.  Only duplicate element IDs and invalid way node references will cause a failure.
Invalid relation members will cause a warning to be logged.  You should enable this setting if you
are loading data that has not been previously validated in another OSM API database.  Enabling this
setting may cause writing to an OSM API database to occur more slowly.

=== arff.writer.precision

* Data Type: int
* Default Value: `17`

The precision of numeric values written to Attribute-Relation (.arff) files.

=== attribute.conflation.aggressive.highway.joining

* Data Type: bool
* Default Value: `false`

If true, allows Attribute Conflation to more aggressively rejoin ways with names and specific
highway attribution into those with less specific highway attribution and no names.  Enabling this
option may result in some false positive road joining.

=== attribute.conflation.allow.ref.geometry.changes.for.bridges

* Data Type: bool
* Default Value: `true`

If true, allows Attribute Conflation to modify the geometry of a reference road layer to accomodate
bridge features.  If false, any bridge features represented in the secondary dataset, but not in the
reference dataset will be lost.

=== attribute.conflation.allow.reviews.by.score

* Data Type: bool
* Default Value: `false`

If true, all reviews outside of the score range established by the configuration options
review.score.criterion.max/min.threshold will be removed.

=== attribute.conflation.suppress.building.tag.on.multipoly.relation.constituents

* Data Type: bool
* Default Value: `true`

If true, any buildings that are part of a multipolygon relation will have their building=yes tags
removed during Attribute Conflation.

=== attribute.score.extractor.use.weight

* Data Type: bool
* Default Value: `false`

Determines whether the AttributeScoreExtractor uses weighting when extracting scores.

=== attribute.value.criterion.comparison.type

* Data Type: string
* Default Value: ``

The value comparison type used by AttributeValueCriterion. Valid values are: NumericEqualTo,
NumericLessThan, NumericLessThanOrEqualTo, NumericGreaterThan, NumericGreaterThanOrEqualTo,
TextEqualTo, TextContains, TextStartsWith, or TextEndsWith.

=== attribute.value.criterion.comparison.value

* Data Type: string
* Default Value: ``

The value to compare with AttributeValueCriterion.

=== attribute.value.criterion.type

* Data Type: string
* Default Value: ``

The type of attribute to compare with AttributeValueCriterion. Valid key values are: changeset,
timestamp, user, uid, or version.

=== autocorrect.options

* Data Type: bool
* Default Value: `true`

Temporary setting that addresses some Hootenanny iD Editor UI bugs.  See
MatchFactory::_tempFixDefaults() for more info.

=== bounds.output.file

* Data Type: string
* Default Value: `tmp/bounds.osm`

Output location for a bounds file when the `--write-bounds` option is selected for either the
`changeset-derive`, `convert`, or `crop` commands.

=== buffered.overlap.extractor.portion

* Data Type: double
* Default Value: `0.1`

The portion of the sqrt max of the area that the BufferedOverlapExtractor buffers object by.

=== building.address.match.enabled

* Data Type: bool
* Default Value: `true`

If true, Building Conflation will use building addresses to resolve match conflicts.

=== building.adjoining.tag.score.threshold

* Data Type: double
* Default Value: `0.8`

The minimum similarity score required for an adjoining building (building=terrace) to be recognized
during conflation.

=== building.changed.review

* Data Type: bool
* Default Value: `false`

If enabled, during building merging conflation will look for a "changed" building defined as a
matched building pair where their Intersection over Union value is greater than zero but falls below
the value specified in building.changed.review.iou.threshold. If the pair is classified as "changed"
they will be marked for review.

=== building.changed.review.iou.threshold

* Data Type: double
* Default Value: `0.2`

See building.changed.review.

=== building.date.format

* Data Type: string
* Default Value: `yyyy-MM-ddTHH:mm`

Date format string used by the building date tag value.  See QDateTime::fromString for more details.

=== building.date.tag.key

* Data Type: string
* Default Value: `source:date`

Tag key used by the building.review.if.secondary.newer configuration option.

=== building.force.contained.match

* Data Type: bool
* Default Value: `false`

If true, a building pair has been flagged for review, and one member of the pair is contained
completely inside the other, the pair will be matched instead.

=== building.keep.more.complex.geometry.when.auto.merging

* Data Type: bool
* Default Value: `true`

If true, when buildings are auto-merged during conflation the geometry of the more complex building
is the one that is kept.  If false or the buildings are equally complex, then the geometry of the
reference building is the geometry kept.  This does not apply to feature merging done during the
manual review process.

=== building.match.threshold

* Data Type: double
* Default Value: `${conflate.match.threshold.default}`

The threshold at which a match is called a match for buildings.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== building.merge.many.to.many.matches

* Data Type: bool
* Default Value: `false`

If false, many to many building matches will result in a review. If true, they will all be merged
together when matched.

=== building.miss.threshold

* Data Type: double
* Default Value: `${conflate.miss.threshold.default}`

The threshold at which a miss is called a miss for buildings.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== building.part.merger.thread.count

* Data Type: int
* Default Value: `8`

Number of threads used by BuildingPartMergerOp to process buildings.  A value of less than one
allows Hootenanny to automatically determine the optimal thread count.  The default value
corresponds to the default number of threads available on the Hootenanny VM and you may obtain
better performance by changing the value when dealing with other environments.

=== building.review.if.secondary.newer

* Data Type: bool
* Default Value: `false`

If true, any buildings in the secondary layer will be automatically reviewed against potentially
matching features in the reference layer if they are marked with a more recent date than that of the
reference feature.

=== building.review.matches.other.than.one.to.one

* Data Type: bool
* Default Value: `false`

If true, any building matches other than 1:1 matches are automatically marked for review.

=== building.review.threshold

* Data Type: double
* Default Value: `${conflate.review.threshold.default}`

The threshold at which a review is called a review for buildings.  See
`conflate.review.threshold.default`.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== changeset.allow.deleting.reference.features

* Data Type: bool
* Default Value: `true`

If true, changesets derived are allowed to issue delete statements for the reference dataset (first
dataset passed to the changeset deriver) if calculated.  If false, any delete statements calculated
for the reference dataset will be ignored and not added to changeset output.

=== changeset.apidb.size.max

* Data Type: long
* Default Value: `1000`

This is the maximum number of elements to write to an OSM API database in a changeset push.
This value is used when splitting a changeset into smaller pieces.

NOTE: This is different to `changeset.max.size` which is the maximum number of elements that the
database can handle in a single changeset.

=== changeset.apidb.writer.debug.output

* Data Type: bool
* Default Value: `false`

When set to true the `OsmApiWriter` class will write each changeset upload request and
response to the `$HOOT_HOME/tmp` directory (by default) for debugging.

NOTE: Use with care, the 28 MB Djibouti test changeset ballooned into 37 MB of debug output
files

=== changeset.apidb.writer.debug.output.path

* Data Type: string
* Default Value: `tmp`

Directory path to store debug output files in for `changeset-appy` commands.

NOTE: Use with care, the 28 MB Djibouti test changeset ballooned into 37 MB of debug output
files

=== changeset.apidb.writers.max

* Data Type: long
* Default Value: `10`

The maximum number of writers to spawn for writing changesets in parallel to an OSM API database.

=== changeset.apidb.writers.throttle

* Data Type: bool
* Default Value: `false`

Flag to turn on throttling for OSM API changeset writes.  When turned on, each processing thread
will wait `changeset.api.writers.throttle.time` seconds after a successful write before submitting
another changeset to the OSM API.

=== changeset.apidb.writers.throttle.time

* Data Type: long
* Default Value: `30`

The number of seconds after a successful write before submitting another changeset to the OSM API.

=== changeset.description

* Data Type: string
* Default Value: `Hootenanny ingest`

The text description that is written to the OSM API database with a changeset.

=== changeset.hashtags

* Data Type: string
* Default Value: `#hootbot`

Set of semicolon separated hashtags associated with a changeset, used for querying changesets and
for conflation campaigns

=== changeset.max.size

* Data Type: long
* Default Value: `50000`

The maximum allowed element size of an OSM changeset that can be written to an OSM API database
in a single changeset.

=== changeset.replacement.allow.deleting.reference.features.outside.bounds

* Data Type: bool
* Default Value: `true`

If disabled, replacement changesets generated by `changeset-derive-replacement` will never add
delete statements for reference features falling outside of `convert.bounding.box`.

=== changeset.source

* Data Type: string
* Default Value: `Hootenanny`

Specifies the source for the edits that have been made in the changeset

=== changeset.user.id

* Data Type: long
* Default Value: `-1`

The user ID used by certain changeset writers when writing to an OSM API database.

=== changeset.xml.writer.add.timestamp

* Data Type: bool
* Default Value: `true`

If true, XML changesets will add the 'timestamp' attribute to the element tags.  If false, the
timestamp attribute will not be added.  This generally should only be set to false for testing
purposes.

=== circular.error.default.value

* Data Type: double
* Default Value: `15.0`

Set the circular error tag on features to this value, in meters, by default if the tag isn't already
populated.

=== config.options.file

* Data Type: string
* Default Value: `conf/core/ConfigOptions.asciidoc`

Path to this file.  Only modified during testing the Hootenanny options command.

=== conflate.match.building.model

* Data Type: string
* Default Value: `models/BuildingModel.rf`

Path to the RF building model. A new model can be created with `build-model`. Searches local path
and then `$HOOT_HOME/conf/`.

=== conflate.match.highway.classifier

* Data Type: string
* Default Value: `hoot::HighwayRfClassifier`

The highway match classifier to use. This should only be used for testing and debugging.

=== conflate.match.highway.model

* Data Type: string
* Default Value: `models/HighwayModel.rf`

Path to the RF highway model. A new model can be created with `build-model`. Searches local path
and then `$HOOT_HOME/conf/`. This is only relevant if the `conflate.match.highway.classifier` is
set to `hoot::HighwayRfClassifier`.

=== conflate.match.poi.model

* Data Type: string
* Default Value: `models/PoiModel.rf`

Path to the POI match classifier model. A new model can be created with `build-model`. Searches
local path and then `$HOOT_HOME/conf/`.

=== conflate.match.threshold.default

* Data Type: double
* Default Value: `0.6`

The default threshold at which a match is called a match. Valid values are between 0.0 and 1.0.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== conflate.miss.threshold.default

* Data Type: double
* Default Value: `0.6`

The default threshold at which a miss is called a miss. Valid values are between 0.0 and 1.0.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== conflate.post.ops

* Data Type: list
* Default Value:
** `hoot::SuperfluousNodeRemover`
** `hoot::SmallHighwayMerger`
** `hoot::ReplaceRoundabouts`
** `hoot::RemoveMissingElementsVisitor`
** `hoot::RemoveInvalidReviewRelationsVisitor`
** `hoot::RemoveDuplicateReviewsOp`
** `hoot::BuildingOutlineUpdateOp`
** `hoot::WayJoinerOp`
** `hoot::RemoveInvalidRelationVisitor`
** `hoot::RemoveInvalidMultilineStringMembersVisitor`
** `hoot::SuperfluousWayRemover`
** `hoot::RemoveDuplicateWayNodesVisitor`
** `hoot::DuplicateWayRemover`
** `hoot::RemoveEmptyRelationsOp`
** `hoot::ApiTagTruncateVisitor`
** `hoot::AddHilbertReviewSortOrderOp`

List of operations to run in the conflate command after data is conflated, but before exporting.
'hoot info --operators' displays information about the available operations.

=== conflate.pre.ops

* Data Type: list
* Default Value:
** `hoot::BuildingOutlineRemoveOp`
** `hoot::RemoveRoundabouts`
** `hoot::MapCleaner`
** `hoot::HighwayCornerSplitter`

Runs in the conflate command after data is loaded. 'hoot info --operators' displays information
about the available operations.

See also: <<MapCleanerTransforms,map.cleaner.transforms>>

=== conflate.remove.superfluous.ops

* Data Type: bool
* Default Value: `true`

Enabling this option allows Hootenanny to remove any operators defined in `conflate.pre.ops`,
`conflate.post.ops`, or `map.cleaner.transforms` before running conflation that are not associated
with the feature types being conflated as specified in the `match.creators` option. Doing so can
increase runtime performance for some inputs. e.g. If you're only conflating buildings, then any
operators used strictly for road data cleaning will be automatically disabled. This is primarily
used for debugging purposes and should normally be left enabled. See the `FilteredByCriteria`
interface for information about determining which feature types are associated with conflate
operators.

=== conflate.review.threshold.default

* Data Type: double
* Default Value: `0.6`

The default threshold at which a review is called a review. Reviews are also declared in some
other situations when the relationship is not clear. Valid values are between 0.0 and 1.0.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== conflate.stats.types

* Data Type: string
* Default Value: ``

The string that lists the types of conflation used in the user interface.  The possible values
are: reference, cookieCutter, average, and advancedConflation. TODO: Is this used anywhere?

=== conflate.tag.disable.value.truncation

* Data Type: bool
* Default Value: `false`

This will disable use of the ApiTagTruncateVisitor, which truncates tag values down to size limit
acceptable by the OpenStreetMap API, if found in either conflate.pre.ops or conflate.post.ops by
either the conflate or score-matches commands. Setting this option to true is generally intended for
testing purposes only.

=== conflate.tag.filter

* Data Type: string
* Default Value: ``

A JSON tag filter that is applied to filter features before conflation.  See the Hootenanny
User Guide "Feature Filtering" section for filter usage examples.

=== conflate.use.data.source.ids.1

* Data Type: bool
* Default Value: `true`

Determines whether the reader used by the conflate command to read the first input dataset will
use the element ID's specified by the input datasets (true) or use internal ID management for the
inputs (false).

=== conflate.use.data.source.ids.2

* Data Type: bool
* Default Value: `false`

Determines whether the reader used by the conflate command to read the second input dataset will
use the element ID's specified by the input datasets (true) or use internal ID management for the
inputs (false).

=== conflator.min.valid.score

* Data Type: double
* Default Value: `0.01`

This is the minimum valid manipulation score in the legacy greedy optimization routine. Setting
the value lower will create more (likely overzealous) matches. Setting the value higher will drop
less confident matches.

=== contains.node.criterion.id

* Data Type: long
* Default Value: `0`

ID of the node that ContainsNodeCriterion should search for.

=== convert.bounding.box

* Data Type: string
* Default Value: ``

If specified, supporting readers will limit data read from the data source to only features that
intersect the given bounding box. The format is "minx,miny,maxx,maxy" or
"min_lon,min_lat,max_lon,max_lat" specified in the projection of the input data source.  This
setting can be used with both the convert and conflate commands. See the documentation for more
details.

Example Usage:

----
hoot convert -D convert.bounding.box=106.851,-6.160,107.052,-5.913 input output
----

=== convert.bounding.box.hoot.api.database

* Data Type: string
* Default Value: ``

Same as convert.bounding.box but the resultant bounds filtering is only applied to Hootenanny API
database data sources when used with the convert and conflate commands.  This setting takes
precendence over the convert.bounding.box setting for Hootenanny API database data sources only.

=== convert.bounding.box.keep.entire.features.crossing.bounds

* Data Type: bool
* Default Value: `true`

If true, will not break apart features crossing the convert bounds. This is analagous to
crop.keep.entire.features.crossing.bounds used with the crop command, but used with the convert
command only and kept as a separate option with a different default value.

=== convert.bounding.box.keep.immediately.connected.ways.outside.bounds

* Data Type: bool
* Default Value: `false`

If enabled, bounded queries will also return ways that are outside of `convert.bounding.box` but
immediately connected to ways crossing or within the bounds. Can be used in conjunction with
`convert.bounding.box.tag.immediately.connected.out.of.bounds.ways`. Not supported by all readers.

=== convert.bounding.box.keep.only.features.inside.bounds

* Data Type: bool
* Default Value: `false`

If true, will throw out any features that do not fall completely within the convert bounds. This is
analagous to crop.keep.entire.features.crossing.bounds used with the crop command, but used with
the convert command only and kept as a separate option.

=== convert.bounding.box.osm.api.database

* Data Type: string
* Default Value: ``

Same as convert.bounding.box but the resultant bounds filtering is only applied to OSM API database
data sources when used with the convert and conflate commands.  This setting takes precendence over
the convert.bounding.box setting for OSM API database data sources only.

=== convert.bounding.box.tag.immediately.connected.out.of.bounds.ways

* Data Type: bool
* Default Value: `false`

If enabled, all ways that are outside of the bounds specified by convert.bounding.box when
performing a bounded API database query but are immediately connected to a way that falls within or
crosses the bounds are tagged with a custom tag. Must be used in conjunction with
`convert.bounding.box.keep.immediately.connected.ways.outside.bounds`. Not supported by all readers.

=== convert.require.area.for.polygon

* Data Type: bool
* Default Value: `true`

If true, an element must be classifiable as an area geometry in the Hootenanny schema in order to
be converted to a GEOS polygon.

=== convert.ops

* Data Type: list
* Default Value:
** ``

Specifies one or more semi-colon delimited map operations or visitors to apply before writing
converted data.  This is only applicable to the convert command. 'hoot info --operators' displays
information about the available operations.

=== cookie.cutter.alpha

* Data Type: double
* Default Value: `1000.0`

The size in meters used for alpha by the cookie cutter map operation (CookieCutterOp). A larger
value makes a smoother shape and a smaller value will create a rough shape with more holes. Value
in meters.

=== cookie.cutter.alpha.shape.buffer

* Data Type: double
* Default Value: `0.0`

The buffer to add to the alpha shape before cutting by the cookie cutter map operation
(CookieCutterOp). A negative value will make the shape smaller.  Value in meters.

=== cookie.cutter.output.crop

* Data Type: bool
* Default Value: `false`

Crops based on the polygon rather than doing a cookie cut when using the cookie cutter map
operation (see CookieCutterOp).

=== create.bogus.review.tags

* Data Type: bool
* Default Value: `false`

Creates example review tags for debugging. All reviews created with this mechanism are invalid.

=== crop.bounds

* Data Type: string
* Default Value: ``

Bounds used by the map cropper when cropping a map, of the form: minx,miny,maxx,maxy

=== crop.invert

* Data Type: bool
* Default Value: `false`

If false, will keep the data falling within the crop bounds. If true, will keep only data outside
of the bounds.

=== crop.keep.entire.features.crossing.bounds

* Data Type: bool
* Default Value: `false`

If true, will not break apart features crossing the crop bounds. Ignored if crop.invert is enabled.

=== crop.keep.only.features.inside.bounds

* Data Type: bool
* Default Value: `false`

If true, will throw out any features that do not fall completely within the crop bounds. Ignored if
crop.invert is enabled.

=== crop.random.max.node.count

* Data Type: int
* Default Value: `-1`

The maximum number of nodes to be cropped out when running either the `crop-random` command or
`RandomMapCropper`.

=== crop.random.pixel.size

* Data Type: double
* Default Value: `0.001`

The pixel size used when running either the `crop-random` command or `RandomMapCropper`.

=== debug.maps.filename

* Data Type: string
* Default Value: `tmp/debug.osm`

Debugging: The filename to use when saving the debug map during conflation.

=== debug.maps.write

* Data Type: bool
* Default Value: `false`

If true, multiple debug maps will be generated during a conflation job.  The output path of the maps
is controlled by debug.maps.filename.  The maps can be large and slow things down
significantly.

=== differential.remove.reference.data

* Data Type: bool
* Default Value: `true`

If false, when running Differential Conflation the reference elements will not be dropped from the
output. Setting this to false is primarily useful when debugging unconnected way snapping issues.

=== differential.remove.unconflatable.data

* Data Type: bool
* Default Value: `true`

If true Differential Conflation will remove all elements from output which Hootenanny is unable to
match. If false, the unconflatable data will pass through to the output.

=== differential.snap.unconnected.roads

* Data Type: bool
* Default Value: `false`

If true, when running Differential Conflation the Unconnected Way Snapper will snap unconnected
secondary road endpoint nodes to the nearest reference road.

=== differential.tag.ignore.list

* Data Type: list
* Default Value:
** `uuid`
** `source:datetime`
** `license`
** `source:imagery`

List of tags to ignore when performing differential conflation with tags.

=== differential.treat.reviews.as.matches

* Data Type: bool
* Default Value: `true`

If true reviews are treated as matches by Differential Conflation and removed from the output if
differential.remove.reference.data is enabled. If set to false, reviews are not treated as matches
and will pass through to the differential output.

=== direction.finder.angle.threshold

* Data Type: double
* Default Value: `45.0`

Maximum angle different in degrees that two line features can have and still be considered as
going in the same direction by DirectionFinder::isSimilarDirection2.  Used by Attribute Conflation
only.

=== distance.node.criterion.center

* Data Type: string
* Default Value: ``

WGS84 coordinate in the format: "x,y" that the DistanceNodeCriterion should use as a center when
searching for nodes.

=== distance.node.criterion.distance

* Data Type: double
* Default Value: `-1.0`

Distance in meters that the DistanceNodeCriterion should search for nodes out from a center
specified by 'distance.node.criterion.center'.

=== dual.highway.splitter.driving.side

* Data Type: string
* Default Value: `right`

When splitting divided highways, do we assume the drivers are on the right or left?

See also: <<MapCleanerTransforms,map.cleaner.transforms>>

=== dual.highway.splitter.split.size

* Data Type: double
* Default Value: `12.5`

By default how much space should be put between two divided roads when they're divided by the
DualHighwaySplitter. Units are in meters.

See also: <<MapCleanerTransforms,map.cleaner.transforms>>

=== duplicate.name.case.sensitive

* Data Type: bool
* Default Value: `true`

If true, all cleaning and conflation merge operations will only remove duplicate names when their
case also matches.  If false, cleaning and conflation merge operations will consider names with
the same text but differing case as the same with each other.

See also: <<MapCleanerTransforms,map.cleaner.transforms>>

=== duplicate.name.preserve.original.name

* Data Type: bool
* Default Value: `false`

If true, the Duplicate Name Remover will always preserve the original name tag.  Otherwise, it
will treat name and alternate name tags equally.

=== duplicate.node.remover.distance.threshold

* Data Type: double
* Default Value: `0.01`

When merging nodes with DuplicateNodeRemover, determines what tolerance should be used for deciding
if two nodes are identical. Larger values are more likely to merge nodes which are not true
duplicates of each other. The units are in meters, and the value must be greater than zero.

=== duplicate.way.remover.strict.tag.matching

* Data Type: bool
* Default Value: `true`

If true, when comparing duplicate ways, the ways and their name tags will only be merged together
when all other non-name tags between the two match.  If false, the ways and their name tags will be
merged together regardless of whether all of their non-name tags match.

=== edge.distance.extractor.spacing

* Data Type: double
* Default Value: `5.0`

The spacing used by the EdgeDistanceExtractor.  Units in meters.

=== element.cache.size.node

* Data Type: long
* Default Value: `10000000`

Size of the in memory node cache used when streaming I/O is used with nodes.

=== element.cache.size.relation

* Data Type: long
* Default Value: `2000000`

Size of the in memory relation cache used when streaming I/O is used with relations.

=== element.cache.size.way

* Data Type: long
* Default Value: `2000000`

Size of the in memory way cache used when streaming I/O is used with ways.

=== element.criterion.negate

* Data Type: bool
* Default Value: `false`

If true, element criterion passed to an ElementCriterionConsumer will be negated. Not honored by
all ElementCriterionConsumers. Since this configuration option is shared across all
ElementCriterionConsumers, there may be undesirable effects in invocations involving multiple
ElementCriterionConsumers.

=== element.sorter.element.buffer.size

* Data Type: long
* Default Value: `-1`

The maximum number of elements allowed to be in memory during element sorting.  A value of -1
indicates no limit.

=== english.words.files

* Data Type: list
* Default Value:
** `/usr/share/dict/american-english-insane`
** `/usr/share/dict/american-english-huge`
** `/usr/share/dict/american-english-large`
** `/usr/share/dict/american-english-small`
** `/usr/share/dict/american-english`
** `/usr/share/dict/words`

Absolute file path to dictionaries of English words. The first file found will be loaded into the
dictionary of English words and used by some algorithms. If the files are not found then the English
words will be silently ignored.

=== generic.line.matcher.max.angle

* Data Type: double
* Default Value: `90.0`

Sets that maximum angle that is still considered a generic line match. Units in degrees.

=== generic.line.subline.matcher

* Data Type: string
* Default Value: `hoot::MaximalSublineMatcher`

The way subline matcher to use when determining matching sublines with generic line conflation.

=== generic.line.tag.threshold

* Data Type: double
* Default Value: `0.8`

Tag similarity threshold (0.0 to 1.0) at or above which an linear element not conflatable by
specific Hootenanny conflation routines is considered to have similar tags.

=== generic.point.tag.threshold

* Data Type: double
* Default Value: `0.8`

Tag similarity threshold (0.0 to 1.0) at or above which an point element not conflatable by
specific Hootenanny conflation routines is considered to have similar tags.

=== generic.point.polygon.tag.threshold

* Data Type: double
* Default Value: `0.8`

Tag similarity threshold (0.0 to 1.0) at or above which a pair of point and polygon elements not
conflatable by specific Hootenanny conflation routines is considered to have similar tags.

=== generic.polygon.tag.threshold

* Data Type: double
* Default Value: `0.8`

Tag similarity threshold (0.0 to 1.0) at or above which an polygon element not conflatable by
specific Hootenanny conflation routines is considered to have similar tags.

=== geometry.modifier.rules.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/GeometryModifierRules.json`

Path to a json file containing the actions, filters and arguments used for the
hoot::GeometryModifierOp.

==== Rule File Format
-----
{
    "way_to_poly":    // Command: way_to_poly, collapse_poly, etc.
                      // See implementations of GeometryModifierAction
    {
        "filter":     // Filter for limiting the elements to process. The modifier uses the
                      // Feature Filtering logic as used for conflation (FeatureFiltering.asciidoc)
        {
            "must":
            [
                {
                    "tag": "aeroway=runway"
                }
            ]
        },
        "arguments":  // Arguments specific to the selected command
        {
            "default_width_m": 10,
            "width_tag_m" : "width"
        }
    },
    "collapse_poly":  // Next command: all commands defined are processed in sequence
    {
        "filter":
        {
        "must":
            [
                {
                    "tag": "building=yes"
                }
            ]
        },
        "arguments":
        {
            "max_area_in_m": 15000
        }
    }
}
-----

=== geonames.reader.string.cache.size

* Data Type: int
* Default Value: `100000`

The maximum number of parsed tag string values stored in an in-memory cache when reading
GeoNames data.

=== graph.comparator.max.threads

* Data Type: int
* Default Value: `10`

The maximum number of graph comparator threads that can be launched by the Compare command.

=== hash.seed.zero

* Data Type: bool
* Default Value: `false`

Sets the Qt hash seed to 0 for consistent hash values and hash based container content order. This
is required for unit tests, but shouldn't be used in normal operation.

=== highway.corner.splitter.rounded.max.node.count

* Data Type: int
* Default Value: `6`

Maximum number of nodes in a row to consider for a bend in a way to determine if the way
is a rounded corner that should be split.  The higher the number, the more heading calculations
are required.  The lower the number, the less accurate it will be.

=== highway.corner.splitter.rounded.split

* Data Type: bool
* Default Value: `false`

Rounded corners in one dataset can cause non-rounded corners in the secondary dataset to not
conflate.

=== highway.corner.splitter.rounded.threshold

* Data Type: double
* Default Value: `55.0`

Threshold in degrees between the heading of rounded bends in way that constitutes a corner.

=== highway.corner.splitter.threshold

* Data Type: double
* Default Value: `55.0`

Threshold in degrees between the heading of two way segments that constitutes a corner.

=== highway.match.threshold

* Data Type: double
* Default Value: `0.161`

The threshold at which a match is called a match for roads. Valid values are between 0.0 and 1.0.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== highway.matcher.heading.delta

* Data Type: double
* Default Value: `${way.matcher.heading.delta}`

The distance around a point on a highway to look when calculating the heading.  See
`way.matcher.heading.delta`.

=== highway.matcher.max.angle

* Data Type: double
* Default Value: `${way.matcher.max.angle}`

Sets that maximum angle that is still considered a highway match. Units in degrees.

=== highway.max.enum.diff

* Data Type: double
* Default Value: `0.6`

If two highways have significantly different enumerated types then they will not be considered
for match. For example:

* "highway=primary" vs "highway=secondary" has a diff of 0.2.
* "highway=primary" vs "highway=footway" has a diff of 0.67.

=== highway.merge.tags.only

* Data Type: bool
* Default Value: `false`

If true, road conflation merges tag changes into the reference only and makes no geometry changes.

=== highway.miss.threshold

* Data Type: double
* Default Value: `0.999`

The threshold at which a miss is called a miss for roads.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== highway.review.threshold

* Data Type: double
* Default Value: `0.25`

The threshold at which a review is called a review for roads. See
`conflate.review.threshold.default`.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== highway.subline.matcher

* Data Type: string
* Default Value: `${way.subline.matcher}`

The highway subline matcher to use when determining matching highway sublines.

=== highway.subline.string.matcher

* Data Type: string
* Default Value: `${way.subline.string.matcher}`

The way subline string matcher to use when determining matching sublines for highways.

=== hoot.osm.auth.consumer.key

* Data Type: string
* Default Value: ``

OpenstreetMap OAuth Consumer Key found after registering Hootenanny with OpenstreetMap (or its
derivatives) at http://<OSM Domain>/user/<your username>/oauth_clients

=== hoot.osm.auth.consumer.secret

* Data Type: string
* Default Value: ``

OpenstreetMap OAuth Private Consumer Key found after registering Hootenanny with OpenstreetMap (or
its derivatives) at http://<OSM Domain>/user/<your username>/oauth_clients

=== hoot.osm.auth.access.token

* Data Type: string
* Default Value: ``

OpenstreetMap OAuth Access Token for gaining access to the OAuth protected OSM API

=== hoot.osm.auth.access.token.secret

* Data Type: string
* Default Value: ``

OpenstreetMap OAuth Private Access Token for gaining access to the OAuth protected OSM API

=== hoot.services.auth.access.token

* Data Type: string
* Default Value: ``

Hootenanny Web Services public access token required by some Hootenanny commands.  Use the
Hootenanny 'login' command to retrieve access tokens.

=== hoot.services.auth.access.token.secret

* Data Type: string
* Default Value: ``

Hootenanny Web Services private access token required by some Hootenanny commands.  Use the
Hootenanny 'login' command to retrieve access tokens.

=== hoot.services.auth.host

* Data Type: string
* Default Value: `localhost`

Host name of the machine the Hootenanny Web Services are located on.

=== hoot.services.auth.port

* Data Type: int
* Default Value: `8080`

Port of the machine the Hootenanny Web Services are located on.  If left empty, port 80 will be
used.

=== hoot.services.auth.user.name

* Data Type: string
* Default Value: ``

Hootenanny Web Services user name associated with an authenticated login.

=== hootapi.db.writer.copy.bulk.insert

* Data Type: bool
* Default Value: `false`

If set to true, the Hootenanny API database writer will insert new records using Postgres COPY
statements, which may increase performance when writing large datasets.  This setting can only
be activated when writing new records and will not work when existing records need to be modified
or deleted.  It also requires writing out temporary files, so extra disk space is needed.

=== hootapi.db.writer.create.user

* Data Type: bool
* Default Value: `false`

Should the hootapi services DB writer automatically create the specified user if it doesn't exist.
This is most useful when debugging and testing.

=== hootapi.db.writer.output.id.mappings

* Data Type: string
* Default Value: ``

If this value is set to a non-empty string, the system will attempt to open a file with the
specified name and output all the ID mappings (source to destination) used for nodes, ways, and
relations that were written to the database.

=== hootapi.db.writer.overwrite.map

* Data Type: bool
* Default Value: `false`

If set to true then if there is already a map with the specified name then it will be removed before
a new map is written.

=== hootapi.db.writer.remap.ids

* Data Type: bool
* Default Value: `false`

If this value is set to true, then all incoming element IDs are remapped into new IDs as the
elements are written to a Hootenanny API database, otherwise the original IDs from the map
are preserved.

=== id.generator

* Data Type: string
* Default Value: `hoot::DefaultIdGenerator`

Sets the default ID generator class name. This determines how Hootenanny will assign new element
IDs as they're created. The `DefaultIdGenerator` assigns IDs in a decrementing fashion (e.g. -1,
-2, ...). The `hoot::PositiveIdGenerator` increments the IDs (e.g. 1, 2, 3, ...).

Both generators maintain a different count for each element type. E.g. you can have a Node with ID
1 and a Way with ID 1. This will not cause any problems within Hootenanny and is a legitimate way
of assigning IDs within OSM.

Example Usage:

----
hoot convert -D schema.translation.script=$HOOT_HOME/translations/Identity.js -D id.generator=hoot::PositiveIdGenerator -D id.generator.node.start=100 -D id.generator.relation.start=200 -D id.generator.way.start=300 myinput.osm myoutput.osm
----

=== id.generator.node.start

* Data Type: double
* Default Value: `0`

Sets the default start ID for nodes. The first value assigned is generator specific. (E.g. for
default the first assigned id will be -1)

=== id.generator.relation.start

* Data Type: double
* Default Value: `0`

Sets the default start ID for relations. The first value assigned is generator specific. (E.g.
for default the first assigned id will be -1)

=== id.generator.way.start

* Data Type: double
* Default Value: `0`

Sets the default start ID for ways. The first value assigned is generator specific. (E.g. for
default the first assigned id will be -1)

=== implicit.tagger.add.top.tag.only

* Data Type: bool
* Default Value: `true`

If true, implicit taggers will only add the implicit tag to the element with the highest tag
occurrence count for a given set of inputs name tokens.  Setting to true may be useful in reducing
false positive applied tags to elements.

=== implicit.tagger.additional.name.keys

* Data Type: list
* Default Value:
** `note`

A list of additional tag keys to be considered as names when tagging implicitly based on type.

=== implicit.tagger.allow.tagging.specific.entities

* Data Type: bool
* Default Value: `true`

If true, implicit taggers will attempt to add more specific tags to existing non-generic elements
(dependent on the element type filter; e.g. for POIs, elements with a tag more specific than
"poi=yes").  If false, implicit taggers will ignore all non-generic elements during implicit
tagging.

=== implicit.tagger.allow.words.involved.in.multiple.rules

* Data Type: bool
* Default Value: `false`

If true, implicit taggers will allow for returning tags for a name when that name is involved in
more than one tagging rule.  Setting to false may be useful in reducing false positive applied tags
to elements.

=== implicit.tagger.match.end.of.name.single.token.first

* Data Type: bool
* Default Value: `true`

If true, implicit taggers will attempt to match the last token in a name to an implicit tag rule
first before attempting to match other parts of the name.  Setting to true can be useful in getting
better tagging performance for names that would otherwise be involved in multiple implicit tag
rules.

=== implicit.tagger.max.name.length

* Data Type: int
* Default Value: `75`

The maximum length a name tag value can have for the type tagger to try and derive a type from it.

=== implicit.tagger.rules.database

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/implicit-tag-rules/osm-geonames-4-5-18.sqlite`

Database used by the POI implicit tagger to derive POI type tags implicitly based on a POI's name.

=== implicit.tagging.database.deriver.minimum.tag.occurrences.per.word

* Data Type: int
* Default Value: `1000`

The minimum number of times a tag must be associated with a word in order for an implicit tag rule
to be created that is associated with it.

=== implicit.tagging.database.deriver.minimum.word.length

* Data Type: int
* Default Value: `3`

The minimum allowed word length when associating word tokens with tags.

=== implicit.tagging.database.deriver.custom.rule.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/implicit-tag-rules/implicitTagRulesCustomRuleList`

Flat file containing tab separated word key/value pairs to use as custom rules when deriving an
implicit tags database from POI names.

=== implicit.tagging.database.deriver.tag.ignore.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/implicit-tag-rules/implicitTagRulesTagIgnoreList`

Flat file containing key/value pairs to ignore when deriving an implicit tags database from POI
names.  Use 'key=*' to ignore all tags for a given key.

=== implicit.tagging.database.deriver.translate.names.to.english

* Data Type: bool
* Default Value: `false`

If true, the implicit tag raw rules deriver will translate name words to English as implicit tag
rules are derived.

=== implicit.tagging.database.deriver.word.ignore.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/implicit-tag-rules/implicitTagRulesWordIgnoreList`

Flat file containing words to ignore when deriving an implicit tags database from POI names.

=== implicit.tagging.database.deriver.use.schema.tag.values.for.words.only

* Data Type: bool
* Default Value: `true`

If true, the implicit tag raw rules generator will only consider words that correspond to a OSM tag
value in the Hootenanny schema.

=== implicit.tagging.element.criterion

* Data Type: string
* Default Value: `hoot::ImplicitTagEligiblePoiPolyCriterion`

Criterion class inheriting from hoot::ImplicitTagEligibleCriterion; The default,
ImplicitTagEligiblePoiPolyCriterion, derives tag information from POIs, buildings, and areas.  To
pass in more nested criterion, use the Hootenanny Javascript interface instead.

=== implicit.tagging.keep.temp.files

* Data Type: bool
* Default Value: `false`

If true, the implicit tag raw rules/database derivers will keep all temporary file output.  For
debugging only.

=== implicit.tagging.name.cleaning.tokens.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/implicit-tag-rules/implicitTagRulesNameCleaningTokens`

Flat file containing tokens that should be ignored in names when deriving implicit type tagging
rules or when determining whether to type tag an element using implicit tagging.

=== implicit.tagging.raw.rules.deriver.skip.filtering

* Data Type: bool
* Default Value: `false`

If true, the implicit tag raw rules deriver will skip node filtering.  Only set to true if the input
data has been filtered with ImplicitTagEligiblePoiCriterion beforehand.

=== implicit.tagging.raw.rules.deriver.sort.parallel.count

* Data Type: int
* Default Value: `-1`

The number of parallel processes used when sorting output by the implicit tag raw rules deriver.
The default value of -1 uses a count equal to the number of processors on the machine.  Valid values
are -1 or 1 up to the number of available processors.

=== implicit.tagging.translate.names.to.english

* Data Type: bool
* Default Value: `false`

If true, all implicit taggers will translate element name words to English before querying the
corresponding implicit tag rules database.

=== javascript.schema.translator.path

* Data Type: list
* Default Value:
** `${HOOT_HOME}/translations`
** `${HOOT_HOME}/translations-local`
** `${HOOT_HOME}/rules`

A list of paths to include in the javascript translator search path.

=== in.bounds.criterion.bounds

* Data Type: string
* Default Value: ``

The bounding box used by InBoundsCriterion, of the form: minx,miny,maxx,maxy.

=== in.bounds.criterion.strict

* Data Type: bool
* Default Value: `true`

If true, InBoundsCriterion requires features exist completely within `in.bounds.criterion.bounds`
in order for the criterion to be satisfied. If false, features that cross the bounds may also
satisfy the criterion.

=== jni.class.path

* Data Type: list
* Default Value:
** `${HOOT_HOME}/hoot-josm/target/dependency-jars/josm.jar;${HOOT_HOME}/hoot-josm/target/hoot-josm.jar`

A list of JAR files to place on the JAVA classpath when Hootenanny C++ code in the hoot-josm project
interacts with Hootenany and JOSM Java code via JNI.

=== jni.initial.memory

* Data Type: string
* Default Value: `256m`

JVM -Xms setting to use with hoot-josm JNI to configure the initial amount of memory available to
the JVM.

=== jni.max.memory

* Data Type: string
* Default Value: `2g`

JVM -Xmx setting to use with hoot-josm JNI to configure the maximum amount of memory available to
the JVM.

=== job.id

* Data Type: string
* Default Value: ``

This option allows for passing in a job ID for the currently executing command. This is useful when
trying to track multiple commands across a single job. When the Hootenanny API database is used
for job output storage, the ID will be stored in the job status table of the associated map.

=== josm.map.cleaner.add.detail.tags

* Data Type: bool
* Default Value: `false`

If true, cleaning/validation detail tags will be added to map outputs when cleaning maps with JOSM.

=== josm.map.validator.java.implementation

* Data Type: string
* Default Value: `hoot/core/josm/JosmMapValidator`

File path relative to Hootenanny root directory without file extension or prefixed namespace to
Java class to use as the JOSM Java map validator/cleaner implementation.

=== josm.max.elements.for.map.string

* Data Type: int
* Default Value: `2000000`

The maximum size in elements for a map allowed to be passed as a string between Hootenanny and JOSM.
The default value was determined experimentally and may need tweaking per environment.

=== josm.validators.exclude

* Data Type: list
* Default Value:
** ``

A list of JOSM validator Java class names without namespace prefixes or file extensions
(e.g. 'DuplicatedWayNodes') to explicitly exclude use of during validation or cleaning using JOSM.
Overrides values set in josm.validators.include.

=== josm.validators.include

* Data Type: list
* Default Value:
** ``

A list of JOSM validator Java class names without namespace prefixes or file extensions
(e.g. 'DuplicatedWayNodes') to explicitly include use of during validation or cleaning using JOSM.
Overridden by values set in josm.validators.exclude.

=== josm.validators.requiring.user.certificate

* Data Type: list
* Default Value:
** `ApiCapabilitiesTest`
** `MapCSSTagChecker`

A list of JOSM validators known to require a user certificate. These validators will be skipped.

=== json.format.hootenanny

* Data Type: bool
* Default Value: `true`

Output JSON in a more Hootenanny specific way that includes Hootenanny-specific tags
including `hoot:*`, `error:circluar`, `type=node/way/relation`, tags in the `tags`
section, etc.

`Generic Format`
-----
...
{
  "type":"Feature",
  "properties":{
    "type":"LineString",
    "REF1":"Panera",
    "access":{ "groups":[],"users":[] },
    "attributes":{
      "item_date":"2017-10-09T12:34:56.789Z",
      "category_id":"123456",
      "asset_id":"ABC123"
      },
    "alt_name":null,
    "building":"yes",
    "name":"Panera Bread",
    "item_type":[ "building","restaurant" ],
    },
  "geometry":{
    "type":"Polygon",
    "coordinates":[[[-104.8065566424573,39.59327717293566],
                    [-104.8061245919961,39.59330667331412],
                    [-104.8060931452853,39.59315284977403],
                    [-104.8065292974914,39.59311913497989],
                    [-104.8065566424573,39.59327717293566]]]
    }
},
...
-----
vs
`Hootenanny-specific Format`
-----
...
{
  "type":"Feature",
  "id":"-2",
  "properties":{
    "type":"way",
    "tags":{
      "REF1":"Panera",
      "access":{ "groups":[],"users":[] },
      "attributes":{
        "item_date":"2017-10-09T12:34:56.789Z",
        "category_id":"123456",
        "asset_id":"ABC123"
        },
      "alt_name":null,
      "building":"yes",
      "type":"way",
      "name":"Panera Bread",
      "item_type":[ "building","restaurant" ],
      "error:circular":"15"
      }
    },
  "geometry":{
    "type":"Polygon",
    "coordinates":[[[-104.8065566424573,39.59327717293566],
                    [-104.8061245919961,39.59330667331412],
                    [-104.8060931452853,39.59315284977403],
                    [-104.8065292974914,39.59311913497989],
                    [-104.8065566424573,39.59327717293566]]]
    }
},
...
-----

=== json.output.tasking.manager.aoi

* Data Type: bool
* Default Value: `false`

Output the GeoJSON in a format readable in Tasking Manager.  This includes
per file or per feature `source` tags and compatible geometries.

=== json.perserve.empty.tags

* Data Type: bool
* Default Value: `true`

Write out empty OSM tags to JSON such as `"text":""`

=== json.pretty.print

* Data Type: bool
* Default Value: `false`

Write out JSON in a more legible manner

=== language.detection.detector

* Data Type: string
* Default Value: `hoot::HootServicesLanguageDetectorClient`

LanguageDetector implementation to use for detecting source languages.  If using
hoot::HootServicesLanguageDetectorClient, a translation server must be set up and valid OAuth
credentials used.  Also, be sure to use an appropriate value for the 'language.info.provider'
option.

=== language.detection.write.detected.lang.tags

* Data Type: bool
* Default Value: `false`

If true, source languages detected for tags will be written in new tags to output.  If false, no
tags are written and only a summary of the source languages found will be printed at completion.

=== language.hoot.services.detection.min.confidence.threshold

* Data Type: string
* Default Value: `high`

The minimum language detection confidence threshold to use when detecting languages in text using
hoot::HootServicesLanguageDetectorClient.  Valid values are: 'low', 'medium', 'high', or 'none'.  A
value of 'none' or an empty string disables the threshold.  Not all server side language detectors
specified in 'language.hoot.services.detectors' support detection confidence.  When listing server
side detectors via the API, confidence support information is included.

=== language.hoot.services.detectors

* Data Type: list
* Default Value:
** `TikaLanguageDetector`
** `OpenNlpLanguageDetector`

When using 'HootServicesTranslatorClient' as the to English language translator or
HootServicesLanguageDetectorClient as a source language detector, one or more hoot-services Java
class names implementing LanguageDetector.  Language detectors are used in order of entry.
'hoot info --languages --detectors' displays information about the available server side detectors.
If no detectors are specified, then language translation will attempt to use as many detectors as
needed, in a pre-determined order, to get a positive detection. Separate values with a ';' and
surround in quotes when passing in from the command line.

=== language.info.provider

* Data Type: string
* Default Value: `hoot::HootServicesLanguageInfoClient`

LanguageInfoProvider implementation to use for determining language information needed by to
English translation. If using hoot::HootServicesLanguageInfoClient, a translation server must be
set up and valid OAuth credentials used.

=== language.max.cache.size

* Data Type: long
* Default Value: `10000`

Maximum result cache sized used for to English translation and source language detection.  Not
necessarily honored by all translators/detectors.  A cache size of -1 disables the translation
cache.

=== language.ignore.pre.translated.tags

* Data Type: bool
* Default Value: `false`

If true and performing a to English translation with ToEnglishTranslationVisitor, the translator
will skip attempting to translate any tags whose owning elements have a pre-translated English tag
(key=<tag name>:en). If true and performing a non-English source language detection with
NonEnglishLanguageDetectionVisitor, the detector will ignore the fact that an English pre-translated
tag already exists on the associated element and attempt to detect the source language of the
pre-translated tag.

=== language.parse.names

* Data Type: bool
* Default Value: `false`

When performing a to English translation or source language detection, the translator/detector
by default uses the required 'language.tag.keys' configuration option to determine which tags to
translate or detect source languages for.  If this option is enabled, 'language.tag.keys' is no
longer a required option and all name tags will be parsed during translation/detection.  If
'language.tag.keys' is populated in addition to enabling this option, then any tag keys in
'language.tag.keys' that are not names will be parsed in addition to the name tags.

=== language.skip.words.in.english.dictionary

* Data Type: bool
* Default Value: `true`

When performing a to English translation or source language detection, the translator/detector
will skip the translation of any tags whose value is in an English dictionary.

=== language.tag.keys

* Data Type: list
* Default Value:
** ``

A list of keys of tags whose values are to either be translated to English by a
ToEnglishTranslationVisitor or just have their source languages detected by a
LanguageDetectionVisitor depending on the operation being performed. Separate keys with a ';' and
surround in quotes when passing in from the command line.

=== language.translation.comparison.pretranslated.tag.keys

* Data Type: list
* Default Value:
** ``

A list of tag keys whose values are known to have been previously translated to the desired target
language.  The list ordering should correspond to that of language.tag.keys.  Separate keys with a
';' and surround in quotes when passing in from the command line.

=== language.translation.comparison.scorer

* Data Type: string
* Default Value: `hoot::LevenshteinDistance`

StringDistance implementation used to score to English translated tag values

=== language.translation.detected.language.overrides.specified.source.languages

* Data Type: bool
* Default Value: `false`

If source languages are specified that do not match the detected language for piece of text during
translation, setting this to true allows the detected language to override the specified source
languages.

=== language.translation.hoot.services.translator

* Data Type: string
* Default Value: `HootLanguageTranslator`

When using 'hoot::HootServicesTranslatorClient' as the to English language translator, a
hoot-services Java class names implementing ToEnglishTranslator.  Valid values are
'JoshuaLanguageTranslator' and 'HootLanguageTranslator'.

=== language.translation.perform.exhaustive.search.with.no.detection

* Data Type: bool
* Default Value: `false`

If more than one source language is specified for to English translation and the correct
source language cannot be detected, translation attempts will be made against each specified
languages until a translation is found.  Enabling this option can have a large impact on translation
performance due to language detection cost.

=== language.translation.source.languages

* Data Type: list
* Default Value:
** ``

ISO-639-1 language codes for the source languages for to English translation
(https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).  Also, you can specify a single list item,
"detect", to attempt to auto-detect the appropriate source language before translation.  Specifying
multiple source languages can have a large impact on translation performance due to language
detection cost.  Separate list items with a ';' and surround in quotes when passing them in from
the command line.

=== language.translation.string.distance.tokenize

* Data Type: bool
* Default Value: `true`

Set to true if the strings should be tokenized (split into words) before translating the values.
Only applies if language.translation.translator is set to hoot::ToEnglishDictionaryTranslator.

=== language.translation.string.distance.translate.all

* Data Type: bool
* Default Value: `true`

If true and language.translation.translator is set to hoot::ToEnglishDictionaryTranslator, will
attempt to retrieve multiple translations when scoring string comparisons.  Otherwise, only a single
translation is retrieved.

=== language.translation.translator

* Data Type: string
* Default Value: `hoot::HootServicesTranslatorClient`

ToEnglishTranslator implementation to use for to English translation.
hoot::HootServicesTranslatorClient, requires a translation server be set up and valid OAuth
credentials used.  Also, be sure to use an appropriate value for the 'language.info.provider'
option.

=== levenshtein.distance.alpha

* Data Type: double
* Default Value: `1.15`

Raise the Levenshtein score to this power before returning this result. If alpha is greater than
1 then this makes low scores even lower. Valid values are > 0.

The default alpha value of 1.15 was determined through experimentation with a Jakarta data set
using MeanWordSetDistance as the container classes. See Redmine ticket #2349 for some experiment
details.  The "best" value varies depending on the input data as well as how the data is being used.

=== libpostal.data.dir

* Data Type: string
* Default Value: `/usr/share/libpostal`

Absolute path to the directory where the libpostal library, used for address parsing, stores its
data.

=== log.class.filter

* Data Type: string
* Default Value: ``

A semicolon delimited list of class names used for limiting the log output. Do not prepend class
names with their namespace. An empty string (default) disables the filtering.

=== log.warn.message.limit

* Data Type: int
* Default Value: `3`

The maximum number of warn log messages that will be emitted per class before they are silenced.
A value of -1 passed to class will ensure that no warnings are logged by it, if it honors the
option. A setting of -1 is useful for tests where you do not have granular enough logging control.

[[MapCleanerTransforms]]
=== map.cleaner.transforms

* Data Type: list
* Default Value:
** `hoot::ReprojectToPlanarOp`
** `hoot::DuplicateNodeRemover`
** `hoot::OneWayRoadStandardizer`
** `hoot::DuplicateWayRemover`
** `hoot::SuperfluousWayRemover`
** `hoot::IntersectionSplitter`
** `hoot::UnlikelyIntersectionRemover`
** `hoot::DualHighwaySplitter`
** `hoot::HighwayImpliedDividedMarker`
** `hoot::DuplicateNameRemover`
** `hoot::SmallHighwayMerger`
** `hoot::RemoveEmptyAreasVisitor`
** `hoot::RemoveDuplicateRelationMembersVisitor`
** `hoot::RelationCircularRefRemover`
** `hoot::RemoveEmptyRelationsOp`
** `hoot::RemoveDuplicateAreaVisitor`
** `hoot::NoInformationElementRemover`

A list of map operations to be applied to a map for cleaning purposes, in order.
'hoot info --operators' displays information about the available transforms.

=== map.comparator.print.full.mismatch.elements.on.map.size.diff

* Data Type: bool
* Default Value: `false`

If true, when comparing maps with the Compare command it will print out the details for all elements
identified as different between the two maps when there is a size difference (up to a default
limit). This is useful in debugging remote test errors. TODO: set this back to false

=== map.merge.ignore.duplicate.ids

* Data Type: bool
* Default Value: `false`

Option to allow for multiple datasets to be merged into one dataset, while ignoring
duplicate element IDs.  This allows for two neighboring cells to contain the same way
that spans both cells and is included in both datasets to not be duplicated when read
into Hootenanny.

[[match.creators]]
=== match.creators

* Data Type: list
* Default Value:
** `hoot::BuildingMatchCreator`
** `hoot::ScriptMatchCreator,Poi.js`
** `hoot::HighwayMatchCreator`
** `hoot::ScriptMatchCreator,River.js`
** `hoot::PoiPolygonMatchCreator`
** `hoot::ScriptMatchCreator,Area.js`
** `hoot::ScriptMatchCreator,Railway.js`
** `hoot::ScriptMatchCreator,PowerLine.js`
** `hoot::ScriptMatchCreator,Point.js`
** `hoot::ScriptMatchCreator,Line.js`
** `hoot::ScriptMatchCreator,Polygon.js`
** `hoot::ScriptMatchCreator,PointPolygon.js`

List of match creators to use during conflation. This can modify what features will be conflated
(e.g. buildings, roads, etc.).  The ordering must match that in merger.creators.
'hoot info --matchers' displays information about the available matchers.

=== match.parallel.exponent

* Data Type: double
* Default Value: `1`

Used in the calculation of the match parallel score, cos (delta) ^ match.parallel.exponent

=== metadata.dataset.indicator.tag

* Data Type: list
* Default Value:
** `source:metadata`
** `dataset`

Single tag/value pair indicating that an element is a dataset used as import source or export
destination for metadata values.

=== metadata.tags

* Data Type: list
* Default Value:
** `attribution`
** `test-attribution`
** `source`
** `test-source`

List of tag/value pairs of metatdata tags with default values to be distributed (import) or
collected (export).

=== metadata.grid.cell.size

* Data Type: double
* Default Value: `0.25`

Cell size of the dataset grid created when exporting metadata tags to dataset elements. If this
value is set to 0 a single polygon using the bounds of the source data is being created instead.

=== max.elements.per.partial.map

* Data Type: double
* Default Value: `100000`

Maximum number of elements that will be read into memory at one time during a partial OSM map
reading.  This shouldn't need to be changed.  Reducing the value may cause errors on some data
formats that read large numbers of entries at one time. Increasing the value will use more RAM in
some situations.

=== max.memory.usage

* Data Type: string
* Default Value: `-1`

Allows for artificially limiting the amount of virtual memory that Hootenanny will use. If
Hootenanny needs more than this amount of virtual memory then a bad_alloc will likely be thrown.
In some cases you will receive a totally unrelated error message.

Size is specified in bytes unless followed by one of these suffixes.

* KB = size * 1000
* MB = size * 1000 * 1000
* GB = size * 1000 * 1000 * 1000

For instance setting the value to 500KB is equivalent to 500000 bytes.

The Linux utility RLIMIT_AS is used for limiting virtual memory. This is analagous to RAM, but
less RAM will be utilized than the value specified. Typically this is most useful when limiting
RAM usage of applications in a shared server environment.

=== maximal.subline.spacing

* Data Type: double
* Default Value: `2.0`

Spacing in meters used by the MaximalSublineMatcher during point discretization performed between
matching ways.  Larger values may increase runtime performance but decrease conflation quality.

[[merger.creators]]
=== merger.creators

* Data Type: list
* Default Value:
** `hoot::BuildingMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::HighwayMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::PoiPolygonMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`
** `hoot::ScriptMergerCreator`

List of merger creators to use during conflation. This can modify what features will be conflated
(e.g. buildings, roads, etc.).  The ordering must match that in match.creators.
'hoot info --mergers' displays information about the available mergers.

=== name.contains.criterion.case.sensitive

* Data Type: bool
* Default Value: `true`

If true, NameContainsCriterion will only identify partial names whose case matches exactly with the
name values in name.contains.criterion.names. If false, the cases of the names do not have to match.

=== name.contains.criterion.names

* Data Type: list
* Default Value: ``

A list of names to use with NameContainsCriterion. From the command line, delimit multiple entries
with ';' and surround the entire list in double quotes. E.g. "Subway;Jimmys"

=== name.criterion.case.sensitive

* Data Type: bool
* Default Value: `true`

If true, NameCriterion will only identify names whose case matches exactly with the name values in
name.criterion.names. If false, the cases of the names do not have to match.

=== name.criterion.names

* Data Type: list
* Default Value: ``

A list of names to use with NameCriterion. From the command line, delimit multiple entries with ';'
and surround the entire list in double quotes. E.g. "Subway;Jimmys"

=== network.conflicts.aggression

* Data Type: double
* Default Value: `8.8`

A larger value will conflate more aggressively (fewer reviews) when using network conflation. Users
may want to consider changing this value. Reasonable range is [1, ~10].

=== network.conflicts.conflicting.score.threshold.modifier

* Data Type: double
* Default Value: `0.3`

Added to a conflicting match score to allow for match pruning

=== network.conflicts.matcher.threshold

* Data Type: double
* Default Value: `0.35`

The score threshold used to compare whole networks with the ConflictsNetworkMatcher

=== network.conflicts.outbound.weighting

* Data Type: double
* Default Value: `0.25`

A value of 0 will cause an edge to contribute (1 * score * weight) to each neighbor when using
network conflation. A value of 1 will give approx (1 / n * score * weight) influence to each
neighbor.  This value is generally not changed by users.  Reasonable range is [0, 2].

=== network.conflicts.partial.handicap

* Data Type: double
* Default Value: `0.2`

A larger value will increase the weight of partial matches when using network conflation.  A
smaller value prefers whole matches over partial matches. This value is generally not changed by
users. Reasonable range is (0, ~2].

=== network.conflicts.sanity.check.min.separation.distance

* Data Type: double
* Default Value: `5.0`

Minimum separation distance, in meters, for match distance separation to use when sanity checking
match relationships.

=== network.conflicts.sanity.check.separation.distance.multiplier

* Data Type: double
* Default Value: `2.5`

Distance multiplier to use when santiy checking match relationships.

=== network.conflicts.stub.handicap

* Data Type: double
* Default Value: `1.7`

A larger value will increase the weight of stubs when using network conflation. This value is
generally not changed by users. Reasonable range is (0, ~2].

=== network.conflicts.stub.through.weighting

* Data Type: double
* Default Value: `0.5`

A value of 0 will cause edges that are connected by a stub to contribute directly as neighbors when
using network conflation.  Higher values will reduce that contribution.  This value is generally
not changed by users.  Reasonable range is [0, ~10].

=== network.conflicts.weight.influence

* Data Type: double
* Default Value: `0.68`

A value of 0 will cause all edges to have the same weight with each neighbor, a higher value will
give matches with more support a higher weight when using network conflation. This value is
generally not changed by users. Reasonable range is [0, 2].

=== network.edge.match.set.finder.max.iterations

* Data Type: int
* Default Value: `20`

The maximum number of optimization iterations used to calculate edge match sets.

=== network.match.scoring.function.max

* Data Type: double
* Default Value: `1.0`

Maximum possible value for the logistic function applied to conflation matches with the Network
Algorithm. This value is generally not changed by users.

=== network.match.scoring.function.curve.mid.x

* Data Type: double
* Default Value: `0.5`

X value curve midpoint value for the logistic function applied to conflation matches with the
Network Algorithm. This value is generally not changed by users.

=== network.match.scoring.function.curve.steepness

* Data Type: double
* Default Value: `2.0`

Curve steepness value for the logistic function applied to conflation matches with the Network
Algorithm. This value is generally not changed by users.

=== network.match.threshold

* Data Type: double
* Default Value: `0.15`

The threshold at which a network match is called a match when using network conflation.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== network.matcher

* Data Type: string
* Default Value: `hoot::ConflictsNetworkMatcher`

An internal option for manipulating the way network matching occurs. This should only be used for
debug and test. The parameter must be a class that is registered with the factory and subclasses
`NetworkMatcher`.

=== network.max.stub.length

* Data Type: double
* Default Value: `20.0`

The maximum allowable length of a stub connection (way to node match) when using network conflation.
Value in meters.

=== network.merger.min.large.match.overlap.percentage

* Data Type: double
* Default Value: `80.0`

The minimum network match overlap percentage allowed for a network merge to occur.

=== network.miss.threshold

* Data Type: double
* Default Value: `0.85`

The threshold at which a network miss is called a miss.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== network.optimization.iterations

* Data Type: int
* Default Value: `10`

The number of optimization iterations the network match creator will run when performing network
conflation.

=== network.review.threshold

* Data Type: double
* Default Value: `0.5`

The threshold at which a network review is called a review. Reviews are also declared in some
other situations when the relationship is not clear.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== node.comparison.circular.error.sensitivity

* Data Type: int
* Default Value: `6`

The number of decimal places taken into account when comparing node circular error values.  Used by
node hash calculation.

=== node.comparison.coordinate.sensitivity

* Data Type: int
* Default Value: `7`

The number of decimal places taken into account when comparing node coordinates.  Used by node
hash calculation.

=== node.matcher.angle.calc.delta

* Data Type: double
* Default Value: `0.001`

The distance moved along a way, in meters, before calculating the outbound heading for a node on
that way by the NodeMatcher.

=== node.matcher.fail.on.bad.angle.spots

* Data Type: bool
* Default Value: `false`

If false, the NodeMatcher will allow angle calculation if any situations are found where it is
passed a node which is not at the beginning or end of a way.  If true, it will fail in the
aforementioned situation.

=== node.matcher.strictness

* Data Type: double
* Default Value: `2`

Determines how strictly the angle should be considered when calculating intersection tie points for
rubber sheeting. A value of 0 will ignore angle entirely. Large will make the angle comparison more
strict.

=== nodes.per.way.visitor.element.criterion

* Data Type: string
* Default Value: ``

An element criterion to be used for filtering ways whose nodes are counted. The elements must be
ways for their nodes to be counted, otherwise the criterion will be ignored.

=== non.conflatable.criterion.ignore.relation.members

* Data Type: bool
* Default Value: `false`

If false, in order for a relation to be deemed not conflatable all of its members must also not be
conflatable. If true, a relation can be deemed not conflatable even if any of its members are also
conflatable.

=== ogr.add.uuid

* Data Type: bool
* Default Value: `true`

If true, translation files will add a UUID to features.

=== ogr.append.data

* Data Type: bool
* Default Value: `false`

If the OGR output file/layer exists when exporting, append the data instead of trying to create a
new file/layer.

=== ogr.debug.addfcode

* Data Type: bool
* Default Value: `false`

Debugging: Add the FCODE as the OSM source:fcode tag during translation.

=== ogr.debug.dumptags

* Data Type: bool
* Default Value: `false`

Debugging: Print out Attributes and OSM Tag values during translation. For each feature, this will
show what keys and values go into the translation and what the translated output is.

=== ogr.debug.dumpvalidate

* Data Type: bool
* Default Value: `false`

Debugging: Print out which attributes are dropped during export validation.

=== ogr.debug.lookupclash

* Data Type: bool
* Default Value: `false`

Debugging: When building internal lookup tables, print values that clash.

=== ogr.debug.lookupcolumn

* Data Type: bool
* Default Value: `false`

Debugging: Print the columns that are not matched during one2one translation. This will show all
Attribute columns and values that do not match a one2one rule.

=== ogr.esri.fcsubtype

* Data Type: bool
* Default Value: `true`

Add the ESRI specific FCSUBTYPE field to the output.

=== ogr.esri.fdname

* Data Type: string
* Default Value: `TDS`

The name to use for the ESRI Feature Dataset on export. Note: This only applies to ESRI File
Geodatabases.

=== ogr.import.filter

* Data Type: string
* Default Value: ``

The regexp to be used to filter the layer names when importing layers from an ESRI File
Geodatabase. The default is to import all layers from a FGDB.  Setting this variable will
override the filter value that can be set by the layerNameFilter function inside a translation
script.

=== ogr.note.extra

* Data Type: string
* Default Value: `attribute`

When exporting to TDSv40 and TDSv61:
- "attribute" Add unused tags to the "ZI006_MEM" field.
- "file" Save the unused tags in a new layer (extra_[PLA]).
- "none" Don't save the unused tags, just drop them.

When exporting to MGCP:
- "attribute" Add unused tags to the "TXT" field.
- "file" Save the unused tags in a new layer (extra_[PLA]).
- "none" Don't save the unused tags, just drop them.

NOTE: According to the MGCP and Shapefile specifications, the "TXT" field has a maximum length of
255 characters. Extra text will be truncated.

=== ogr.reader.bounding.box.latlng

* Data Type: bool
* Default Value: `false`

If true, then the coordinates specified by `convert.bounding.box` are assumed to be in the WGS84
coordinate system.

A best effort will be made to convert between the two projections. The translated bounding box
will approximate the minimum bounding rectangle of the lat/lng bounding box. In some cases this
may be significantly larger.

=== ogr.reader.csv.keep.geom.fields

* Data Type: string
* Default Value: `NO`

From the GDAL docs:
If YES, the detected X,Y,Z or geometry columns will be stored as regular attribute fields.

=== ogr.reader.csv.latfield

* Data Type: string
* Default Value: `Lat*,lat*,LAT*`

From the GDAL docs:
A comma separated list of possible names for Y/latitude coordinate of a point. Each name might be a
pattern using the star character in starting and/or ending position. E.g.: prefix*, *suffix or
*middle*. The values in the column must be floating point values.

=== ogr.reader.csv.lonfield

* Data Type: string
* Default Value: `Lon*,lon*,LON*`

From the GDAL docs:
A comma separated list of possible names for X/longitude coordinate of a point. Each name might be
a pattern using the star character in starting and/or ending position. E.g.: prefix*, *suffix or
*middle*. The values in the column must be floating point values.

=== ogr.reader.csv.zfield

* Data Type: string
* Default Value: `Z,z`

From the GDAL docs:
A comma separated list of possible names for Z/elevation coordinate of a point. Each name might
be a pattern using the star character in starting and/or ending position. E.g.: prefix*, *suffix
or *middle*. The values in the column must be floating point values.

=== ogr.reader.epsg.override

* Data Type: int
* Default Value: `-1`

If specified the OGR reader will override the reported projection with the specified EPSG code. If
the value is < 0 then the projection reported by the source data set will be used. In most cases
the default value is fine.

This can sometimes be necessary when reading from a DB created with osm2pgsql. E.g.

----
hoot convert -D ogr.reader.epsg.override=900913 PG:"dbname='gis' host='localhost' port='5432' user='hoot' password='blahblah'" tmp/output.shp
----

=== ogr.reader.limit

* Data Type: int
* Default Value: `0`

Optional maximum number of OGR features to read from an input file. This can be useful when
debugging. A value < 1 indicates that there is no limit.

=== ogr.reader.node.id.field.name

* Data Type: string
* Default Value: ``

If set, the ogr reader will use the value at the specified field to populate node IDs.

=== ogr.reader.ogdi.launder.layer.names

* Data Type: string
* Default Value: `yes`

GDAL Option: When reading OGDI datasources (VPF etc), setting this to 'yes' causes the layer names
to be simplified. For example : watrcrsl_hydro instead of 'watrcrsl@hydro(*)_line'

=== ogr.split.o2s

* Data Type: bool
* Default Value: `false`

If the list of o2s tags is > 255 char, split it into into 254 char long pieces. If this is false,
it will be exported as one big string.

=== ogr.strict.checking

* Data Type: string
* Default Value: `on`

Turn OGR related errors into warnings or turn them off. Valid values are: on, off, warn

=== ogr.tds.add.etds

* Data Type: bool
* Default Value: `true`

Add the eLTDS specific attributes (SCAMIN, SCAMAX, LINK_ID) to the output.

=== ogr.tds.extra

* Data Type: string
* Default Value: `note`

When exporting to TDSv40 and TDSv61:
- "note" Add unused tags to the "ZI006_MEM" field.
- "file" Save the unused tags in a new layer (extra_[PLA]).
- "none" Don't save the unused tags, just drop them.

NOTE: If exporting to Shapefile, this field will be truncated to 255 characters.

=== ogr.thematic.structure

* Data Type: bool
* Default Value: `true`

Where applicable, export data in Thematic Groups (TransportationGroundCrv, StructurePnt etc)
instead of one FCODE per file/layer (ROAD_L, BUILDING_P etc).

=== ogr.throw.error

* Data Type: bool
* Default Value: `false`

For the schema switcher, throw errors instead of returning a partial translation/o2s_X feature
from a translation.

=== ogr.writer.create.all.layers

* Data Type: bool
* Default Value: `false`

Create all layers when using the OGR writer whether or not the layers contain features. Setting
this to true can be useful when conforming to strict specifications.

=== ogr.writer.pre.layer.name

* Data Type: string
* Default Value: ``

Text prepended to a layer name when writing an OGR format.

=== ogr.writer.script

* Data Type: string
* Default Value: ``

Set the script to use with OGR writer. For example:

----
hoot convert \
  -D ogr.writer.script=test-files/io/SampleTranslation.js \
  -D ogr.writer.pre.layer.name=bar \
  test-files/io/SampleTranslation.osm \
  PG:"dbname='osm_gis2' host='localhost' port='5432' user='hoot' password='hoottest'"
----

=== ogr2osm.merge.nearby.nodes

* Data Type: bool
* Default Value: `true`

Merges nearby nodes together when converting from an OGR format to OSM.

=== ogr2osm.simplify.complex.buildings

* Data Type: bool
* Default Value: `false`

Implicitly merges certain individual building parts into a single part when converting from an OGR
format to OSM.

=== osmapidb.bulk.inserter.disable.database.constraints.during.write

* Data Type: bool
* Default Value: `false`

If true, the OSM API database writer drops the database constraints before writing the data and
re-enables them after the writing is complete.  This can only be used with databases that have been
taken offline from other users.

=== osmapidb.bulk.inserter.disable.database.indexes.during.write

* Data Type: bool
* Default Value: `false`

If true, the OSM API database writer drops the database indexes before writing the data and
re-enables them after the writing is complete.  This can only be used with databases that have been
taken offline from other users.

=== osmapidb.bulk.inserter.reserve.record.ids.before.writing.data

* Data Type: bool
* Default Value: `false`

If true, the OSM API database writer will update the database to reserve the range of record IDs
parsed from the input data *before* writing the data to output.  IMPORTANT:  This option should
always be enabled in online environments (other writers present).  If it is not enabled in online
environments, the risk of record ID conflicts will be present in the database.  The output
destination must be an OSM API database or this setting will always be treated as being "false".
If the output destination is a SQL file, the SQL statements to update the record IDs will be
written to the SQL output for later execution.

=== osmapidb.bulk.inserter.write.sql.file.id.sequence.updates

* Data Type: bool
* Default Value: `true`

If true, the OSM API database bulk inserter write element ID sequence update SQL statements when
the output is a SQL file.  If false, the ID update statements will not be written.

=== osmapidb.id.aware.url

* Data Type: string
* Default Value: ``

This is required when using either the OsmApiDbAwareHootApiDbReader or the
OsmApiDbAwareHootApiDbWriter It forces database reading/writing use the specified OSM API database
as master for determining the sequencing of element ID's.

=== osm.add.bbox.tag

* Data Type: bool
* Default Value: `false`

Add a tag with the bounding box for each element

=== osm.map.reader.xml.add.child.refs.when.missing

* Data Type: bool
* Default Value: `false`

By default, OsmXmlReader will not add child references (node ref, elements members) to parent
elements if those elements are not present in the data.  For external sorting and translations,
where partial chunks of elements will be present the setting is changed.

=== osm.map.reader.factory.reader

* Data Type: string
* Default Value: ``

Specifies the reader that the OsmMapReaderFactory will use. This overrides any information derived
from the URL.

=== osm.map.writer.factory.writer

* Data Type: string
* Default Value: ``

Specifies the writer that the OsmMapWriterFactory will use. This overrides any information derived
from the URL.

=== osm.map.writer.format.xml

* Data Type: bool
* Default Value: `true`

Turns on autoformatting (line breaks, indentation etc) for XML output.

=== osm.map.writer.schema

* Data Type: string
* Default Value: ``

Sets the value for a "schema" attribute when writing a map to OSM XML.  NOTE: this will only be
written if the value is not empty.

=== osm.map.writer.skip.empty.map

* Data Type: bool
* Default Value: `false`

If true, the OSM map writer will NOT write a file if the map is empty.
The default is to write a file even if the map is empty.

=== overpass.api.host

* Data Type: string
* Default Value: `overpass-api.de`

Overpass API URL host name. Used by the JSON readers to distinguish Overpass JSON web sources from
GeoJSON web sources.

=== perty.apply.rubber.sheet

* Data Type: bool
* Default Value: `true`

If true, the data is rubbersheeted before conflation, moving perturbed data closer to reference
data.

=== perty.csm.D

* Data Type: double
* Default Value: `1000`

The PERTY D value. D is used in e ^ (-perty.grid.spacing / D). Defaults to 1000. Larger values
result in a more correlated permutation grid.

=== perty.grid.spacing

* Data Type: double
* Default Value: `100`

The size of the PERTY grid spacing in meters.

=== perty.ops

* Data Type: list
* Default Value:
** `hoot::RandomWaySplitter`
** `hoot::RandomWayGeneralizer`
** `hoot::RandomElementRemover`
** `hoot::RandomNodeDuplicator`
** `hoot::RandomTagModifier`
** `hoot::RandomElementRenamer`

A list of operations that should be applied after the geometries have been shifted by PERTY.
'hoot info --operators | grep Random' displays information about the available operations.

=== perty.search.distance

* Data Type: double
* Default Value: `15`

Distance parameter (in meters) that determines how far out to search when trying to match features
during conflation of reference and perturbed datasets.  This is equivalent in nature to the
'error:circular' tag used in Hootenanny conflation, however this setting is used instead for
PERTY scoring only.

=== perty.systematic.error.x

* Data Type: double
* Default Value: `50`

The sigma sx parameter for PERTY. This controls how much correlated error in the
X direction is in the output permutation. Units in meters.

=== perty.systematic.error.y

* Data Type: double
* Default Value: `50`

The sigma sy parameter for PERTY. This controls how much correlated error in the
Y direction is in the output permutation. Units in meters.

=== perty.test.allowed.score.variance

* Data Type: double
* Default Value: `0.025`

A score variance in the range of 0.0 to 1.0 by which a `perty-test` test run score may vary
while still allowing the test run's status to be described as passing.  Test run score differences
larger than this value will cause the test run's status to be described as failing.  If you are
not sure what your expected scores should be and want to bypass this check, create a list with
all entries equal to "1.0" of the same size as perty.test.num.runs, and then set
perty.test.allowed.score.variance to "1.0".  This effectively disables the score validation.

=== perty.test.dynamic.variable.increment

* Data Type: double
* Default Value: `0.1`

Amount by which the dynamic input variables specified in perty.test.dynamic.variables are
incremented during each test run by perty-test.

=== perty.test.dynamic.variable.start.value

* Data Type: double
* Default Value: `0`

Dynamic variable value initially assigned to a PERTY test dynamic variable when executed by
`perty-test`.

=== perty.test.dynamic.variables

* Data Type: list
* Default Value:
** ``

A list of one or more numeric PERTY variables to be assigned a start value (specified in
perty.test.dynamic.variable.start.value) and then incremented once per test run by
`perty-test` (specified in perty.test.dynamic.variable.increment) to the value of.  The list is
restricted to Hootenanny PERTY options only (perty.*) of a numeric type.

=== perty.test.expected.scores

* Data Type: list
* Default Value:
** `1.0`

A list of expected PERTY scores in the range of 0.0 to 1.0 for a `perty-test` run.  The number of
scores must match the value assigned to perty.test.num.runs.  If you are not sure what your
expected scores should be and want to bypass this check, create a list with all entries equal
to "1.0" of the same size as perty.test.num.runs, and then set perty.test.allowed.score.variance
to "1.0".  This effectively disables the score validation.

=== perty.test.fail.on.better.score

* Data Type: bool
* Default Value: `false`

If true, the `perty-test` will mark a test as failing if its test run score is higher than the
expected score and outside of the allowable score variance; if false, will always allow higher
test run scores to result in a passing test run, despite being outside of the allowable score
variance.

=== perty.test.generate.map.stats

* Data Type: bool
* Default Value: `false`

If true, Hootenanny map statistics files are output for all PERTY outputs created by `perty-test`.

=== perty.test.num.runs

* Data Type: int
* Default Value: `1`

The number of test runs executed by `perty-test`.  A single input variable, or multiple variables
(specified in perty.test.dynamic.variable) assigned identical starting values (specified in
perty.test.dynamic.variable.start.value), is/are altered by an increment during each test
(specified in perty.test.dynamic.variable.increment).

=== perty.test.num.simulations

* Data Type: int
* Default Value: `3`

The number of simulations per test run executed by `perty-test`.  A test run is made up of
multiple simulations.  Scores all simulation executed by the test run are averaged to give the
final PERTY score for the test run.

=== phone.number.additional.tag.keys

* Data Type: list
* Default Value:
** ``

By default, conflation examines all tags with keys containing the text "phone" for phone number
comparisons.  You can expand the tag keys searched by populating this list. From the command line,
separate list items with a semicolon and surround the entire list in double quotes.

=== phone.number.normalization.format

* Data Type: string
* Default Value: `NATIONAL`

The phone number format used when normalizing phone numbers.  Valid values are: E164, INTERNATIONAL,
NATIONAL, and RFC3966.

=== phone.number.region.code

* Data Type: string
* Default Value: `US`

Optional geographical region code used when comparing phone numbers.   See:
http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html  Specifying a region
code, if known for the input data, may increase phone number matching accuracy but may also have
runtime performance implications.

=== phone.number.search.in.text

* Data Type: bool
* Default Value: `false`

If true, POI/Polygon conflation will attempt to search for phone numbers within tag value text
that may contain things other than phone numbers.  If false, the conflation will assume the tag
value is a phone number and will not search within it.  poi.polygon.phone.number.region.code must
be set to a valid region code when enabling this option.  Enabling this option may have runtime
performance implications.

=== plugin.context.includes

* Data Type: list
* Default Value:
** `HootLib.js`

A list of scripts to include before loading the user's plugin script. The path will be search as:
current directory (CWD), $CWD/rules, $HOOT_HOME/rules.

=== poi.ignore.type.if.name.present

* Data Type: bool
* Default Value: `false`

If true, POI to POI conflation will ignore the types of the features being compared completely as
long as those being compared have a populated name field.

=== poi.polygon.additional.search.distance

* Data Type: double
* Default Value: `50.0`

The maximum distance, in meters, added to the circular error of the features being compared, the
total of which allows the features to be considered for match or review based on distance criteria
only. If a value of zero is specified, then only the feature circular error will factor into the
search distance. Higher values for this option can cause large increases in conflation runtime for
dense datasets.

=== poi.polygon.address.match.enabled

* Data Type: bool
* Default Value: `true`

If true, POI/Polygon conflation will compare addresses as one of the criteria for matching features.
If the data being conflated is known to have poor address data, disabling this option may speed up
conflation runtime performance.  This option is left turned off by default due to the small startup
time required to use libpostal (~5s), which would be wasteful for small datasets known to have no
addresses in them.  The startup time is incurred only once per Hootenanny command invocation.

=== poi.polygon.allow.cross.conflation.merging

* Data Type: bool
* Default Value: `false`

If false, when a match found by Building Conflation involves the same feature in a match found by
POI to Polygon Conflation, a review will be generated. If true, then that situation will result in
a merge between all features involved in the Building and POI to Polygon conflation matches.

=== poi.polygon.auto.merge.many.poi.to.one.poly.matches

* Data Type: bool
* Default Value: `false`

If true, instances where multiple POIs were matched to a single polygon will result in all of those
POIs being automatically merged into the polygon.  If false, then each matched POI will generate a
review against the polygon instead.

=== poi.polygon.max.size.per.cache

* Data Type: int
* Default Value: `100000`

The maximum number of elements to cache information for when using POI/Polygon Conflation. This
maximum size is repeated across multiple internal element information caches. To disable caching,
specify a value less than one.

=== poi.polygon.disable.same.source.conflation

* Data Type: bool
* Default Value: `false`

If true, POI to Polygon conflation will not attempt to conflate two features with the same source
tag value.  e.g. both have 'source=osm' tag  The source tag key is specified by
poi.polygon.source.tag.key.  How strictly the source tag key must be matched is controlled by
poi.polygon.disable.same.source.conflation.match.tag.key.prefix.only.  This setting is useful when
you have a data layer where data has been collected as both POIs and polygons for the same source
and you never want the two source to be conflated together.

=== poi.polygon.disable.same.source.conflation.match.tag.key.prefix.only

* Data Type: bool
* Default Value: `true`

If set to false and poi.polygon.disable.same.source.conflation is set to true, POI to polygon
conflation will disable conflation only between features who have the exact same source tag value.
e.g. both have 'source=osm' tag  If set to true and poi.polygon.disable.same.source.conflation is
set to true, then the tag matcher is less strict and will attempt to match the prefix of the source
tag value when delimited by a colon.  e.g. 'source=mgcp:buildp_clip;osm' will match
'source=mgcp:builda_clip;osm' since both tag values begin with 'mgcp:'.

=== poi.polygon.enable.review.reduction

* Data Type: bool
* Default Value: `true`

If true, POI to Polygon conflation will attempt to reduce unnecessary reviews without increasing
incorrect matches.  This setting may be runtime expensive when enabled for large datasets.

=== poi.polygon.keep.closest.matches.only

* Data Type: bool
* Default Value: `false`

If this setting is true, POI to Polygon conflation will attempt to match the closest feature pairs
only. This is useful, for example, when you know the POIs on top of buildings are the only correct
match in your data. With this setting enabled, the conflation will not match additional features at
greater distances, even if they are within the match distance threshold. Multiple features matches
are still possible in the case of exact distance ties. If this setting is false, then multiple POIs
found within the match distance threshold of a polygon are treated as reviews.

=== poi.polygon.match.distance.threshold

* Data Type: double
* Default Value: `5.0`

The maximum distance, in meters, between a POI and a polygon where they can still be considered
a match based on distance criteria only.

=== poi.polygon.match.evidence.threshold

* Data Type: int
* Default Value: `3`

The minimum evidence score at which a POI will be matched to a polygon.  Valid values are 1 to 4.
If an evidence score for a feature pair falls below this value, the relationship between the
features will be classified as a review or miss, depending on the value of
'poi.polygon.review.evidence.threshold'.  Generally, this setting should not be changed except
when working with specific POI/Polygon conflation use cases that require it.

=== poi.polygon.name.score.threshold

* Data Type: double
* Default Value: `0.8`

The minimum similarity the name scores of two features can have and be considered a name
match, with 0.0 being the least similar and 1.0 being the most similar (-1.0 if there are no names
present (null).

=== poi.polygon.name.translate.to.english

* Data Type: bool
* Default Value: `false`

If true, Hootenanny will attempt to translate to English the value of any name tag.  This can have
significant impact on the runtime performance of conflation when enabled and should only be enabled
if the source data is known to have non-English names.  The configuration option,
'language.translation.translator', controls which translator is used.

=== poi.polygon.phone.number.match.enabled

* Data Type: bool
* Default Value: `true`

If true, POI/Polygon conflation will compare phone number as one of the criteria for matching
features.  If the data being conflated is known to have poor telephone number data, disabling this
option may speed up conflation runtime performance.

=== poi.polygon.poi.ignore.tags.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/poi-polygon/poiPolygonPoiTagIgnoreList`

Path to a file containing a list of POI feature ignore tags.  Any POIs containing tags in the file
will be skipped by POI to Polygon conflation.

=== poi.polygon.poly.ignore.tags.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/poi-polygon/poiPolygonPolyTagIgnoreList`

Path to a file containing a list of polygon feature ignore tags.  Any polygons containing tags in
the file will be skipped by POI to Polygon conflation.

=== poi.polygon.print.match.distance.truth

* Data Type: bool
* Default Value: `false`

If true, debug match distance output will be obtained from manually matched source data and printed
if running 'hoot score-matches' with POI to Polygon conflation.

=== poi.polygon.promote.points.with.addresses.to.pois

* Data Type: bool
* Default Value: `false`

If true, POI to polygon conflation will classify all points with OSM address tags as POIs even if
they do not have specific type tags.

=== poi.polygon.review.evidence.threshold

* Data Type: int
* Default Value: `1`

The minimum evidence score at which a POI will be reviewed against a polygon, if the evidence score
does not meet the threshold defined by 'poi.polygon.match.evidence.threshold'.  Valid values are
0 to 3.  If an evidence score for a feature pair falls below this value, the relationship between
the features will be classified as a miss.  If the value is set to 0, all feature pairs which did
not match will be reviewed.  If the value is set greater than or equal to
'poi.polygon.match.evidence.threshold', an error will occur.  Generally, this setting should not be
changed except when working with specific POI/Polygon conflation use cases that require it.

=== poi.polygon.review.if.matched.types

* Data Type: list
* Default Value:
** ``

List of key value pairs in the format 'key=value' or  'key,value' (UI only) for features to always
review if marked as matches with POI to polygon conflation.  Delimit the individual types with ';'.
e.g. 'amenity=school;shop=mall' or 'amenity,school;shop,mall'.  Also, when specifying the list from
the command line, surround the entire value string in double quotes.

=== poi.polygon.review.multiuse.buildings

* Data Type: bool
* Default Value: `false`

If true, POI to polygon conflation always marks matches between POIs and polygons where multi-use
building polygons are present as needing review.  The definition of multi-use buildings is
controlled by the Hootenanny schema.

=== poi.polygon.source.tag.key

* Data Type: string
* Default Value: `source`

The source tag key to be used in conjunction with poi.polygon.disable.same.source.conflation.

=== poi.polygon.tag.merger

* Data Type: string
* Default Value: `hoot::PreserveTypesTagMerger`

The tag merger used by POI/Polygon conflation. See 'tag.merger.default' for more information. If
'poi.polygon.auto.merge.many.poi.to.one.poly.matches' is set to true then 'PreserveTypesTagMerger'
is always used and changes to this option value are ignore.

=== poi.polygon.type.score.threshold

* Data Type: double
* Default Value: `0.7`

The minimum similarity the type scores a POI and polygon can have and be considered a type
match, with 0.0 being the least similar and 1.0 being the most similar.

=== poi.polygon.type.to.names.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/poi-polygon/poiPolygonTypeToNames`

Flat file containing OSM types and lists of possible texts features having such a type might
contain.

=== poi.polygon.type.translate.to.english

* Data Type: bool
* Default Value: `false`

If true, Hootenanny will attempt to translate to English the value of any tag having a key in its
schema.  This can have significant impact on the runtime performance of conflation when enabled
and should only be enabled if the source data is known to have non-English type values.  The
configuration option, 'language.translation.translator', controls which translator is used.

=== power.line.auto.calc.search.radius

* Data Type: bool
* Default Value: `true`

Automatically calculates the search radius to be used during conflation of power lines using rubber
sheet tie point distances.  When this setting is enabled, rubbersheeting is not allowed as a
pre-conflation operation on the input data to be conflated.

=== power.line.match.threshold

* Data Type: double
* Default Value: `${conflate.match.threshold.default}`

The threshold at which a match is called a match for power lines.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== power.line.matcher.distance.weight.coefficient

* Data Type: double
* Default Value: `0.01`

A weighting coefficient value from 0.0 to 1.0 for the applying distance weighting to power line
matches.  This will favor feature that are closer together.  The higher the coefficient value, the
higher the weighting applied.  A value of 0.0 will disable distance weighting.

=== power.line.matcher.max.angle

* Data Type: double
* Default Value: `155.0`

Sets that maximum angle that is still considered a power line match. Units in degrees.

=== power.line.miss.threshold

* Data Type: double
* Default Value: `${conflate.miss.threshold.default}`

The threshold at which a miss is called a miss for power lines.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== power.line.review.threshold

* Data Type: double
* Default Value: `${conflate.review.threshold.default}`

The threshold at which a review is called a review for power lines.

See also:

 * _Estimate Pairwise Relationships_, <<hootalgo>>

=== power.line.subline.matcher

* Data Type: string
* Default Value: `hoot::FrechetSublineMatcher`

The way subline matcher to use when determining matching power line sublines.

=== quantile.aggregator.quantile

* Data Type: double
* Default Value: `0.0`

A quantile value from 0.0 to 1.0 for the QuantileAggregator.

=== progress.var.print.length.max

* Data Type: int
* Default Value: `30`

Maximum length, in characters, allowed when logging a variable value during progress logging
("--status"). Not honored by all progress logging.

=== railway.angle.sample.distance

* Data Type: double
* Default Value: `20.0`

Distance, in meters, used for sampling railway data during angle histogram extraction with the
SampledAngleHistogramExtractor

=== railway.matcher.heading.delta

* Data Type: double
* Default Value: `150.0`

The distance around a point on a railway to look when calculating the heading. See
`way.matcher.heading.delta`.

=== railway.matcher.max.angle

* Data Type: double
* Default Value: `90.0`

Sets that maximum angle that is still considered a railway match. Units in degrees.

=== railway.subline.matcher

* Data Type: string
* Default Value: `hoot::MaximalSublineMatcher`

The way subline matcher to use when determining matching sublines.

=== random.element.remover.probability

* Data Type: double
* Default Value: `0.05`

The probability that a feature will be removed.

=== random.element.renamer.change.probability

* Data Type: double
* Default Value: `0.05`

The probability of a change to each character in the name. The expected number of changes is
`perty.name.change.probability` * str.size().

=== random.element.renamer.probability

* Data Type: double
* Default Value: `0.05`

The probability that a name will be modified.

=== random.forest.model.trees

* Data Type: int
* Default Value: `40`

The number of trees used to train a random forest conflation model.

=== random.node.duplicator.move.multiplier

* Data Type: double
* Default Value: `1.0`

The distance that a feature is moved is based on the circular error of the source point. The
new point will be put within N(0, sigma^2) * moveMultiplier meters of the source point where
sigma is the standard deviation associated with the source point.

=== random.node.duplicator.probability

* Data Type: double
* Default Value: `0.10`

The probability of at least one duplicate node being created. See `random.node.duplicator.sigma` to
determine how many duplicates will be created.

=== random.node.duplicator.sigma

* Data Type: double
* Default Value: `1.0`

The number of duplicate nodes is set as `round(abs(N(0, sigma^2))) + 1`. Setting sigma to 0 will
guarantee that there will always be exactly one duplicate.

=== random.seed

* Data Type: int
* Default Value: `-1`

A random seed integer passed to the random number generator accessed by map operations and 
visitors that modify elements randomly (used by PERTY, RandomMapCropper, etc.). to give consistent
results over multiple runs. A value of -1 will generate a seed based on the time to provide
pseudo-random results in the output.

=== random.tag.modifier.exempt.tag.keys

* Data Type: list
* Default Value:
** `REF1`
** `REF2`
** `hoot:status`
** `uuid`

A list of tag keys which are exempt from the tag removal done by RandomTagModifier.  This is
useful for preventing the removal of tags Hootenanny relies on during conflation.

=== random.tag.modifier.probability

* Data Type: double
* Default Value: `0.05`

Set the probability that a tag will be removed.

=== random.tag.modifier.substitution.keys

* Data Type: list
* Default Value:
** `highway`

A list of tag keys which, rather than being removed by the PertyRemoveTagVisitor, will have their
values replaced instead.  The tag keys in the list match one to one with the replacement values in
random.tag.modifier.subsitution.values.

=== random.tag.modifier.substitution.values

* Data Type: list
* Default Value:
** `road`

A list of tag values which, should be substituted by PertyRemoveTagVisitor.  The tag values in the
list match one to one with the replacement values in random.tag.modifier.subsitution.keys.

=== random.way.generalizer.epsilon

* Data Type: double
* Default Value: `1.0`

Distance parameter, in meters, that determines to what degree a way is generalized by
RandomWayGeneralizer, which isa part of PERTY. Higher values result in more generalization (more
nodes removed).

=== random.way.generalizer.probability

* Data Type: double
* Default Value: `0.1`

The probability between 0.0 and 1.0 that a way will be generalized by PERTY.

=== random.way.splitter.min.node.spacing

* Data Type: double
* Default Value: `1`

The minimum spacing, in meters, that may occur between nodes created by PERTY way splits.

=== random.way.splitter.probability

* Data Type: double
* Default Value: `0.1`

The probability between 0.0 and 1.0 that a way will be split into multiple features by PERTY.

=== reader.add.source.datetime

* Data Type: bool
* Default Value: `true`

By default add the `source:datetime` or `source:ingest:datetime` stamp when reading files.  Not
honored by all readers.

=== reader.http.bbox.max.download.size

* Data Type: double
* Default Value: `1.0`

Maximum size of an overall bounding box in degrees before Hootenanny rejects the request,
reject anything larger than 1 square degree.

=== reader.http.bbox.max.size

* Data Type: double
* Default Value: `0.25`

Maximum size of an HTTP request's bounding box in degrees before it is split up into smaller
bounding boxes and run in parallel

=== reader.http.bbox.thread.count

* Data Type: int
* Default Value: `4`

Number of threads in the thread pool to process HTTP requests that contain bounding boxes that are
too large to query at once (see `reader.http.bbox.max.size`).

=== reader.keep.status.tag

* Data Type: bool
* Default Value: `false`

If reader.use.file.status is true, the default action is to drop the status tag from the file
during reading.  Setting this to true preserves the status tag on the element.  Not honored by
all readers.

=== reader.preserve.all.tags

* Data Type: bool
* Default Value: `false`

If true, all tags from the input data will be preserved.  Not honored by all readers.  e.g.
an 'accuracy' tag will not be replaced by a 'error:circular' tag; both tags will be kept.

=== reader.set.default.status

* Data Type: string
* Default Value: `unknown1`

Sets the status on data being read.  Valid values are "unknown1" and "unknown2".  Not honored by all
readers.

=== reader.use.data.source.ids

* Data Type: bool
* Default Value: `true`

If true, the element IDs in the source data will be assigned to written elements.  Otherwise,
Hootenanny manages element IDs internally.  This should not be set to true if any source elements
have negative IDs.  Not honored by all readers.

=== reader.use.file.status

* Data Type: bool
* Default Value: `false`

By default should a reader use the file status from the file. Not honored by all readers.

=== reader.warn.on.zero.version.element

* Data Type: bool
* Default Value: `false`

If true supporting map readers will log a warning when an element is encountered with a version of
zero. This is useful to track when deriving changesets where the reference data is expected to be
pre-existing.

=== relation.with.most.members.op.member.criterion

* Data Type: string
* Default Value: ``

The criterion used by RelationWithMostMembersOp to filter relation members.

=== relation.with.most.members.op.relation.criterion

* Data Type: string
* Default Value: ``

The criterion used by RelationWithMostMembersOp to filter relations.

=== remove.attributes.visitor.types

* Data Type: list
* Default Value:
** ``

List of element attributes to remove with the RemoveAttributesVisitor. Valid values are: changeset,
timestamp, user, uid, or version.

=== remove.duplicate.areas.diff

* Data Type: string
* Default Value: `hoot::ExactTagDifferencer`

Use this class for calculating the difference between element tags. If the difference is exactly
0 then they'll be a candidate for merging.

=== remove.elements.visitor.chain.element.criteria

* Data Type: bool
* Default Value: `false`

If set to true and multiple criterion are specified in remove.elements.visitor.element.criteria,
elements will be removed only if they satisfy all of the criteria.  If set to false, then only
one of the specified criteria must be met in order to remove an element.

=== remove.elements.visitor.element.criteria

* Data Type: list
* Default Value: ``

One or more element criteria used for selecting elements to remove. Delimit names with '='. From
the command line, names with ';' and surround the entire list in double quotes.
E.g. "hoot::TagCriterion;hoot::ReviewRelationCriterion"

=== remove.elements.visitor.recursive

* Data Type: bool
* Default Value: `true`

Should the element remover remove the elements recursively?

=== tag.filter.keys

* Data Type: list
* Default Value:
** ``

A list of tag keys the KeepTagsVisitor/RemoveTagsVisitor will keep/remove on/from elements.  From
the command line, separate list items with a semicolon and surround the entire list in double
quotes.

=== replace.tag.visitor.match.tag

* Data Type: string
* Default Value: ``

The tag the ReplaceTagVisitor replaces, of the form key=value.

=== replace.tag.visitor.replace.tag

* Data Type: string
* Default Value: ``

The tag the ReplaceTagVisitor uses as a replacement tag; of the form key=value.

=== review.score.criterion.invert.thresholding

* Data Type: bool
* Default Value: `false`

If true, reviews outside of the score range specified by review.score.criterion.min/max.threshold
will pass the filter.

=== review.score.criterion.max.threshold

* Data Type: double
* Default Value: `1.0`

The score threshold above which reviews will not pass the filter.  A value of 1.0 signifies no
maximum score threshold.  This currently works with Attribute Conflation only and can be enabled
with attribute.conflation.allow.reviews.by.score.

=== review.score.criterion.min.threshold

* Data Type: double
* Default Value: `0.0`

The score threshold below which reviews will not pass the filter.  A value of 0.0 signifies no
minimum score threshold.  This currently works with Attribute Conflation only and can be enabled
with attribute.conflation.allow.reviews.by.score.

=== rubber.sheet.debug

* Data Type: bool
* Default Value: `false`

If set to true, then debug symbols will be added to nodes and additional tags will be added to
matched nodes. This is a destructive operation that is only useful when debugging and should not
be used during serious conflation.

=== rubber.sheet.fail.when.minimum.tie.points.not.found

* Data Type: bool
* Default Value: `false`

If set to true, rubber sheeting will return an error if less than rubber.sheet.minimum.ties tie
points are found.  Otherwise, a warning will be logged and rubber sheeting will be skipped.

=== rubber.sheet.log.missing.requirements.as.warning

* Data Type: bool
* Default Value: `true`

If set to true, rubber sheeting will log a warning if any requirement for rubber sheeting is not
met.  e.g less than rubber.sheet.minimum.ties tie points are found.  Otherwise, an info level log
statement will be logged instead.  This setting is completely ignored if
rubber.sheet.fail.when.minimum.tie.points.not.found is set to true.

=== rubber.sheet.max.allowed.ways

* Data Type: int
* Default Value: `500000`

A threshold above which rubber sheeting will not attempt to align a dataset. A value of -1 will
impose no upper limit. This is in place for performance reasons, as rubbersheeting is a very
expensive process and can be increased on a per usage basis. This option's default value may need
some tweaking based on experiences with operational data.

=== rubber.sheet.max.interpolator.iterations

* Data Type: int
* Default Value: `200`

The maximum number of interpolation optimization iterations, per optimization loop, an interpolator
is allowed to run during rubber sheeting.  Use -1 for no iteration limit.  Not supported by all
interpolators.  Can prevent runaway optimizations with some interpolators.  Lower values may result
in the selection of a suboptimal interpolator.

=== rubber.sheet.minimum.ties

* Data Type: int
* Default Value: `4`

The minimum number of tie points required to calculate a rubbersheeting solution.

=== rubber.sheet.ref

* Data Type: bool
* Default Value: `true`

If this configuration setting is set to true, then the first layer is treated as the reference
layer and will not be moved. If set to false the two layers will be moved towards each other. The
weighting is determined based on the circular error.

=== schema.translation.direction

* Data Type: string
* Default Value: ``

The optional direction that the translation script should translate in, used by the convert command,
SchemaTranslationOp, and SchemaTranslationVisitor. Valid values are: `toogr` and `toosm`. `toogr`
will translate in a direction appropriate for an OGR output. `toosm` will translate in a direction
appropriate for an OSM output. The script specified by the schema.translation.script configuration
option must be compatible with the translation direction chosen. If no translation direction is
specified when translating with the convert command, the convert command will attempt to determine
the correct direction and notify the user which direction was determined. If the convert command
cannot determine the direction, it will use the `toosm` direction and also notify the user. The
SchemaTranslationOp and SchemaTranslationVisitor used outside of the convert command will return
an error if no direction was specified.

=== schema.translation.override

* Data Type: string
* Default Value: ``

Override the value of translated tags and attributes.

VERY IMPORTANT NOTE: The changes apply to ALL elements and are applied to the OSM+ tags either
before or after the translation. E.g.
* After attributes are translated to OSM+ tags during Import
* Before OSM+ tags are translated to attributes on Export

NOTE: This assumes that you know exactly what tags you want to modify/delete

=== schema.translation.script

* Data Type: string
* Default Value: ``

The script used by the SchemaTranslationVisitor and SchemaTranslationOp for schema translation.
Required if converting to/from an OGR format.  Use either the base name of a Python translation
file (without the .py extension) or the full path to a Javascript file (.js). If this configuration
option is added to a call to the convert command and neither SchemaTranslationVisitor or
SchemaTranslationOp is specified the convert command will add the translation operation as the
first conversion operation. If you want the translation operation to occur in a different order,
then you must explicitly specify it in convert.ops. For more information on translation files read
the "Translation" section of the Hootenanny User Guide.

=== score.graph.debug.images

* Data Type: bool
* Default Value: `false`

Export some of the images used when evaluating the graph connections between two maps (`score`
command).

=== score.matches.allow.uuids.as.ids

* Data Type: bool
* Default Value: `false`

The current manual match ID format is a 6 character hex string created by the AddRef*Visitor
classes. This option allows backward compatibilty support for UUID ID formats that exist in some
older manually matched input files.

=== score.matches.full.debug.output

* Data Type: bool
* Default Value: `false`

Adds more detail to manual match validation warning/error messages.

=== score.matches.remove.nodes

* Data Type: bool
* Default Value: `false`

Remove REF tags from nodes before match scoring when using the score-matches command.

=== score.matches.require.ref1

* Data Type: bool
* Default Value: `true`

In some situations manually matched input data may need to be cropped to allow for smaller test
runtimes. When this is done, sometimes REF1 features will be removed from the input. Disabling this
option allows for score-matches to run when there are missing REF1 features. Warnings will be logged
for any that are found.

=== script.test.max.exec.time

* Data Type: int
* Default Value: `-1`

For script test debugging only.  Sets a maximum allowed time, in seconds, for a script test to run.
If the script runs longer than the specified time, then it is forcefully stopped by the system.  If
the value is set to -1, then there is no time limit for script tests.  This is useful when
debugging tests which may hang on a remote build server.

=== search.radius.area

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating areas. See `search.radius.default`

=== search.radius.building

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating buildings. See `search.radius.default`.

=== search.radius.calculator.element.criterion

* Data Type: string
* Default Value: ``

Element criterion class which determines which input features are used for search radius
calculation.  An empty value specifies that all input features are to be used.  Conflation routines
making use of automatic search radius calculation should set this value appropriately.

=== search.radius.default

* Data Type: double
* Default Value: `-1.0`

The default search radius, in meters, to use when conflating features. If two features are within
the search radius then they will be considered for matching. If the value is set to the default
value of -1.0, then the circular error will be used to calculate an appropriate search radius
('error:circular' or 'accuracy' tag). Some feature matching routines may not strictly honor the
default value.

=== search.radius.generic.line

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating generic lines. See `search.radius.default`.

=== search.radius.generic.point

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating generic points. See `search.radius.default`.

=== search.radius.generic.point.polygon

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating generic points with generic polygons. See
`search.radius.default`.

=== search.radius.generic.polygon

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating generic polygons. See `search.radius.default`.

=== search.radius.highway

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating highways. See `search.radius.default`.

=== search.radius.poi

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating POIs. If `search.radius.default` is used, POI
conflation will calculate a custom search distance based on the input feature types. See
`search.radius.default`.

=== search.radius.power.line

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius to use when conflating power lines. This value is not used if
`power.line.auto.calc.search.radius=true`, and in that case the search radius is auto-calculated for
the entire input dataset.  See `search.radius.default`.

=== search.radius.railway

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius, in meters, to use when conflating railways. See `search.radius.default`.

=== search.radius.waterway

* Data Type: double
* Default Value: `${search.radius.default}`

The search radius to use when conflating waterways. This value is not used if
`waterway.auto.calc.search.radius=true`, and in that case the search radius is auto-calculated for
the entire input dataset.  See `search.radius.default`.

=== set.tag.value.visitor.append.to.existing.value

* Data Type: bool
* Default Value: `false`

If true, any element with a value populated for the key defined by the set.tag.value.visitor.keys
option will have the value specified in the set.tag.value.visitor.value option appended to it.

=== set.tag.value.visitor.chain.element.criteria

* Data Type: bool
* Default Value: `false`

If set to true and multiple criterion are specified in set.tag.value.visitor.element.criteria,
the tags of elements will be modified only if they satisfy all of the criteria.  If set to
false, then only one of the specified criteria must be met in order to modify the tags of an
element.

=== set.tag.value.visitor.element.criteria

* Data Type: list
* Default Value: ``

The element criteria used to select elements to add or modify tags on used by the SetTagValueVisitor
and RecursiveSetTagValueOp classes.  To pass in complex nested criteria, use the Hootenanny
Javascript interface instead.

=== set.tag.value.visitor.keys

* Data Type: list
* Default Value: ``

Sets the key member in the SetTagValueVisitor and RecursiveSetTagValueOp classes. The number of keys
in `set.tag.value.visitor.keys` should match the number of keys in `set.tag.value.visitor.values`.
Separate list items with a semicolon.

=== set.tag.value.visitor.overwrite

* Data Type: bool
* Default Value: `true`

If true, the SetTagValueVisitor and RecursiveSetTagValueOp classes will overwrite any existing tag
it finds with key=set.tag.value.visitor.keys, otherwise it will skip updating the tag.

=== set.tag.value.visitor.values

* Data Type: list
* Default Value: ``

Set the value member in the SetTagValueVisitor and RecursiveSetTagValueOp classes. The number of
keys in `set.tag.value.visitor.values` should match the number of keys in
`set.tag.value.visitor.keys`. Separate list items with a semicolon.

=== shape.file.writer.cols

* Data Type: list
* Default Value:
** ``

Optional list of keys to use for shape file output columns. Valid only when converting from OSM to
shape file and cannot be used in combination with a translation.  If this option is not specified,
then the list of columns will be automatically determined based on the most frequently populated
tags.

=== small.highway.merger.diff

* Data Type: string
* Default Value: `hoot::ExactTagDifferencer`

Use this class for calculating the difference between element tags. If the difference is exactly 0
then they'll be a candidate for merging.

=== small.highway.merger.threshold

* Data Type: double
* Default Value: `15`

If highways are smaller than threshold and the tags matched, then they will be merged together into
a single way.

=== snap.unconnected.ways.add.circular.error.to.search.radius

* Data Type: bool
* Default Value: `false`

If true, all tolerances use by the Unconnected Way Snapper will have the circular error of the
snap node candidate added to them.

=== snap.unconnected.ways.discretization.spacing

* Data Type: double
* Default Value: `1.0`

The spacing granularity to which a unconnected way node is snapped back to a way with the
Unconnected Way Snapper.  Setting this too low could result in lower algorithm performance, and
setting it too high may result in less accurate way snapping.

=== snap.unconnected.ways.existing.way.node.tolerance

* Data Type: double
* Default Value: `0.5`

Maximum distance used by the Unconnected Way Snapper, in meters, allowed between an unconnected
way endpoint node and a neighboring way node for the way endpoint node to be snapped directly to
the existing way node instead of adding the way endpoint node as a new way node on the way.

=== snap.unconnected.ways.mark.snapped.nodes

* Data Type: bool
* Default Value: `false`

If true, all way nodes snapped by the Unconnected Way Snapper to another way or way node will be
marked with a custom tag.  Useful for debugging purposes.

=== snap.unconnected.ways.mark.snapped.ways

* Data Type: bool
* Default Value: `false`

If true, all ways snapped by the Unconnected Way Snapper to another way or way node will be
marked with a custom tag.  Useful for debugging purposes.

=== snap.unconnected.ways.snap.to.way.criterion

* Data Type: string
* Default Value: `hoot::WayCriterion`

Optional criterion class to filter the types of ways being snapped to.  An example would be:
hoot::HighwayCriterion.  If no criterion is specified, then all ways are considered as targets for
way snapping.

=== snap.unconnected.ways.snap.to.way.node.criterion

* Data Type: string
* Default Value: `hoot::WayNodeCriterion`

Optional criterion class to filter the types of way nodes being snapped to.  An example would be:
hoot::HighwayNodeCriterion.  If no criterion is specified, then all ways are considered as targets
for way snapping.  This option is only used if snap.unconnected.ways.reuse.way.nodes is enabled.

=== snap.unconnected.ways.snap.to.way.statuses

* Data Type: list
* Default Value:
** `Input1`

Statuses of ways or way nodes being snapped to.  Valid values are 'Input1', 'Input2', or 'Conflated'.
Specify 'Input1' to snap secondary ways to reference ways or 'Input2' to snap reference ways to
secondary ways. You may add multiple statuses and separate them with a semicolon. For example, to
snap to both reference and conflated ways use: 'Input1;Conflated'.

=== snap.unconnected.ways.snap.tolerance

* Data Type: double
* Default Value: `5.0`

Maximum distance used by the Unconnected Way Snapper, in meters, allowed between an unconnected
way endpoint node and a neighboring way for the way endpoint node to be snapped to the closest
section of the neighboring way.

=== snap.unconnected.ways.snap.way.criterion

* Data Type: string
* Default Value: `hoot::WayCriterion`

Optional criterion class to filter the types of ways being snapped.  An example would be:
hoot::HighwayCriterion.  If no criterion is specified, then all ways are considered as sources for
way snapping.

=== snap.unconnected.ways.snap.way.statuses

* Data Type: list
* Default Value:
** `Input2`

Statuses of ways being snapped.  Valid values are 'Input1', 'Input2', or 'Conflated'.  Specify
'Input1' to snap reference ways to secondary ways or 'Input2' to snap secondary ways to reference
ways. You may add multiple statuses and separate them with a semicolon. For example, to snap both
reference and conflated ways use: 'Input1;Conflated'.

=== snap.unconnected.ways.use.existing.way.nodes

* Data Type: bool
* Default Value: `true`

If true, when the Unconnected Way Snapper snaps way endpoint nodes to neighboring ways, it
will attempt to reuse existing way nodes on the way being snapped to instead of adding
the endpoint way node to the way.

=== spark.changeset.writer.element.payload.format

* Data Type: string
* Default Value: `json`

The format used to write the element payload portion of the Spark changeset file.  Valid options are
'json' or 'xml'.

=== split.name.visitor.max.length

* Data Type: int
* Default Value: `255`

The maximum length, in characters, that the SplitNameVisitor will allow for a name tag.

=== stats.generic.data.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/GenericStats.json`

Path to a json file containing definitions for the generic set of statistics values.

=== stats.translate.script

* Data Type: string
* Default Value: `${HOOT_HOME}/translations/TDSv61.js`

Path to the translation script to use when translating tags for stats. If the path is empty, then
all translation stats are disabled.

=== status.criterion.status

* Data Type: string
* Default Value: `Invalid`

The default status to match with a status criterion.  Used by various element visitors and map
operations.

=== status.update.visitor.only.update.invalid.status

* Data Type: bool
* Default Value: `false`

If true, the SetTagValueVisitor class will only update statuses on elements when the existing
status is 'Invalid'.

=== status.update.visitor.status

* Data Type: string
* Default Value: ``

Adds the specified status to elements.  Valid values are: 'Unknown1', 'Unknown2', 'Conflated', or
'Invalid'.  If left empty, all elements will receive tag additions.

=== street.types.file

* Data Type: string
* Default Value: `${HOOT_HOME}/conf/core/streetTypes`

Flat file containing street types and their abbreviations.

=== tag.ancestor.differencer.name

* Data Type: string
* Default Value: ``

The default ancestor to use when using the hoot::TagAncestorDifferencer class for comparing tags.
Primarily, this is useful within the node.js interface.

=== tag.category.differencer.name

* Data Type: string
* Default Value: ``

The default category to use when using the hoot::TagCategoryDifferencer class for comparing tags.
Primarily, this is useful within the node.js interface.

=== tag.contains.criterion.case.sensitive

* Data Type: bool
* Default Value: `true`

If true, TagContainsCriterion will only identify partial tag values whose case matches exactly with
the tag key values in tag.contains.criterion.kvps. If false, the cases of the tag values do not have
to match.

=== tag.contains.criterion.kvps

* Data Type: list
* Default Value: ``

Key/value pairs to use with TagContainsCriterion. Delimit keys and values with '='.  From the
command line, delimit multiple key/value pairs with ';' and surround the entire list in double
quotes. E.g. "name=Java;name=Shop"

=== tag.criterion.case.sensitive

* Data Type: bool
* Default Value: `true`

If true, TagCriterion will only identify tag strings whose cases match exactly with the values in
tag.criterion.kvps. If false, the cases of the tag strings do not have to match.

=== tag.criterion.kvps

* Data Type: list
* Default Value: ``

Key/value pairs to use with TagCriterion. Delimit keys and values with '='.  From the command line,
delimit multiple key/value pairs with ';' and surround the entire list in double quotes.
E.g. "highway=road;amenity=school"

=== tag.filter.element.criterion

* Data Type: string
* Default Value: ``

The plugin name of an element criterion used to select tags to keep/remove used by
KeepTagsVisitor/RemoveTagsVisitor.  To pass in complex nested criteria for tag filtering, use the
Hootenanny Javascript interface instead.

=== tag.key.contains.criterion.text

* Data Type: string
* Default Value: ``

Text that TagKeyContainsCriterion uses to filter elements.

=== tag.key.criterion.keys

* Data Type: list
* Default Value: ``

Tag keys that TagKeyCriterion uses to filter elements. From the command line, delimit multiple
key/value pairs with ';' and surround the entire list in double quotes.

=== tag.merger.default

* Data Type: string
* Default Value: `hoot::OverwriteTag2Merger`

Specifies the default way of merging tags. This is used by most merge routines, but may be overriden
depending on the specifics of the merger. 'hoot info --tag-mergers' displays information about the 
available mergers.

=== tag.merger.overwrite.exclude

* Data Type: list
* Default Value:
** ``

A list of tags not to be overwritten on target features during tag merging when using
OverwriteTagMerger only. Please keep alphabetized.

=== tag.printing.format

* Data Type: string
* Default Value: `asciidoc`

Output format to use when printing OSM+ Tag documentation. Valid formats are: 'csv', 'html',
'redmine' & 'asciidoc' (default)

=== tag.printing.script

* Data Type: string
* Default Value: `${HOOT_HOME}/translations/PrintOsmDocs.js`

The translation script to use when printing OSM+ Tag documentation.

=== tag.rename.visitor.new.key

* Data Type: string
* Default Value: ``

The key to used to replace an existing by the TagRenameKeyVisitor.  TagRenameKeyVisitor allows for
renaming existing tag keys on all elements in a map.

=== tag.rename.visitor.old.key

* Data Type: string
* Default Value: ``

The key to be replaced by the TagRenameKeyVisitor.  TagRenameKeyVisitor allows for
renaming existing tag keys on all elements in a map.

=== tag.value.numeric.range.criterion.keys

* Data Type: list
* Default Value:
** ``

The keys the TagValueNumericRangeCriterion examines the numeric value of.  Tags for all keys must
meet the numeric range requirement for the criterion to be met.  Separate multiple keys with a
semicolon from the command line and surround the entire list in double quotes.

=== tag.value.numeric.range.criterion.max

* Data Type: long
* Default Value: `-1`

Minimum tag numeric value that will allow the TagValueNumericRangeCriterion to be satisified.

=== tag.value.numeric.range.criterion.min

* Data Type: long
* Default Value: `-1`

Minimum tag numeric value that will allow the TagValueNumericRangeCriterion to be satisified.

=== tags.visitor.keys

* Data Type: list
* Default Value:
** ``

List of tag keys for which the AverageNumericTagsVisitor, SumNumericTagsVisitor, or
TagKeyCountVisitor uses.  Separate keys with a ';' and surround entire list in double quotes when
passing in from the command line.

=== task.status.update.interval

* Data Type: int
* Default Value: `1000`

For commands supporting it, the iteration count at which a status message should be logged. This
setting may have a negative impact on performance if set to a very low value.

=== test.case.conflate.cmd

* Data Type: string
* Default Value: `hoot::ConflateCmd`

Set the conflate command that should be used in a test case. This is only useful when writing
test cases (`test-files/cases/`) and was originally added to support the MultiaryPoiConflateCmd.

=== test.case.conflate.differential

* Data Type: bool
* Default Value: `false`

When activated, this runs the conflate case test conflate command with the --differential option.

=== test.case.conflate.differential.include.tags

* Data Type: bool
* Default Value: `false`

When activated, this runs the conflate case test conflate command with both the --differential
and --include-tags options (setting this to true automatically sets test.case.conflate.differential
to true).

=== test.force.orthographic.projection

* Data Type: bool
* Default Value: `false`

Always force the orthographic projection when determining a proper planar projection. In typical
usage this will never be used (the automatically selected projection should always be at least as
good). This is most useful if you want to get consistent results even if the list of potential
projections change over time. Very handy in unit tests.

=== token.keep.non.words

* Data Type: bool
* Default Value: `false`

This does a rudimentary check to see if the string contains any letters/numbers. If the string
doesn't contain any letters or numbers then it will be dropped. Examples that would be dropped
if the value is `true` include:

* `&`
* `--`

Examples that will be kept if the value is `true` include:

* `1&2`
* `Joe's`

=== token.min.size

* Data Type: double
* Default Value: `3`

This is the minimum string size that the string tokenizer should accept as a token. If the string
length is less than this value, then it will not be accepted. Set the value to 0 if you want to
accept all strings.

This setting primarily applies to string comparison functions and will eliminate comparing very
short strings such as "of" or "&".

=== token.separator

* Data Type: string
* Default Value: `\s+`

The token separator defined as a regular expression. This is used in some methods for tokenizing
names. The default value matches multiple whitespace characters.

Another useful option is `[\s-,';]+`. This will split on white space, or several forms of
punctuation. See http://doc.qt.io/qt-4.8/QRegExp.html for a useful list of regular expression
options.

=== translated.tag.differencer.ignore.list

* Data Type: string
* Default Value: ``

Semi-colon delimited list of tags that should be ignored when comparing a list of tags using the
hoot::TranslatedTagDifferencer.

See also:
* `translated.tag.differencer.script`

=== translated.tag.differencer.script

* Data Type: string
* Default Value: ``

Path to the translation script when using the tag differencer, `hoot::TranslatedTagDifferencer`.
This tag differencer is most useful when deciding how difference between two sets of tags should be
calculated. It can be used with:

* `small.highway.merger.diff`
* `remove.duplicate.areas.diff`

=== transliteration.max.cache.size

* Data Type: int
* Default Value: `-1`

The maximum size of the cache used by ToEnglishDictionaryTranslator for transliterations.  A cache
size of -1 disables the transliteration cache.

=== unify.enable.optimal.constrained.matches

* Data Type: bool
* Default Value: `true`

Enable the calculation of Optimal Constrained Matches during conflation. When enabled, Hootenanny
will use either Optimal Constrained Matches (via GLPK) or Greedy Constrained Matches. If disabled,
Hootenanny will only use Greedy Constrained Matches.

=== unify.optimizer.time.limit

* Data Type: double
* Default Value: `60`

The maximum amount of time in seconds to wait for the optimizer to complete. A value of -1 makes
the wait time limit unlimited.

If this value is set to something other than -1 your conflation results may change between multiple
runs. Especially if the machine Hoot is running on is under heavy load. If the "CM Score:" value
is changing between runs and GLPK isn't finding an optimal solution then this is likely causing
different output.  Just because the output is changing doesn't mean it is wrong, but this can be
problematic if you're doing testing or expecting repeatable output for other.

=== uuid.helper.repeatable

* Data Type: bool
* Default Value: `false`

Creates a repeatable UUID for the features. This is useful for debugging, but shouldn't be used in
normal operation.

=== waterway.angle.sample.distance

* Data Type: double
* Default Value: `20.0`

Distance, in meters, used for sampling river data during angle histogram extraction with the
SampledAngleHistogramExtractor

=== waterway.auto.calc.search.radius

* Data Type: bool
* Default Value: `true`

Automatically calculates the search radius to be used during conflation of waterways using rubber
sheet tie point distances.  When this setting is enabled, rubbersheeting is not allowed as a
pre-conflation operation on the input data to be conflated.

=== waterway.matcher.heading.delta

* Data Type: double
* Default Value: `150.0`

The distance around a point on a waterway to look when calculating the heading. See
`way.matcher.heading.delta`.

=== waterway.matcher.max.angle

* Data Type: double
* Default Value: `90.0`

Sets that maximum angle that is still considered a waterway match. Units in degrees.

=== waterway.rubber.sheet.minimum.ties

* Data Type: int
* Default Value: `5`

Sets the minimum number of tie points that will be used when calculating a rubber sheeting solution
with river data.

=== waterway.rubber.sheet.ref

* Data Type: bool
* Default Value: `true`

See `rubber.sheet.ref`.  Used during waterway conflation.

=== waterway.subline.matcher

* Data Type: string
* Default Value: `hoot::MaximalSublineMatcher`

The way subline matcher to use when determining matching sublines.

=== way.angle.sample.distance

* Data Type: double
* Default Value: `10.0`

Distance, in meters, used for sampling way data during angle histogram extraction with the
SampledAngleHistogramExtractor

=== way.generalizer.criterion

* Data Type: string
* Default Value: ``

Criterion class used for filtering by WayGeneralizeVisitor. All filtered elements must be ways, so
any filters contradicting that will be ignored.

=== way.generalizer.epsilon

* Data Type: double
* Default Value: `0.1`

Distance parameter, in meters, that determines to what degree a way is generalized by
WayGeneralizeVisitor. Higher values result in more generalization (more nodes removed).

=== way.generalizer.remove.nodes.shared.by.ways

* Data Type: bool
* Default Value: `false`

If true, WayGeneralizeVisitor disregards nodes shared by ways when removing them. If false, it won't
remove them.

=== way.joiner

* Data Type: string
* Default Value: `hoot::WayJoinerBasic`

The way joiner implementation used by the `WayJoinerOp` to repair way splits after a conflation job.

This operation can take on the following options:
* `hoot::ReplacementSnappedWayJoiner`
* `hoot::WayJoinerAdvanced`
* `hoot::WayJoinerBasic`

=== way.joiner.advanced.strict.name.match

* Data Type: bool
* Default Value: `false`

If enabled, WayJoinerAdvanced will not consider the "alt_name" tag when performing name comparisons.

=== way.joiner.leave.parent.id

* Data Type: bool
* Default Value: `false`

If enabled, WayJoinerOp will leave a way's parent ID populated after joining.

=== way.matcher.heading.delta

* Data Type: double
* Default Value: `5.0`

The distance around a point on a way to look when calculating the heading. A larger value will
smooth out the heading values on a line. A smaller value will make the heading values correspond
directly to the heading on the way at that point. This is primarily used in subline matching.
Values are in meters.

=== way.matcher.max.angle

* Data Type: double
* Default Value: `60.0`

Sets the maximum angle that is still considered a way match. Units in degrees.

=== way.max.nodes.per.way

* Data Type: int
* Default Value: `1900`

If unset, or set to zero, there will be no maximum number of nodes stored in a way. If the value is
set to a non-zero positive value, all ways which contain more nodes than this value will be broken
up into two or more separate ways, and all of them will contain this number of nodes (or less).
The original way will be removed from the map. Default set to 1900 as OSM imports through OSM API
databases are capped at 2000 nodes per way.

=== way.merger.min.split.size

* Data Type: double
* Default Value: `5`

The minimum size that a way should be split into for merging. Units in meters.

=== way.splitter.max.length

* Data Type: double
* Default Value: `5000`

This configuration option is used by hoot::WaySplitterOp. If a way is longer than this length
(in meters) then it will be split into smaller ways.

=== way.subline.matcher

* Data Type: string
* Default Value: `hoot::MaximalNearestSublineMatcher`

The way subline matcher to use when determining matching sublines.

=== way.subline.string.matcher

* Data Type: string
* Default Value: `hoot::MaximalSublineStringMatcher`

The way subline string matcher to use when determining matching sublines.

=== weighted.metric.distance.extractor.point.aggregator

* Data Type: string
* Default Value: `hoot::MeanAggregator`

Type of point aggregator used by the WeightedMetricDistanceExtractor.

=== weighted.metric.distance.extractor.search.radius

* Data Type: double
* Default Value: `-1.0`

The search radius used by the WeightedMetricDistanceExtractor.  Units in meters.  Defaults to a
value computed from the circular error for each way being examined.

=== weighted.word.distance.abridged.dictionary

* Data Type: string
* Default Value: `dictionary/WordsAbridged.sqlite`

Location of the abridged word frequency dictionary. This is not ideal and you'll get repeated
warnings if you use it, but at least you won't need to download a 400MB+ file.

=== weighted.word.distance.dictionary

* Data Type: string
* Default Value: `dictionary/words.sqlite`

Location of the word frequency dictionary. If the absolute file path isn't found, then
the local `conf` and `$HOOT_HOME/conf` directories will be searched.

This file is typically downloaded from:
https://hoot-support.s3.amazonaws.com/words1.sqlite.bz2

=== weighted.word.distance.probability

* Data Type: double
* Default Value: `1.0`

The weight used will be `1.0 / (w ^ p)` where w is the frequency. Valid values are >= 0, but
generally it should be `1 >= p >= 0`.

=== writer.clean.review.tags

* Data Type: bool
* Default Value: `true`

If true, Hootenanny review tags are treated as metadata tags and will be removed by the
NoInformationElementRemover cleaning operation.

=== writer.include.circular.error.tags

* Data Type: bool
* Default Value: `true`

When true, writers will include circular error information. Not necessarily honored by all writers.
This should be left enabled by default to prevent custom accuracy tags from being dropped by writers
in intermediary steps during a conflation workflow. Disable the option only on the final write for
a dataset.

=== writer.include.conflate.review.detail.tags

* Data Type: bool
* Default Value: `true`

Add detailed review tags to review relations during conflation.  Turning this setting off is
generally only done in debugging environments.  This setting allows for partitioning the level of
detail in the review relation tags into two groups.  Turning this setting off can be useful during
debugging in situations where you are comparing map outputs and want to see reviews in the output
but are not concerned with a higher level of review detail.  Disabling this setting will also
disable AddHilbertReviewSortOrderOp, the output of which is depended upon by the Hootenanny user
interface.

=== writer.include.conflate.score.tags

* Data Type: bool
* Default Value: `false`

Add match/miss/review score values to elements with matches during Unifying Conflation. This is
useful for debugging.

=== writer.include.debug.tags

* Data Type: bool
* Default Value: `false`

When true, writers will include debug information (hoot:* tags; e.g. status). Not honored by all
writers.

=== writer.include.matched.by.tag

* Data Type: bool
* Default Value: `false`

If true, the 'hoot:matchedBy' tag will be added to element output when
writer.include.debug.tags=true.

=== writer.precision

* Data Type: int
* Default Value: `16`

Set the output precision when writing. Not honored by all writers.

=== writer.text.status

* Data Type: bool
* Default Value: `false`

Add hoot:status values as text (Reference, Merged etc) instead of numbers (1,2,3)

=== writer.xml.sort.by.id

* Data Type: bool
* Default Value: `true`

If true, OSM elements written to XML file output (.osm) are sorted by ID.  Setting this to true
will require reading the entire source dataset into memory.  Setting it to false may result in
using smaller amounts of memory during writing if the data source being written is also a streamable
format (see the "Supported Data Formats" section in README.md).
