{
  "#" : "AddressScoreExtractor uses a static cache and some tests are set up to work with it being enabled, including", 
  "#" : "case tests and some unit tests. So, leave it off by default for tests and enable it where needed in command", 
  "#" : "tests only.",
  "address.scorer.enable.caching": "false",
  "#" : "Address matching has a slow init time incurred on a per test process basis (see related section in ",
  "#" : "developer tests documentation). So, we only want to take that hit for those tests where it is absolutely ", 
  "#" : "required. For unit tests, pass these option vals into the class being tested. Have decided not to enable ",
  "#" : "this setting in case tests to avoid the hit when they're run in parallel. Since regression tests all use ",
  "#" : "this conf, you'll want to explicitly override these settings in all applicable tests so that we have an ",
  "#" : "acccurate picture of address matching's impact on conflation scores. Given the longer runtimes of the ",
  "#" : "regression tests, the performance hit isn't that big of a deal.",
  "address.match.enabled": "false",
  "#" : "There is a specific test for building part multi-threaded merging, so lets leave it single threaded for",
  "#" : "all other tests.",
  "building.part.merger.thread.count": "1",
  "conflate.info.max.size.per.cache": "1000",
  "#" : "Truncating tag values with ApiTagTruncateVisitor is a default conflation op and valuable in order to keep", 
  "#" : "JOSM output looking good. However, We want to disable it during conflation tests so that we can more easily", 
  "#" : "trace feature provenance via UUID. Arguably, we could alternatively come up with a generic syntax in JSON", 
  "#" : "options to do this kind of disabling for any option...",
  "conflate.tag.disable.value.truncation": "true",
  "element.cache.size.node": "2000",
  "element.cache.size.relation": "100",
  "element.cache.size.way": "100",
  "expectation.intersection.max.cache.size": 100,
  "geonames.reader.string.cache.size": "100",
  "#" : "There is a specific test for multi-threaded graph comparison, so lets leave it single threaded for all other tests.",
  "graph.comparator.max.threads": "1",
  "#" : "Makes Qt hashes behave uniformly",
  "hash.seed.zero": "true",
  "#" : "Set these to the lowest possible to reduce validation memory consumption.",
  "jni.initial.memory": "64m",
  "jni.max.memory": "64m",
  "implicit.tagging.max.cache.size": "200",
  "language.max.cache.size": "100",
  "#" : "Don't need to see these warnings during tests. Just adds clutter.",
  "log.warnings.for.completely.untyped.input.maps": "false",
  "log.warnings.for.empty.input.maps": "false",
  "network.subline.max.cache.size": "1000",
  "#" : "We run our test server right up to the available memory limit, so no point in seeing any memory warnings for tests.",
  "memory.usage.checker.enabled": "false",
  "#" : "Use this larger search distance value in testing only, for now, in order to avoid changing a bunch of test ",
  "#" : "output. This value was experimentally determined but it can make conflating larger datasets intractable.",
  "poi.polygon.additional.search.distance": "125.0",
  "#" : "By user request in the UI we have hardcoded POI/Polygon tag merging to use the PreserveTypesTagMerger, as", 
  "#" : "there is currently no way to dynamically change tag merging from within the UI. Since PreserveTypesTagMerger", 
  "#" : "is still experimental, we want to leave the merger in the these tests at its original value and possibly change", 
  "#" : "it at a later time.",
  "poi.polygon.tag.merger": "OverwriteTag2Merger",
  "transliteration.max.cache.size": "100",
  "#" : "Force orthographic projection consistency in tests",
  "test.force.orthographic.projection": "true",
  "#" : "Sort the output tags alphabetically by key for easier reading.",
  "writer.sort.tags.by.key": "true",
  "#" : "end"
}
